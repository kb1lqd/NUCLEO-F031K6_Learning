
Timer_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003454  08003454  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003454  08003454  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003454  08003454  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800345c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080034cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080034cc  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3f0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fd  00000000  00000000  0002a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002be88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010077  00000000  00000000  0002d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c678  00000000  00000000  0003d4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064a45  00000000  00000000  00049b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000ae5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033a4 	.word	0x080033a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033a4 	.word	0x080033a4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
	char uart_buf[50];
	int uart_buf_len;
	uint16_t timer_val;

	// Test
	unsigned char test_count = 0;
 800023a:	233f      	movs	r3, #63	; 0x3f
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fab5 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f825 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f92d 	bl	80004a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800024e:	f000 f8fb 	bl	8000448 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000252:	f000 f877 	bl	8000344 <MX_TIM2_Init>
   * - 16 bit count
   */


  // Say hello
  uart_buf_len = sprintf(uart_buf, "Timer onboard PWM LED program started!\r\n");
 8000256:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <main+0x54>)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f002 fc7b 	bl	8002b58 <siprintf>
 8000262:	0003      	movs	r3, r0
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000268:	b29a      	uxth	r2, r3
 800026a:	1d39      	adds	r1, r7, #4
 800026c:	4807      	ldr	r0, [pc, #28]	; (800028c <main+0x58>)
 800026e:	2364      	movs	r3, #100	; 0x64
 8000270:	f002 f8f2 	bl	8002458 <HAL_UART_Transmit>

  //Start the timer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0x5c>)
 8000276:	2104      	movs	r1, #4
 8000278:	0018      	movs	r0, r3
 800027a:	f001 fafb 	bl	8001874 <HAL_TIM_PWM_Start>

  //Change PWM duty cycle
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,128);
 800027e:	4b04      	ldr	r3, [pc, #16]	; (8000290 <main+0x5c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000286:	e7fe      	b.n	8000286 <main+0x52>
 8000288:	080033bc 	.word	0x080033bc
 800028c:	20000098 	.word	0x20000098
 8000290:	2000011c 	.word	0x2000011c

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b095      	sub	sp, #84	; 0x54
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2420      	movs	r4, #32
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2330      	movs	r3, #48	; 0x30
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fc4f 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	2310      	movs	r3, #16
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	0018      	movs	r0, r3
 80002b0:	2310      	movs	r3, #16
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fc47 	bl	8002b48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ba:	003b      	movs	r3, r7
 80002bc:	0018      	movs	r0, r3
 80002be:	2310      	movs	r3, #16
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f002 fc40 	bl	8002b48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2202      	movs	r2, #2
 80002ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2210      	movs	r2, #16
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fce3 	bl	8000cb0 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ee:	f000 f90f 	bl	8000510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	2110      	movs	r1, #16
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2207      	movs	r2, #7
 80002f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2100      	movs	r1, #0
 8000310:	0018      	movs	r0, r3
 8000312:	f000 ffe7 	bl	80012e4 <HAL_RCC_ClockConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031a:	f000 f8f9 	bl	8000510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800031e:	003b      	movs	r3, r7
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	f001 f92b 	bl	8001588 <HAL_RCCEx_PeriphCLKConfig>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000336:	f000 f8eb 	bl	8000510 <Error_Handler>
  }
}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	46bd      	mov	sp, r7
 800033e:	b015      	add	sp, #84	; 0x54
 8000340:	bd90      	pop	{r4, r7, pc}
	...

08000344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	; 0x38
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	2328      	movs	r3, #40	; 0x28
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2310      	movs	r3, #16
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fbf7 	bl	8002b48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035a:	2320      	movs	r3, #32
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2308      	movs	r3, #8
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f002 fbef 	bl	8002b48 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	231c      	movs	r3, #28
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fbe8 	bl	8002b48 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000378:	4b30      	ldr	r3, [pc, #192]	; (800043c <MX_TIM2_Init+0xf8>)
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	05d2      	lsls	r2, r2, #23
 800037e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000380:	4b2e      	ldr	r3, [pc, #184]	; (800043c <MX_TIM2_Init+0xf8>)
 8000382:	2207      	movs	r2, #7
 8000384:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <MX_TIM2_Init+0xf8>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1027;
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <MX_TIM2_Init+0xf8>)
 800038e:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <MX_TIM2_Init+0xfc>)
 8000390:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000392:	4b2a      	ldr	r3, [pc, #168]	; (800043c <MX_TIM2_Init+0xf8>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000398:	4b28      	ldr	r3, [pc, #160]	; (800043c <MX_TIM2_Init+0xf8>)
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_TIM2_Init+0xf8>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 f9bf 	bl	8001724 <HAL_TIM_Base_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003aa:	f000 f8b1 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ae:	2128      	movs	r1, #40	; 0x28
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	0152      	lsls	r2, r2, #5
 80003b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b8:	187a      	adds	r2, r7, r1
 80003ba:	4b20      	ldr	r3, [pc, #128]	; (800043c <MX_TIM2_Init+0xf8>)
 80003bc:	0011      	movs	r1, r2
 80003be:	0018      	movs	r0, r3
 80003c0:	f001 fbc0 	bl	8001b44 <HAL_TIM_ConfigClockSource>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003c8:	f000 f8a2 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_TIM2_Init+0xf8>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 f9f8 	bl	80017c4 <HAL_TIM_PWM_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003d8:	f000 f89a 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003dc:	2120      	movs	r1, #32
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ea:	187a      	adds	r2, r7, r1
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_TIM2_Init+0xf8>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 ff85 	bl	8002300 <HAL_TIMEx_MasterConfigSynchronization>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80003fa:	f000 f889 	bl	8000510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2260      	movs	r2, #96	; 0x60
 8000402:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1027/2;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <MX_TIM2_Init+0x100>)
 8000408:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000416:	1d39      	adds	r1, r7, #4
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_TIM2_Init+0xf8>)
 800041a:	2204      	movs	r2, #4
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fad5 	bl	80019cc <HAL_TIM_PWM_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000426:	f000 f873 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <MX_TIM2_Init+0xf8>)
 800042c:	0018      	movs	r0, r3
 800042e:	f000 f8b5 	bl	800059c <HAL_TIM_MspPostInit>

}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b00e      	add	sp, #56	; 0x38
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	2000011c 	.word	0x2000011c
 8000440:	00000403 	.word	0x00000403
 8000444:	00000201 	.word	0x00000201

08000448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <MX_USART1_UART_Init+0x5c>)
 8000450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000454:	2296      	movs	r2, #150	; 0x96
 8000456:	0212      	lsls	r2, r2, #8
 8000458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800048c:	0018      	movs	r0, r3
 800048e:	f001 ff8f 	bl	80023b0 <HAL_UART_Init>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000496:	f000 f83b 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000098 	.word	0x20000098
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_GPIO_Init+0x64>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_GPIO_Init+0x64>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	03c9      	lsls	r1, r1, #15
 80004b8:	430a      	orrs	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_GPIO_Init+0x64>)
 80004be:	695a      	ldr	r2, [r3, #20]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	03db      	lsls	r3, r3, #15
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_GPIO_Init+0x64>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0x64>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	0289      	lsls	r1, r1, #10
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_GPIO_Init+0x64>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	029b      	lsls	r3, r3, #10
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_GPIO_Init+0x64>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_GPIO_Init+0x64>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	02c9      	lsls	r1, r1, #11
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_GPIO_Init+0x64>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	02db      	lsls	r3, r3, #11
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b004      	add	sp, #16
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0549      	lsls	r1, r1, #21
 8000544:	430a      	orrs	r2, r1
 8000546:	61da      	str	r2, [r3, #28]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_MspInit+0x44>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	055b      	lsls	r3, r3, #21
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	429a      	cmp	r2, r3
 8000576:	d10b      	bne.n	8000590 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <HAL_TIM_Base_MspInit+0x34>)
 800057a:	69da      	ldr	r2, [r3, #28]
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_TIM_Base_MspInit+0x34>)
 800057e:	2101      	movs	r1, #1
 8000580:	430a      	orrs	r2, r1
 8000582:	61da      	str	r2, [r3, #28]
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_TIM_Base_MspInit+0x34>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	2201      	movs	r2, #1
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b004      	add	sp, #16
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	240c      	movs	r4, #12
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0018      	movs	r0, r3
 80005aa:	2314      	movs	r3, #20
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f002 faca 	bl	8002b48 <memset>
  if(htim->Instance==TIM2)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	429a      	cmp	r2, r3
 80005be:	d123      	bne.n	8000608 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_TIM_MspPostInit+0x74>)
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_TIM_MspPostInit+0x74>)
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	02c9      	lsls	r1, r1, #11
 80005ca:	430a      	orrs	r2, r1
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_TIM_MspPostInit+0x74>)
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	02db      	lsls	r3, r3, #11
 80005d6:	4013      	ands	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80005dc:	0021      	movs	r1, r4
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2208      	movs	r2, #8
 80005e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2202      	movs	r2, #2
 80005e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2202      	movs	r2, #2
 80005fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <HAL_TIM_MspPostInit+0x78>)
 8000600:	0019      	movs	r1, r3
 8000602:	0010      	movs	r0, r2
 8000604:	f000 f9ec 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b009      	add	sp, #36	; 0x24
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	48000400 	.word	0x48000400

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b08b      	sub	sp, #44	; 0x2c
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	2414      	movs	r4, #20
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0018      	movs	r0, r3
 8000626:	2314      	movs	r3, #20
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f002 fa8c 	bl	8002b48 <memset>
  if(huart->Instance==USART1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <HAL_UART_MspInit+0x90>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d132      	bne.n	80006a0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_UART_MspInit+0x94>)
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <HAL_UART_MspInit+0x94>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	01c9      	lsls	r1, r1, #7
 8000644:	430a      	orrs	r2, r1
 8000646:	619a      	str	r2, [r3, #24]
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_UART_MspInit+0x94>)
 800064a:	699a      	ldr	r2, [r3, #24]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	01db      	lsls	r3, r3, #7
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_UART_MspInit+0x94>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_UART_MspInit+0x94>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0289      	lsls	r1, r1, #10
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <HAL_UART_MspInit+0x94>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_UART_MspInit+0x98>)
 8000678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2203      	movs	r2, #3
 800068a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	187a      	adds	r2, r7, r1
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f000 f9a0 	bl	80009e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b00b      	add	sp, #44	; 0x2c
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40013800 	.word	0x40013800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	00008004 	.word	0x00008004

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f8b2 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f002 f9ee 	bl	8002af4 <__errno>
 8000718:	0003      	movs	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	2301      	movs	r3, #1
 8000720:	425b      	negs	r3, r3
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	18d2      	adds	r2, r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <_sbrk+0x64>)
 8000734:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b006      	add	sp, #24
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20001000 	.word	0x20001000
 8000744:	00000400 	.word	0x00000400
 8000748:	2000008c 	.word	0x2000008c
 800074c:	20000178 	.word	0x20000178

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000786:	f7ff ffe3 	bl	8000750 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800078a:	f002 f9b9 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fd51 	bl	8000234 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007a0:	0800345c 	.word	0x0800345c
  ldr r2, =_sbss
 80007a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007a8:	20000178 	.word	0x20000178

080007ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>
	...

080007b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_Init+0x24>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_Init+0x24>)
 80007ba:	2110      	movs	r1, #16
 80007bc:	430a      	orrs	r2, r1
 80007be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 f809 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c6:	f7ff fea9 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_InitTick+0x5c>)
 80007e2:	681c      	ldr	r4, [r3, #0]
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_InitTick+0x60>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0019      	movs	r1, r3
 80007ea:	23fa      	movs	r3, #250	; 0xfa
 80007ec:	0098      	lsls	r0, r3, #2
 80007ee:	f7ff fc95 	bl	800011c <__udivsi3>
 80007f2:	0003      	movs	r3, r0
 80007f4:	0019      	movs	r1, r3
 80007f6:	0020      	movs	r0, r4
 80007f8:	f7ff fc90 	bl	800011c <__udivsi3>
 80007fc:	0003      	movs	r3, r0
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f8e1 	bl	80009c6 <HAL_SYSTICK_Config>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	e00f      	b.n	800082c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d80b      	bhi.n	800082a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
 8000818:	2200      	movs	r2, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f000 f8be 	bl	800099c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_InitTick+0x64>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b003      	add	sp, #12
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	18d2      	adds	r2, r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000008 	.word	0x20000008
 8000860:	20000164 	.word	0x20000164

08000864 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000164 	.word	0x20000164

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	; 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	429a      	cmp	r2, r3
 8000966:	d301      	bcc.n	800096c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000968:	2301      	movs	r3, #1
 800096a:	e010      	b.n	800098e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SysTick_Config+0x44>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	3a01      	subs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff7c 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x44>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ffbf 	bl	8000954 <SysTick_Config>
 80009d6:	0003      	movs	r3, r0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e149      	b.n	8000c84 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4091      	lsls	r1, r2
 80009fa:	000a      	movs	r2, r1
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d100      	bne.n	8000a08 <HAL_GPIO_Init+0x28>
 8000a06:	e13a      	b.n	8000c7e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d00b      	beq.n	8000a28 <HAL_GPIO_Init+0x48>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b12      	cmp	r3, #18
 8000a26:	d130      	bne.n	8000a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	409a      	lsls	r2, r3
 8000a36:	0013      	movs	r3, r2
 8000a38:	43da      	mvns	r2, r3
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a5e:	2201      	movs	r2, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
 8000a64:	0013      	movs	r3, r2
 8000a66:	43da      	mvns	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	091b      	lsrs	r3, r3, #4
 8000a74:	2201      	movs	r2, #1
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	0013      	movs	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0xea>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d123      	bne.n	8000b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	08da      	lsrs	r2, r3, #3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3208      	adds	r2, #8
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	58d3      	ldr	r3, [r2, r3]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2207      	movs	r2, #7
 8000adc:	4013      	ands	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	2107      	movs	r1, #7
 8000af6:	400b      	ands	r3, r1
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	08da      	lsrs	r2, r3, #3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	6939      	ldr	r1, [r7, #16]
 8000b10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	0013      	movs	r3, r2
 8000b22:	43da      	mvns	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2203      	movs	r2, #3
 8000b30:	401a      	ands	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	055b      	lsls	r3, r3, #21
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d100      	bne.n	8000b54 <HAL_GPIO_Init+0x174>
 8000b52:	e094      	b.n	8000c7e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b54:	4b51      	ldr	r3, [pc, #324]	; (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	4b4e      	ldr	r3, [pc, #312]	; (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4013      	ands	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	3302      	adds	r3, #2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	589b      	ldr	r3, [r3, r2]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	4013      	ands	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	220f      	movs	r2, #15
 8000b84:	409a      	lsls	r2, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	43da      	mvns	r2, r3
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	2390      	movs	r3, #144	; 0x90
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x1d6>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x1d2>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a40      	ldr	r2, [pc, #256]	; (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x1ce>
 8000baa:	2302      	movs	r3, #2
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1d8>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1d8>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1d8>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	2103      	movs	r1, #3
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	4013      	ands	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43da      	mvns	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	029b      	lsls	r3, r3, #10
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	035b      	lsls	r3, r3, #13
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43da      	mvns	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_GPIO_Init+0x2cc>)
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	1e13      	subs	r3, r2, #0
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0x2b2>
 8000c90:	e6ae      	b.n	80009f0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b006      	add	sp, #24
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e301      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d100      	bne.n	8000cce <HAL_RCC_OscConfig+0x1e>
 8000ccc:	e08d      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cce:	4bc3      	ldr	r3, [pc, #780]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d00e      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cda:	4bc0      	ldr	r3, [pc, #768]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	220c      	movs	r2, #12
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x64>
 8000ce6:	4bbd      	ldr	r3, [pc, #756]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	401a      	ands	r2, r3
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d10d      	bne.n	8000d14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf8:	4bb8      	ldr	r3, [pc, #736]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	d100      	bne.n	8000d06 <HAL_RCC_OscConfig+0x56>
 8000d04:	e070      	b.n	8000de8 <HAL_RCC_OscConfig+0x138>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d000      	beq.n	8000d10 <HAL_RCC_OscConfig+0x60>
 8000d0e:	e06b      	b.n	8000de8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e2d8      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d107      	bne.n	8000d2c <HAL_RCC_OscConfig+0x7c>
 8000d1c:	4baf      	ldr	r3, [pc, #700]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4bae      	ldr	r3, [pc, #696]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02f      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10c      	bne.n	8000d4e <HAL_RCC_OscConfig+0x9e>
 8000d34:	4ba9      	ldr	r3, [pc, #676]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4ba8      	ldr	r3, [pc, #672]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	49a9      	ldr	r1, [pc, #676]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d3c:	400a      	ands	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4ba6      	ldr	r3, [pc, #664]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4ba5      	ldr	r3, [pc, #660]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d46:	49a7      	ldr	r1, [pc, #668]	; (8000fe4 <HAL_RCC_OscConfig+0x334>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e01e      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d10e      	bne.n	8000d74 <HAL_RCC_OscConfig+0xc4>
 8000d56:	4ba1      	ldr	r3, [pc, #644]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4ba0      	ldr	r3, [pc, #640]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	02c9      	lsls	r1, r1, #11
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4b9d      	ldr	r3, [pc, #628]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b9c      	ldr	r3, [pc, #624]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0249      	lsls	r1, r1, #9
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_RCC_OscConfig+0xdc>
 8000d74:	4b99      	ldr	r3, [pc, #612]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b98      	ldr	r3, [pc, #608]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	4999      	ldr	r1, [pc, #612]	; (8000fe0 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b96      	ldr	r3, [pc, #600]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b95      	ldr	r3, [pc, #596]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000d86:	4997      	ldr	r1, [pc, #604]	; (8000fe4 <HAL_RCC_OscConfig+0x334>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d014      	beq.n	8000dbe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fd66 	bl	8000864 <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fd61 	bl	8000864 <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e28a      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0xee>
 8000dbc:	e015      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fd51 	bl	8000864 <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fd4c 	bl	8000864 <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e275      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x118>
 8000de6:	e000      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d100      	bne.n	8000df6 <HAL_RCC_OscConfig+0x146>
 8000df4:	e069      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df6:	4b79      	ldr	r3, [pc, #484]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d00b      	beq.n	8000e18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e00:	4b76      	ldr	r3, [pc, #472]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	220c      	movs	r2, #12
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d11c      	bne.n	8000e46 <HAL_RCC_OscConfig+0x196>
 8000e0c:	4b73      	ldr	r3, [pc, #460]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	4013      	ands	r3, r2
 8000e16:	d116      	bne.n	8000e46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e18:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d005      	beq.n	8000e2e <HAL_RCC_OscConfig+0x17e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e24b      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	22f8      	movs	r2, #248	; 0xf8
 8000e34:	4393      	bics	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00da      	lsls	r2, r3, #3
 8000e3e:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e44:	e041      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d024      	beq.n	8000e98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4e:	4b63      	ldr	r3, [pc, #396]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fd03 	bl	8000864 <HAL_GetTick>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fcfe 	bl	8000864 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e227      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f1      	beq.n	8000e64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	22f8      	movs	r2, #248	; 0xf8
 8000e86:	4393      	bics	r3, r2
 8000e88:	0019      	movs	r1, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e018      	b.n	8000eca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e98:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	438a      	bics	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fcde 	bl	8000864 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fcd9 	bl	8000864 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e202      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d1f1      	bne.n	8000eae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2208      	movs	r2, #8
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d036      	beq.n	8000f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d019      	beq.n	8000f10 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fcbc 	bl	8000864 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fcb7 	bl	8000864 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1e0      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d0f1      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x242>
 8000f0e:	e018      	b.n	8000f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f14:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	438a      	bics	r2, r1
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fca2 	bl	8000864 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f26:	f7ff fc9d 	bl	8000864 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1c6      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d1f1      	bne.n	8000f26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2204      	movs	r2, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d100      	bne.n	8000f4e <HAL_RCC_OscConfig+0x29e>
 8000f4c:	e0b4      	b.n	80010b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f4e:	201f      	movs	r0, #31
 8000f50:	183b      	adds	r3, r7, r0
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f58:	69da      	ldr	r2, [r3, #28]
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	055b      	lsls	r3, r3, #21
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d110      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f64:	69da      	ldr	r2, [r3, #28]
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0549      	lsls	r1, r1, #21
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	61da      	str	r2, [r3, #28]
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000f72:	69da      	ldr	r2, [r3, #28]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f7e:	183b      	adds	r3, r7, r0
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d11a      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0049      	lsls	r1, r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fc61 	bl	8000864 <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa8:	f7ff fc5c 	bl	8000864 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e185      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_RCC_OscConfig+0x338>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d10e      	bne.n	8000fec <HAL_RCC_OscConfig+0x33c>
 8000fce:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	6a1a      	ldr	r2, [r3, #32]
 8000fd2:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	621a      	str	r2, [r3, #32]
 8000fda:	e035      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	fffeffff 	.word	0xfffeffff
 8000fe4:	fffbffff 	.word	0xfffbffff
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10c      	bne.n	800100e <HAL_RCC_OscConfig+0x35e>
 8000ff4:	4bb6      	ldr	r3, [pc, #728]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8000ff6:	6a1a      	ldr	r2, [r3, #32]
 8000ff8:	4bb5      	ldr	r3, [pc, #724]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	621a      	str	r2, [r3, #32]
 8001000:	4bb3      	ldr	r3, [pc, #716]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	4bb2      	ldr	r3, [pc, #712]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001006:	2104      	movs	r1, #4
 8001008:	438a      	bics	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	e01c      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x380>
 8001016:	4bae      	ldr	r3, [pc, #696]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001018:	6a1a      	ldr	r2, [r3, #32]
 800101a:	4bad      	ldr	r3, [pc, #692]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800101c:	2104      	movs	r1, #4
 800101e:	430a      	orrs	r2, r1
 8001020:	621a      	str	r2, [r3, #32]
 8001022:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	4baa      	ldr	r3, [pc, #680]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	621a      	str	r2, [r3, #32]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0x398>
 8001030:	4ba7      	ldr	r3, [pc, #668]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	4ba6      	ldr	r3, [pc, #664]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001036:	2101      	movs	r1, #1
 8001038:	438a      	bics	r2, r1
 800103a:	621a      	str	r2, [r3, #32]
 800103c:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	4ba3      	ldr	r3, [pc, #652]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001042:	2104      	movs	r1, #4
 8001044:	438a      	bics	r2, r1
 8001046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d014      	beq.n	800107a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fc08 	bl	8000864 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff fc03 	bl	8000864 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	4a9b      	ldr	r2, [pc, #620]	; (80012d4 <HAL_RCC_OscConfig+0x624>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e12b      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106e:	4b98      	ldr	r3, [pc, #608]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	2202      	movs	r2, #2
 8001074:	4013      	ands	r3, r2
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x3aa>
 8001078:	e013      	b.n	80010a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fbf3 	bl	8000864 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001082:	e009      	b.n	8001098 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001084:	f7ff fbee 	bl	8000864 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a91      	ldr	r2, [pc, #580]	; (80012d4 <HAL_RCC_OscConfig+0x624>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e116      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001098:	4b8d      	ldr	r3, [pc, #564]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	2202      	movs	r2, #2
 800109e:	4013      	ands	r3, r2
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010a2:	231f      	movs	r3, #31
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d105      	bne.n	80010b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ac:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	4b87      	ldr	r3, [pc, #540]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010b2:	4989      	ldr	r1, [pc, #548]	; (80012d8 <HAL_RCC_OscConfig+0x628>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	4013      	ands	r3, r2
 80010c0:	d063      	beq.n	800118a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d12a      	bne.n	8001120 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010ca:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010d0:	2104      	movs	r1, #4
 80010d2:	430a      	orrs	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010d6:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010da:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbbf 	bl	8000864 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ec:	f7ff fbba 	bl	8000864 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e0e3      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d0f1      	beq.n	80010ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001108:	4b71      	ldr	r3, [pc, #452]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	22f8      	movs	r2, #248	; 0xf8
 800110e:	4393      	bics	r3, r2
 8001110:	0019      	movs	r1, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	00da      	lsls	r2, r3, #3
 8001118:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800111a:	430a      	orrs	r2, r1
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
 800111e:	e034      	b.n	800118a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	3305      	adds	r3, #5
 8001126:	d111      	bne.n	800114c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001128:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800112a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800112e:	2104      	movs	r1, #4
 8001130:	438a      	bics	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001134:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	22f8      	movs	r2, #248	; 0xf8
 800113a:	4393      	bics	r3, r2
 800113c:	0019      	movs	r1, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	00da      	lsls	r2, r3, #3
 8001144:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800114e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001150:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001152:	2104      	movs	r1, #4
 8001154:	430a      	orrs	r2, r1
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001158:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800115a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115c:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fb7e 	bl	8000864 <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800116e:	f7ff fb79 	bl	8000864 <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0a2      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d1f1      	bne.n	800116e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x4e4>
 8001192:	e097      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	220c      	movs	r2, #12
 800119a:	4013      	ands	r3, r2
 800119c:	2b08      	cmp	r3, #8
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4f2>
 80011a0:	e06b      	b.n	800127a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d14c      	bne.n	8001244 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011b0:	494a      	ldr	r1, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x62c>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fb55 	bl	8000864 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c0:	f7ff fb50 	bl	8000864 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e079      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	049b      	lsls	r3, r3, #18
 80011da:	4013      	ands	r3, r2
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	220f      	movs	r2, #15
 80011e4:	4393      	bics	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ec:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <HAL_RCC_OscConfig+0x630>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	0019      	movs	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	431a      	orrs	r2, r3
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0449      	lsls	r1, r1, #17
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb23 	bl	8000864 <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff fb1e 	bl	8000864 <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e047      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	049b      	lsls	r3, r3, #18
 800123e:	4013      	ands	r3, r2
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x574>
 8001242:	e03f      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800124a:	4924      	ldr	r1, [pc, #144]	; (80012dc <HAL_RCC_OscConfig+0x62c>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fb08 	bl	8000864 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125a:	f7ff fb03 	bl	8000864 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e02c      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	049b      	lsls	r3, r3, #18
 8001274:	4013      	ands	r3, r2
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x5aa>
 8001278:	e024      	b.n	80012c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e01f      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_RCC_OscConfig+0x620>)
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	401a      	ands	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d10e      	bne.n	80012c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	220f      	movs	r2, #15
 80012a6:	401a      	ands	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	23f0      	movs	r3, #240	; 0xf0
 80012b4:	039b      	lsls	r3, r3, #14
 80012b6:	401a      	ands	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b008      	add	sp, #32
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40021000 	.word	0x40021000
 80012d4:	00001388 	.word	0x00001388
 80012d8:	efffffff 	.word	0xefffffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	ffc2ffff 	.word	0xffc2ffff

080012e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b3      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d911      	bls.n	800132a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2201      	movs	r2, #1
 800130c:	4393      	bics	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e09a      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	d015      	beq.n	8001360 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2204      	movs	r2, #4
 800133a:	4013      	ands	r3, r2
 800133c:	d006      	beq.n	800134c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800133e:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001344:	21e0      	movs	r1, #224	; 0xe0
 8001346:	00c9      	lsls	r1, r1, #3
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	22f0      	movs	r2, #240	; 0xf0
 8001352:	4393      	bics	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	4b44      	ldr	r3, [pc, #272]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800135c:	430a      	orrs	r2, r1
 800135e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	d040      	beq.n	80013ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d114      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e06e      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d107      	bne.n	800139a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	049b      	lsls	r3, r3, #18
 8001392:	4013      	ands	r3, r2
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e062      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e05b      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a8:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013b8:	430a      	orrs	r2, r1
 80013ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fa52 	bl	8000864 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013c4:	e009      	b.n	80013da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f7ff fa4d 	bl	8000864 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_RCC_ClockConfig+0x18c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e042      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	220c      	movs	r2, #12
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1ec      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d211      	bcs.n	800141e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4393      	bics	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_RCC_ClockConfig+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e020      	b.n	8001460 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2204      	movs	r2, #4
 8001424:	4013      	ands	r3, r2
 8001426:	d009      	beq.n	800143c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_RCC_ClockConfig+0x190>)
 800142e:	4013      	ands	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800143c:	f000 f820 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 8001440:	0001      	movs	r1, r0
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_ClockConfig+0x188>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	220f      	movs	r2, #15
 800144a:	4013      	ands	r3, r2
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_RCC_ClockConfig+0x194>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	000a      	movs	r2, r1
 8001452:	40da      	lsrs	r2, r3
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_ClockConfig+0x198>)
 8001456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff f9bd 	bl	80007d8 <HAL_InitTick>
  
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40022000 	.word	0x40022000
 800146c:	40021000 	.word	0x40021000
 8001470:	00001388 	.word	0x00001388
 8001474:	fffff8ff 	.word	0xfffff8ff
 8001478:	08003408 	.word	0x08003408
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08f      	sub	sp, #60	; 0x3c
 8001484:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001486:	2314      	movs	r3, #20
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800148e:	c313      	stmia	r3!, {r0, r1, r4}
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4a29      	ldr	r2, [pc, #164]	; (800153c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800149a:	c313      	stmia	r3!, {r0, r1, r4}
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	220c      	movs	r2, #12
 80014be:	4013      	ands	r3, r2
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d002      	beq.n	80014ca <HAL_RCC_GetSysClockFreq+0x4a>
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d003      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x50>
 80014c8:	e02d      	b.n	8001526 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ce:	e02d      	b.n	800152c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	220f      	movs	r2, #15
 80014d6:	4013      	ands	r3, r2
 80014d8:	2214      	movs	r2, #20
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	220f      	movs	r2, #15
 80014e6:	4013      	ands	r3, r2
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	4013      	ands	r3, r2
 80014f6:	d009      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014fc:	f7fe fe0e 	bl	800011c <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	001a      	movs	r2, r3
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	4353      	muls	r3, r2
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
 800150a:	e009      	b.n	8001520 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800150c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150e:	000a      	movs	r2, r1
 8001510:	0152      	lsls	r2, r2, #5
 8001512:	1a52      	subs	r2, r2, r1
 8001514:	0193      	lsls	r3, r2, #6
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	185b      	adds	r3, r3, r1
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001524:	e002      	b.n	800152c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800152a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b00f      	add	sp, #60	; 0x3c
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	080033e8 	.word	0x080033e8
 800153c:	080033f8 	.word	0x080033f8
 8001540:	40021000 	.word	0x40021000
 8001544:	007a1200 	.word	0x007a1200

08001548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_RCC_GetHCLKFreq+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001560:	f7ff fff2 	bl	8001548 <HAL_RCC_GetHCLKFreq>
 8001564:	0001      	movs	r1, r0
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	40d9      	lsrs	r1, r3
 8001576:	000b      	movs	r3, r1
}    
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000
 8001584:	08003418 	.word	0x08003418

08001588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	4013      	ands	r3, r2
 80015a2:	d100      	bne.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80015a4:	e08e      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2017      	movs	r0, #23
 80015a8:	183b      	adds	r3, r7, r0
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	055b      	lsls	r3, r3, #21
 80015b6:	4013      	ands	r3, r2
 80015b8:	d110      	bne.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d11a      	bne.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e8:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0049      	lsls	r1, r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f935 	bl	8000864 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fe:	e008      	b.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001600:	f7ff f930 	bl	8000864 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e077      	b.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4013      	ands	r3, r2
 800161c:	d0f0      	beq.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4013      	ands	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d034      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	23c0      	movs	r3, #192	; 0xc0
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4013      	ands	r3, r2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d02c      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a33      	ldr	r2, [pc, #204]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0249      	lsls	r1, r1, #9
 8001654:	430a      	orrs	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800165a:	6a1a      	ldr	r2, [r3, #32]
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800165e:	492e      	ldr	r1, [pc, #184]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001660:	400a      	ands	r2, r1
 8001662:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff f8f7 	bl	8000864 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167a:	e009      	b.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff f8f2 	bl	8000864 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	4a25      	ldr	r2, [pc, #148]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e038      	b.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d0f0      	beq.n	800167c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	0019      	movs	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ae:	2317      	movs	r3, #23
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016be:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d009      	beq.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	2203      	movs	r2, #3
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2220      	movs	r2, #32
 80016e8:	4013      	ands	r3, r2
 80016ea:	d009      	beq.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	2210      	movs	r2, #16
 80016f2:	4393      	bics	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b006      	add	sp, #24
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	fffffcff 	.word	0xfffffcff
 8001718:	fffeffff 	.word	0xfffeffff
 800171c:	00001388 	.word	0x00001388
 8001720:	efffffff 	.word	0xefffffff

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e042      	b.n	80017bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	223d      	movs	r2, #61	; 0x3d
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d107      	bne.n	8001752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	223c      	movs	r2, #60	; 0x3c
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f7fe ff09 	bl	8000564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	223d      	movs	r2, #61	; 0x3d
 8001756:	2102      	movs	r1, #2
 8001758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f000 fab7 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2246      	movs	r2, #70	; 0x46
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223e      	movs	r2, #62	; 0x3e
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	223f      	movs	r2, #63	; 0x3f
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2241      	movs	r2, #65	; 0x41
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2242      	movs	r2, #66	; 0x42
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2243      	movs	r2, #67	; 0x43
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2244      	movs	r2, #68	; 0x44
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2245      	movs	r2, #69	; 0x45
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	223d      	movs	r2, #61	; 0x3d
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e042      	b.n	800185c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	223d      	movs	r2, #61	; 0x3d
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	223c      	movs	r2, #60	; 0x3c
 80017e6:	2100      	movs	r1, #0
 80017e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 f839 	bl	8001864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	223d      	movs	r2, #61	; 0x3d
 80017f6:	2102      	movs	r1, #2
 80017f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3304      	adds	r3, #4
 8001802:	0019      	movs	r1, r3
 8001804:	0010      	movs	r0, r2
 8001806:	f000 fa67 	bl	8001cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2246      	movs	r2, #70	; 0x46
 800180e:	2101      	movs	r1, #1
 8001810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	223e      	movs	r2, #62	; 0x3e
 8001816:	2101      	movs	r1, #1
 8001818:	5499      	strb	r1, [r3, r2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	223f      	movs	r2, #63	; 0x3f
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	2101      	movs	r1, #1
 8001830:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2242      	movs	r2, #66	; 0x42
 8001836:	2101      	movs	r1, #1
 8001838:	5499      	strb	r1, [r3, r2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2243      	movs	r2, #67	; 0x43
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2244      	movs	r2, #68	; 0x44
 8001846:	2101      	movs	r1, #1
 8001848:	5499      	strb	r1, [r3, r2]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2245      	movs	r2, #69	; 0x45
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	223d      	movs	r2, #61	; 0x3d
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d108      	bne.n	8001896 <HAL_TIM_PWM_Start+0x22>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	223e      	movs	r2, #62	; 0x3e
 8001888:	5c9b      	ldrb	r3, [r3, r2]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	4193      	sbcs	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	e01f      	b.n	80018d6 <HAL_TIM_PWM_Start+0x62>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d108      	bne.n	80018ae <HAL_TIM_PWM_Start+0x3a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	223f      	movs	r2, #63	; 0x3f
 80018a0:	5c9b      	ldrb	r3, [r3, r2]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	1e5a      	subs	r2, r3, #1
 80018a8:	4193      	sbcs	r3, r2
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	e013      	b.n	80018d6 <HAL_TIM_PWM_Start+0x62>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d108      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x52>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	5c9b      	ldrb	r3, [r3, r2]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	4193      	sbcs	r3, r2
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	e007      	b.n	80018d6 <HAL_TIM_PWM_Start+0x62>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	1e5a      	subs	r2, r3, #1
 80018d2:	4193      	sbcs	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06a      	b.n	80019b4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <HAL_TIM_PWM_Start+0x7a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	223e      	movs	r2, #62	; 0x3e
 80018e8:	2102      	movs	r1, #2
 80018ea:	5499      	strb	r1, [r3, r2]
 80018ec:	e013      	b.n	8001916 <HAL_TIM_PWM_Start+0xa2>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d104      	bne.n	80018fe <HAL_TIM_PWM_Start+0x8a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	223f      	movs	r2, #63	; 0x3f
 80018f8:	2102      	movs	r1, #2
 80018fa:	5499      	strb	r1, [r3, r2]
 80018fc:	e00b      	b.n	8001916 <HAL_TIM_PWM_Start+0xa2>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d104      	bne.n	800190e <HAL_TIM_PWM_Start+0x9a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	2102      	movs	r1, #2
 800190a:	5499      	strb	r1, [r3, r2]
 800190c:	e003      	b.n	8001916 <HAL_TIM_PWM_Start+0xa2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2241      	movs	r2, #65	; 0x41
 8001912:	2102      	movs	r1, #2
 8001914:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	0018      	movs	r0, r3
 8001920:	f000 fcca 	bl	80022b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <HAL_TIM_PWM_Start+0x148>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_TIM_PWM_Start+0xce>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_TIM_PWM_Start+0x14c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d004      	beq.n	8001942 <HAL_TIM_PWM_Start+0xce>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_TIM_PWM_Start+0x150>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_TIM_PWM_Start+0xd2>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_TIM_PWM_Start+0xd4>
 8001946:	2300      	movs	r3, #0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0209      	lsls	r1, r1, #8
 800195a:	430a      	orrs	r2, r1
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_TIM_PWM_Start+0x148>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00a      	beq.n	800197e <HAL_TIM_PWM_Start+0x10a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	05db      	lsls	r3, r3, #23
 8001970:	429a      	cmp	r2, r3
 8001972:	d004      	beq.n	800197e <HAL_TIM_PWM_Start+0x10a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_TIM_PWM_Start+0x154>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d111      	bne.n	80019a2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2207      	movs	r2, #7
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b06      	cmp	r3, #6
 800198e:	d010      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a0:	e007      	b.n	80019b2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40014400 	.word	0x40014400
 80019c4:	40014800 	.word	0x40014800
 80019c8:	40000400 	.word	0x40000400

080019cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	223c      	movs	r2, #60	; 0x3c
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0a7      	b.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	223c      	movs	r2, #60	; 0x3c
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d100      	bne.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80019f4:	e076      	b.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x118>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d900      	bls.n	80019fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80019fc:	e095      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x15e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d04e      	beq.n	8001aa2 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d900      	bls.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x40>
 8001a0a:	e08e      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d021      	beq.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001a18:	e087      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f9ce 	bl	8001dc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2108      	movs	r1, #8
 8001a34:	430a      	orrs	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6999      	ldr	r1, [r3, #24]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	619a      	str	r2, [r3, #24]
      break;
 8001a5a:	e067      	b.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 fa2b 	bl	8001ec0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0109      	lsls	r1, r1, #4
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	492e      	ldr	r1, [pc, #184]	; (8001b40 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6999      	ldr	r1, [r3, #24]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	619a      	str	r2, [r3, #24]
      break;
 8001aa0:	e044      	b.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fa86 	bl	8001fbc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2108      	movs	r1, #8
 8001abc:	430a      	orrs	r2, r1
 8001abe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2104      	movs	r1, #4
 8001acc:	438a      	bics	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69d9      	ldr	r1, [r3, #28]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	61da      	str	r2, [r3, #28]
      break;
 8001ae2:	e023      	b.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fae5 	bl	80020bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0109      	lsls	r1, r1, #4
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	490c      	ldr	r1, [pc, #48]	; (8001b40 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69d9      	ldr	r1, [r3, #28]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	61da      	str	r2, [r3, #28]
      break;
 8001b28:	e000      	b.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001b2a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	223c      	movs	r2, #60	; 0x3c
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	fffffbff 	.word	0xfffffbff

08001b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	223c      	movs	r2, #60	; 0x3c
 8001b52:	5c9b      	ldrb	r3, [r3, r2]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_TIM_ConfigClockSource+0x18>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e0b7      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x188>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	223c      	movs	r2, #60	; 0x3c
 8001b60:	2101      	movs	r1, #1
 8001b62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	223d      	movs	r2, #61	; 0x3d
 8001b68:	2102      	movs	r1, #2
 8001b6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2277      	movs	r2, #119	; 0x77
 8001b78:	4393      	bics	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <HAL_TIM_ConfigClockSource+0x190>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	0192      	lsls	r2, r2, #6
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d040      	beq.n	8001c1a <HAL_TIM_ConfigClockSource+0xd6>
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	0192      	lsls	r2, r2, #6
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d900      	bls.n	8001ba2 <HAL_TIM_ConfigClockSource+0x5e>
 8001ba0:	e088      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	0152      	lsls	r2, r2, #5
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d100      	bne.n	8001bac <HAL_TIM_ConfigClockSource+0x68>
 8001baa:	e085      	b.n	8001cb8 <HAL_TIM_ConfigClockSource+0x174>
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	0152      	lsls	r2, r2, #5
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d900      	bls.n	8001bb6 <HAL_TIM_ConfigClockSource+0x72>
 8001bb4:	e07e      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bb6:	2b70      	cmp	r3, #112	; 0x70
 8001bb8:	d018      	beq.n	8001bec <HAL_TIM_ConfigClockSource+0xa8>
 8001bba:	d900      	bls.n	8001bbe <HAL_TIM_ConfigClockSource+0x7a>
 8001bbc:	e07a      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bbe:	2b60      	cmp	r3, #96	; 0x60
 8001bc0:	d04f      	beq.n	8001c62 <HAL_TIM_ConfigClockSource+0x11e>
 8001bc2:	d900      	bls.n	8001bc6 <HAL_TIM_ConfigClockSource+0x82>
 8001bc4:	e076      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bc6:	2b50      	cmp	r3, #80	; 0x50
 8001bc8:	d03b      	beq.n	8001c42 <HAL_TIM_ConfigClockSource+0xfe>
 8001bca:	d900      	bls.n	8001bce <HAL_TIM_ConfigClockSource+0x8a>
 8001bcc:	e072      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d057      	beq.n	8001c82 <HAL_TIM_ConfigClockSource+0x13e>
 8001bd2:	d900      	bls.n	8001bd6 <HAL_TIM_ConfigClockSource+0x92>
 8001bd4:	e06e      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bd6:	2b30      	cmp	r3, #48	; 0x30
 8001bd8:	d063      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8001bda:	d86b      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d060      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8001be0:	d868      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d05d      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x15e>
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d05b      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bea:	e063      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f000 fb3c 	bl	8002278 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2277      	movs	r2, #119	; 0x77
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	609a      	str	r2, [r3, #8]
      break;
 8001c18:	e04f      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f000 fb25 	bl	8002278 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	01c9      	lsls	r1, r1, #7
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
      break;
 8001c40:	e03b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	001a      	movs	r2, r3
 8001c50:	f000 fa98 	bl	8002184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2150      	movs	r1, #80	; 0x50
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 faf2 	bl	8002244 <TIM_ITRx_SetConfig>
      break;
 8001c60:	e02b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	001a      	movs	r2, r3
 8001c70:	f000 fab6 	bl	80021e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2160      	movs	r1, #96	; 0x60
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fae2 	bl	8002244 <TIM_ITRx_SetConfig>
      break;
 8001c80:	e01b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	001a      	movs	r2, r3
 8001c90:	f000 fa78 	bl	8002184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fad2 	bl	8002244 <TIM_ITRx_SetConfig>
      break;
 8001ca0:	e00b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0019      	movs	r1, r3
 8001cac:	0010      	movs	r0, r2
 8001cae:	f000 fac9 	bl	8002244 <TIM_ITRx_SetConfig>
        break;
 8001cb2:	e002      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	e000      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001cb8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	223d      	movs	r2, #61	; 0x3d
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b004      	add	sp, #16
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	ffff00ff 	.word	0xffff00ff

08001cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <TIM_Base_SetConfig+0xd4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d008      	beq.n	8001d02 <TIM_Base_SetConfig+0x2a>
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x2a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <TIM_Base_SetConfig+0xd8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d108      	bne.n	8001d14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2270      	movs	r2, #112	; 0x70
 8001d06:	4393      	bics	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a25      	ldr	r2, [pc, #148]	; (8001dac <TIM_Base_SetConfig+0xd4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d014      	beq.n	8001d46 <TIM_Base_SetConfig+0x6e>
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d00f      	beq.n	8001d46 <TIM_Base_SetConfig+0x6e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <TIM_Base_SetConfig+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00b      	beq.n	8001d46 <TIM_Base_SetConfig+0x6e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <TIM_Base_SetConfig+0xdc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <TIM_Base_SetConfig+0x6e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <TIM_Base_SetConfig+0xe0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d003      	beq.n	8001d46 <TIM_Base_SetConfig+0x6e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <TIM_Base_SetConfig+0xe4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d108      	bne.n	8001d58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <TIM_Base_SetConfig+0xe8>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	4393      	bics	r3, r2
 8001d5e:	001a      	movs	r2, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <TIM_Base_SetConfig+0xd4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d007      	beq.n	8001d96 <TIM_Base_SetConfig+0xbe>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <TIM_Base_SetConfig+0xe0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d003      	beq.n	8001d96 <TIM_Base_SetConfig+0xbe>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <TIM_Base_SetConfig+0xe4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d103      	bne.n	8001d9e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	615a      	str	r2, [r3, #20]
}
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40000400 	.word	0x40000400
 8001db4:	40002000 	.word	0x40002000
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800
 8001dc0:	fffffcff 	.word	0xfffffcff

08001dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2270      	movs	r2, #112	; 0x70
 8001df2:	4393      	bics	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <TIM_OC1_SetConfig+0xe8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_OC1_SetConfig+0x6e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <TIM_OC1_SetConfig+0xec>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_OC1_SetConfig+0x6e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <TIM_OC1_SetConfig+0xf0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10c      	bne.n	8001e4c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2208      	movs	r2, #8
 8001e36:	4393      	bics	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2204      	movs	r2, #4
 8001e48:	4393      	bics	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <TIM_OC1_SetConfig+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d007      	beq.n	8001e64 <TIM_OC1_SetConfig+0xa0>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <TIM_OC1_SetConfig+0xec>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <TIM_OC1_SetConfig+0xa0>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a15      	ldr	r2, [pc, #84]	; (8001eb4 <TIM_OC1_SetConfig+0xf0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d111      	bne.n	8001e88 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <TIM_OC1_SetConfig+0xf4>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <TIM_OC1_SetConfig+0xf8>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	621a      	str	r2, [r3, #32]
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b006      	add	sp, #24
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40014400 	.word	0x40014400
 8001eb4:	40014800 	.word	0x40014800
 8001eb8:	fffffeff 	.word	0xfffffeff
 8001ebc:	fffffdff 	.word	0xfffffdff

08001ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <TIM_OC2_SetConfig+0xe0>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <TIM_OC2_SetConfig+0xe4>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <TIM_OC2_SetConfig+0xe8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10d      	bne.n	8001f3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	4393      	bics	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2240      	movs	r2, #64	; 0x40
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <TIM_OC2_SetConfig+0xe8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d007      	beq.n	8001f56 <TIM_OC2_SetConfig+0x96>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <TIM_OC2_SetConfig+0xec>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d003      	beq.n	8001f56 <TIM_OC2_SetConfig+0x96>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <TIM_OC2_SetConfig+0xf0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d113      	bne.n	8001f7e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <TIM_OC2_SetConfig+0xf4>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <TIM_OC2_SetConfig+0xf8>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	621a      	str	r2, [r3, #32]
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b006      	add	sp, #24
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	ffff8fff 	.word	0xffff8fff
 8001fa4:	fffffcff 	.word	0xfffffcff
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40014400 	.word	0x40014400
 8001fb0:	40014800 	.word	0x40014800
 8001fb4:	fffffbff 	.word	0xfffffbff
 8001fb8:	fffff7ff 	.word	0xfffff7ff

08001fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <TIM_OC3_SetConfig+0xdc>)
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2270      	movs	r2, #112	; 0x70
 8001fe8:	4393      	bics	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <TIM_OC3_SetConfig+0xe0>)
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <TIM_OC3_SetConfig+0xe4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10d      	bne.n	8002036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <TIM_OC3_SetConfig+0xe8>)
 800201e:	4013      	ands	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <TIM_OC3_SetConfig+0xec>)
 8002032:	4013      	ands	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <TIM_OC3_SetConfig+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_OC3_SetConfig+0x92>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <TIM_OC3_SetConfig+0xf0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_OC3_SetConfig+0x92>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <TIM_OC3_SetConfig+0xf4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d113      	bne.n	8002076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <TIM_OC3_SetConfig+0xf8>)
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <TIM_OC3_SetConfig+0xfc>)
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	621a      	str	r2, [r3, #32]
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b006      	add	sp, #24
 8002096:	bd80      	pop	{r7, pc}
 8002098:	fffffeff 	.word	0xfffffeff
 800209c:	fffffdff 	.word	0xfffffdff
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	fffff7ff 	.word	0xfffff7ff
 80020a8:	fffffbff 	.word	0xfffffbff
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800
 80020b4:	ffffefff 	.word	0xffffefff
 80020b8:	ffffdfff 	.word	0xffffdfff

080020bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a26      	ldr	r2, [pc, #152]	; (8002164 <TIM_OC4_SetConfig+0xa8>)
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <TIM_OC4_SetConfig+0xac>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <TIM_OC4_SetConfig+0xb0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <TIM_OC4_SetConfig+0xb4>)
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	031b      	lsls	r3, r3, #12
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <TIM_OC4_SetConfig+0xb8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_OC4_SetConfig+0x70>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a16      	ldr	r2, [pc, #88]	; (8002178 <TIM_OC4_SetConfig+0xbc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_OC4_SetConfig+0x70>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a15      	ldr	r2, [pc, #84]	; (800217c <TIM_OC4_SetConfig+0xc0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d109      	bne.n	8002140 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <TIM_OC4_SetConfig+0xc4>)
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	b006      	add	sp, #24
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	ffffefff 	.word	0xffffefff
 8002168:	ffff8fff 	.word	0xffff8fff
 800216c:	fffffcff 	.word	0xfffffcff
 8002170:	ffffdfff 	.word	0xffffdfff
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800
 8002180:	ffffbfff 	.word	0xffffbfff

08002184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	2201      	movs	r2, #1
 800219c:	4393      	bics	r3, r2
 800219e:	001a      	movs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	22f0      	movs	r2, #240	; 0xf0
 80021ae:	4393      	bics	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	220a      	movs	r2, #10
 80021c0:	4393      	bics	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	621a      	str	r2, [r3, #32]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b006      	add	sp, #24
 80021de:	bd80      	pop	{r7, pc}

080021e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	2210      	movs	r2, #16
 80021f2:	4393      	bics	r3, r2
 80021f4:	001a      	movs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <TIM_TI2_ConfigInputStage+0x60>)
 800220a:	4013      	ands	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	22a0      	movs	r2, #160	; 0xa0
 800221c:	4393      	bics	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	ffff0fff 	.word	0xffff0fff

08002244 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2270      	movs	r2, #112	; 0x70
 8002258:	4393      	bics	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	2207      	movs	r2, #7
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	609a      	str	r2, [r3, #8]
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <TIM_ETR_SetConfig+0x3c>)
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	431a      	orrs	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	609a      	str	r2, [r3, #8]
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b006      	add	sp, #24
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	ffff00ff 	.word	0xffff00ff

080022b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	221f      	movs	r2, #31
 80022c8:	4013      	ands	r3, r2
 80022ca:	2201      	movs	r2, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	43d2      	mvns	r2, r2
 80022da:	401a      	ands	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	211f      	movs	r1, #31
 80022e8:	400b      	ands	r3, r1
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4099      	lsls	r1, r3
 80022ee:	000b      	movs	r3, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b006      	add	sp, #24
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223c      	movs	r2, #60	; 0x3c
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002314:	2302      	movs	r3, #2
 8002316:	e042      	b.n	800239e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	223c      	movs	r2, #60	; 0x3c
 800231c:	2101      	movs	r1, #1
 800231e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	223d      	movs	r2, #61	; 0x3d
 8002324:	2102      	movs	r1, #2
 8002326:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2270      	movs	r2, #112	; 0x70
 800233c:	4393      	bics	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00a      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	05db      	lsls	r3, r3, #23
 8002364:	429a      	cmp	r2, r3
 8002366:	d004      	beq.n	8002372 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10c      	bne.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	4393      	bics	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4313      	orrs	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	223d      	movs	r2, #61	; 0x3d
 8002390:	2101      	movs	r1, #1
 8002392:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	223c      	movs	r2, #60	; 0x3c
 8002398:	2100      	movs	r1, #0
 800239a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400

080023b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e044      	b.n	800244c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2274      	movs	r2, #116	; 0x74
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7fe f91f 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2224      	movs	r2, #36	; 0x24
 80023de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	438a      	bics	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 f8da 	bl	80025ac <UART_SetConfig>
 80023f8:	0003      	movs	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e024      	b.n	800244c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f9f7 	bl	8002800 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	490d      	ldr	r1, [pc, #52]	; (8002454 <HAL_UART_Init+0xa4>)
 800241e:	400a      	ands	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	212a      	movs	r1, #42	; 0x2a
 800242e:	438a      	bics	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2101      	movs	r1, #1
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 fa8f 	bl	8002968 <UART_CheckIdleState>
 800244a:	0003      	movs	r3, r0
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	ffffb7ff 	.word	0xffffb7ff

08002458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	1dbb      	adds	r3, r7, #6
 8002466:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246c:	2b20      	cmp	r3, #32
 800246e:	d000      	beq.n	8002472 <HAL_UART_Transmit+0x1a>
 8002470:	e096      	b.n	80025a0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_UART_Transmit+0x28>
 8002478:	1dbb      	adds	r3, r7, #6
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e08e      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	015b      	lsls	r3, r3, #5
 800248c:	429a      	cmp	r2, r3
 800248e:	d109      	bne.n	80024a4 <HAL_UART_Transmit+0x4c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	d001      	beq.n	80024a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e07e      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2274      	movs	r2, #116	; 0x74
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_UART_Transmit+0x5a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e077      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2274      	movs	r2, #116	; 0x74
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	2100      	movs	r1, #0
 80024c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2221      	movs	r2, #33	; 0x21
 80024c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024c8:	f7fe f9cc 	bl	8000864 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1dba      	adds	r2, r7, #6
 80024d4:	2150      	movs	r1, #80	; 0x50
 80024d6:	8812      	ldrh	r2, [r2, #0]
 80024d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1dba      	adds	r2, r7, #6
 80024de:	2152      	movs	r1, #82	; 0x52
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d108      	bne.n	8002502 <HAL_UART_Transmit+0xaa>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e003      	b.n	800250a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2274      	movs	r2, #116	; 0x74
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002512:	e02d      	b.n	8002570 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	0013      	movs	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	2180      	movs	r1, #128	; 0x80
 8002522:	f000 fa69 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d001      	beq.n	800252e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e039      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	05d2      	lsls	r2, r2, #23
 800253e:	0dd2      	lsrs	r2, r2, #23
 8002540:	b292      	uxth	r2, r2
 8002542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3302      	adds	r3, #2
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e008      	b.n	800255e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b292      	uxth	r2, r2
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	3301      	adds	r3, #1
 800255c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2252      	movs	r2, #82	; 0x52
 8002562:	5a9b      	ldrh	r3, [r3, r2]
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b299      	uxth	r1, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2252      	movs	r2, #82	; 0x52
 800256e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2252      	movs	r2, #82	; 0x52
 8002574:	5a9b      	ldrh	r3, [r3, r2]
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1cb      	bne.n	8002514 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	0013      	movs	r3, r2
 8002586:	2200      	movs	r2, #0
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	f000 fa35 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e005      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b008      	add	sp, #32
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b4:	231e      	movs	r3, #30
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a84      	ldr	r2, [pc, #528]	; (80027ec <UART_SetConfig+0x240>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a7f      	ldr	r2, [pc, #508]	; (80027f0 <UART_SetConfig+0x244>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a76      	ldr	r2, [pc, #472]	; (80027f4 <UART_SetConfig+0x248>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <UART_SetConfig+0x24c>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	2203      	movs	r2, #3
 800262e:	4013      	ands	r3, r2
 8002630:	2b03      	cmp	r3, #3
 8002632:	d00d      	beq.n	8002650 <UART_SetConfig+0xa4>
 8002634:	d81b      	bhi.n	800266e <UART_SetConfig+0xc2>
 8002636:	2b02      	cmp	r3, #2
 8002638:	d014      	beq.n	8002664 <UART_SetConfig+0xb8>
 800263a:	d818      	bhi.n	800266e <UART_SetConfig+0xc2>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <UART_SetConfig+0x9a>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00a      	beq.n	800265a <UART_SetConfig+0xae>
 8002644:	e013      	b.n	800266e <UART_SetConfig+0xc2>
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e012      	b.n	8002676 <UART_SetConfig+0xca>
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e00d      	b.n	8002676 <UART_SetConfig+0xca>
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2204      	movs	r2, #4
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e008      	b.n	8002676 <UART_SetConfig+0xca>
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2208      	movs	r2, #8
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e003      	b.n	8002676 <UART_SetConfig+0xca>
 800266e:	231f      	movs	r3, #31
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2210      	movs	r2, #16
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	429a      	cmp	r2, r3
 8002682:	d15d      	bne.n	8002740 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002684:	231f      	movs	r3, #31
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d015      	beq.n	80026ba <UART_SetConfig+0x10e>
 800268e:	dc18      	bgt.n	80026c2 <UART_SetConfig+0x116>
 8002690:	2b04      	cmp	r3, #4
 8002692:	d00d      	beq.n	80026b0 <UART_SetConfig+0x104>
 8002694:	dc15      	bgt.n	80026c2 <UART_SetConfig+0x116>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <UART_SetConfig+0xf4>
 800269a:	2b02      	cmp	r3, #2
 800269c:	d005      	beq.n	80026aa <UART_SetConfig+0xfe>
 800269e:	e010      	b.n	80026c2 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026a0:	f7fe ff5c 	bl	800155c <HAL_RCC_GetPCLK1Freq>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]
        break;
 80026a8:	e012      	b.n	80026d0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026aa:	4b54      	ldr	r3, [pc, #336]	; (80027fc <UART_SetConfig+0x250>)
 80026ac:	61bb      	str	r3, [r7, #24]
        break;
 80026ae:	e00f      	b.n	80026d0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026b0:	f7fe fee6 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 80026b4:	0003      	movs	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]
        break;
 80026b8:	e00a      	b.n	80026d0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	61bb      	str	r3, [r7, #24]
        break;
 80026c0:	e006      	b.n	80026d0 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026c6:	231e      	movs	r3, #30
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
        break;
 80026ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d100      	bne.n	80026d8 <UART_SetConfig+0x12c>
 80026d6:	e07b      	b.n	80027d0 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	005a      	lsls	r2, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	18d2      	adds	r2, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0019      	movs	r1, r3
 80026ea:	0010      	movs	r0, r2
 80026ec:	f7fd fd16 	bl	800011c <__udivsi3>
 80026f0:	0003      	movs	r3, r0
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d91c      	bls.n	8002736 <UART_SetConfig+0x18a>
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	025b      	lsls	r3, r3, #9
 8002702:	429a      	cmp	r2, r3
 8002704:	d217      	bcs.n	8002736 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	b29a      	uxth	r2, r3
 800270a:	200e      	movs	r0, #14
 800270c:	183b      	adds	r3, r7, r0
 800270e:	210f      	movs	r1, #15
 8002710:	438a      	bics	r2, r1
 8002712:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	2207      	movs	r2, #7
 800271c:	4013      	ands	r3, r2
 800271e:	b299      	uxth	r1, r3
 8002720:	183b      	adds	r3, r7, r0
 8002722:	183a      	adds	r2, r7, r0
 8002724:	8812      	ldrh	r2, [r2, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	183a      	adds	r2, r7, r0
 8002730:	8812      	ldrh	r2, [r2, #0]
 8002732:	60da      	str	r2, [r3, #12]
 8002734:	e04c      	b.n	80027d0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002736:	231e      	movs	r3, #30
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e047      	b.n	80027d0 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002740:	231f      	movs	r3, #31
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d015      	beq.n	8002776 <UART_SetConfig+0x1ca>
 800274a:	dc18      	bgt.n	800277e <UART_SetConfig+0x1d2>
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00d      	beq.n	800276c <UART_SetConfig+0x1c0>
 8002750:	dc15      	bgt.n	800277e <UART_SetConfig+0x1d2>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <UART_SetConfig+0x1b0>
 8002756:	2b02      	cmp	r3, #2
 8002758:	d005      	beq.n	8002766 <UART_SetConfig+0x1ba>
 800275a:	e010      	b.n	800277e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275c:	f7fe fefe 	bl	800155c <HAL_RCC_GetPCLK1Freq>
 8002760:	0003      	movs	r3, r0
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e012      	b.n	800278c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <UART_SetConfig+0x250>)
 8002768:	61bb      	str	r3, [r7, #24]
        break;
 800276a:	e00f      	b.n	800278c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800276c:	f7fe fe88 	bl	8001480 <HAL_RCC_GetSysClockFreq>
 8002770:	0003      	movs	r3, r0
 8002772:	61bb      	str	r3, [r7, #24]
        break;
 8002774:	e00a      	b.n	800278c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	61bb      	str	r3, [r7, #24]
        break;
 800277c:	e006      	b.n	800278c <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002782:	231e      	movs	r3, #30
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
        break;
 800278a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01e      	beq.n	80027d0 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085a      	lsrs	r2, r3, #1
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	18d2      	adds	r2, r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	0019      	movs	r1, r3
 80027a2:	0010      	movs	r0, r2
 80027a4:	f7fd fcba 	bl	800011c <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d909      	bls.n	80027c8 <UART_SetConfig+0x21c>
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d204      	bcs.n	80027c8 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e003      	b.n	80027d0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80027c8:	231e      	movs	r3, #30
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80027dc:	231e      	movs	r3, #30
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b008      	add	sp, #32
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	ffff69f3 	.word	0xffff69f3
 80027f0:	ffffcfff 	.word	0xffffcfff
 80027f4:	fffff4ff 	.word	0xfffff4ff
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200

08002800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	d00b      	beq.n	800282a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a4a      	ldr	r2, [pc, #296]	; (8002944 <UART_AdvFeatureConfig+0x144>)
 800281a:	4013      	ands	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d00b      	beq.n	800284c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a43      	ldr	r2, [pc, #268]	; (8002948 <UART_AdvFeatureConfig+0x148>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2204      	movs	r2, #4
 8002852:	4013      	ands	r3, r2
 8002854:	d00b      	beq.n	800286e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <UART_AdvFeatureConfig+0x14c>)
 800285e:	4013      	ands	r3, r2
 8002860:	0019      	movs	r1, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2208      	movs	r2, #8
 8002874:	4013      	ands	r3, r2
 8002876:	d00b      	beq.n	8002890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <UART_AdvFeatureConfig+0x150>)
 8002880:	4013      	ands	r3, r2
 8002882:	0019      	movs	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d00b      	beq.n	80028b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <UART_AdvFeatureConfig+0x154>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2220      	movs	r2, #32
 80028b8:	4013      	ands	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <UART_AdvFeatureConfig+0x158>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2240      	movs	r2, #64	; 0x40
 80028da:	4013      	ands	r3, r2
 80028dc:	d01d      	beq.n	800291a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <UART_AdvFeatureConfig+0x15c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	035b      	lsls	r3, r3, #13
 80028fe:	429a      	cmp	r2, r3
 8002900:	d10b      	bne.n	800291a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <UART_AdvFeatureConfig+0x160>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	4013      	ands	r3, r2
 8002922:	d00b      	beq.n	800293c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <UART_AdvFeatureConfig+0x164>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}
 8002944:	fffdffff 	.word	0xfffdffff
 8002948:	fffeffff 	.word	0xfffeffff
 800294c:	fffbffff 	.word	0xfffbffff
 8002950:	ffff7fff 	.word	0xffff7fff
 8002954:	ffffefff 	.word	0xffffefff
 8002958:	ffffdfff 	.word	0xffffdfff
 800295c:	ffefffff 	.word	0xffefffff
 8002960:	ff9fffff 	.word	0xff9fffff
 8002964:	fff7ffff 	.word	0xfff7ffff

08002968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af02      	add	r7, sp, #8
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	2100      	movs	r1, #0
 8002976:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002978:	f7fd ff74 	bl	8000864 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2208      	movs	r2, #8
 8002988:	4013      	ands	r3, r2
 800298a:	2b08      	cmp	r3, #8
 800298c:	d10c      	bne.n	80029a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	0391      	lsls	r1, r2, #14
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <UART_CheckIdleState+0x8c>)
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	f000 f82c 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e021      	b.n	80029ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2204      	movs	r2, #4
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d10c      	bne.n	80029d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	03d1      	lsls	r1, r2, #15
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <UART_CheckIdleState+0x8c>)
 80029c0:	9200      	str	r2, [sp, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f000 f818 	bl	80029f8 <UART_WaitOnFlagUntilTimeout>
 80029c8:	1e03      	subs	r3, r0, #0
 80029ca:	d001      	beq.n	80029d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e00d      	b.n	80029ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2220      	movs	r2, #32
 80029da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2274      	movs	r2, #116	; 0x74
 80029e6:	2100      	movs	r1, #0
 80029e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	01ffffff 	.word	0x01ffffff

080029f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a08:	e05e      	b.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	d05b      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fd ff28 	bl	8000864 <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11b      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	492f      	ldr	r1, [pc, #188]	; (8002af0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002a32:	400a      	ands	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	438a      	bics	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2274      	movs	r2, #116	; 0x74
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e044      	b.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2204      	movs	r2, #4
 8002a66:	4013      	ands	r3, r2
 8002a68:	d02e      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	401a      	ands	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d124      	bne.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4917      	ldr	r1, [pc, #92]	; (8002af0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	2120      	movs	r1, #32
 8002aba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2274      	movs	r2, #116	; 0x74
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e00f      	b.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	425a      	negs	r2, r3
 8002ad8:	4153      	adcs	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	001a      	movs	r2, r3
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d091      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b004      	add	sp, #16
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	fffffe5f 	.word	0xfffffe5f

08002af4 <__errno>:
 8002af4:	4b01      	ldr	r3, [pc, #4]	; (8002afc <__errno+0x8>)
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	4770      	bx	lr
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	2000000c 	.word	0x2000000c

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	2600      	movs	r6, #0
 8002b04:	4d0c      	ldr	r5, [pc, #48]	; (8002b38 <__libc_init_array+0x38>)
 8002b06:	4c0d      	ldr	r4, [pc, #52]	; (8002b3c <__libc_init_array+0x3c>)
 8002b08:	1b64      	subs	r4, r4, r5
 8002b0a:	10a4      	asrs	r4, r4, #2
 8002b0c:	42a6      	cmp	r6, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	2600      	movs	r6, #0
 8002b12:	f000 fc47 	bl	80033a4 <_init>
 8002b16:	4d0a      	ldr	r5, [pc, #40]	; (8002b40 <__libc_init_array+0x40>)
 8002b18:	4c0a      	ldr	r4, [pc, #40]	; (8002b44 <__libc_init_array+0x44>)
 8002b1a:	1b64      	subs	r4, r4, r5
 8002b1c:	10a4      	asrs	r4, r4, #2
 8002b1e:	42a6      	cmp	r6, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	00b3      	lsls	r3, r6, #2
 8002b26:	58eb      	ldr	r3, [r5, r3]
 8002b28:	4798      	blx	r3
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	00b3      	lsls	r3, r6, #2
 8002b30:	58eb      	ldr	r3, [r5, r3]
 8002b32:	4798      	blx	r3
 8002b34:	3601      	adds	r6, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08003454 	.word	0x08003454
 8002b3c:	08003454 	.word	0x08003454
 8002b40:	08003454 	.word	0x08003454
 8002b44:	08003458 	.word	0x08003458

08002b48 <memset>:
 8002b48:	0003      	movs	r3, r0
 8002b4a:	1882      	adds	r2, r0, r2
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	7019      	strb	r1, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <siprintf>:
 8002b58:	b40e      	push	{r1, r2, r3}
 8002b5a:	b500      	push	{lr}
 8002b5c:	490b      	ldr	r1, [pc, #44]	; (8002b8c <siprintf+0x34>)
 8002b5e:	b09c      	sub	sp, #112	; 0x70
 8002b60:	ab1d      	add	r3, sp, #116	; 0x74
 8002b62:	9002      	str	r0, [sp, #8]
 8002b64:	9006      	str	r0, [sp, #24]
 8002b66:	9107      	str	r1, [sp, #28]
 8002b68:	9104      	str	r1, [sp, #16]
 8002b6a:	4809      	ldr	r0, [pc, #36]	; (8002b90 <siprintf+0x38>)
 8002b6c:	4909      	ldr	r1, [pc, #36]	; (8002b94 <siprintf+0x3c>)
 8002b6e:	cb04      	ldmia	r3!, {r2}
 8002b70:	9105      	str	r1, [sp, #20]
 8002b72:	6800      	ldr	r0, [r0, #0]
 8002b74:	a902      	add	r1, sp, #8
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	f000 f870 	bl	8002c5c <_svfiprintf_r>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9a02      	ldr	r2, [sp, #8]
 8002b80:	7013      	strb	r3, [r2, #0]
 8002b82:	b01c      	add	sp, #112	; 0x70
 8002b84:	bc08      	pop	{r3}
 8002b86:	b003      	add	sp, #12
 8002b88:	4718      	bx	r3
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	7fffffff 	.word	0x7fffffff
 8002b90:	2000000c 	.word	0x2000000c
 8002b94:	ffff0208 	.word	0xffff0208

08002b98 <__ssputs_r>:
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	688e      	ldr	r6, [r1, #8]
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	0007      	movs	r7, r0
 8002ba0:	000c      	movs	r4, r1
 8002ba2:	9203      	str	r2, [sp, #12]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	429e      	cmp	r6, r3
 8002ba8:	d83c      	bhi.n	8002c24 <__ssputs_r+0x8c>
 8002baa:	2390      	movs	r3, #144	; 0x90
 8002bac:	898a      	ldrh	r2, [r1, #12]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	421a      	tst	r2, r3
 8002bb2:	d034      	beq.n	8002c1e <__ssputs_r+0x86>
 8002bb4:	2503      	movs	r5, #3
 8002bb6:	6909      	ldr	r1, [r1, #16]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	1a5b      	subs	r3, r3, r1
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	6963      	ldr	r3, [r4, #20]
 8002bc0:	9802      	ldr	r0, [sp, #8]
 8002bc2:	435d      	muls	r5, r3
 8002bc4:	0feb      	lsrs	r3, r5, #31
 8002bc6:	195d      	adds	r5, r3, r5
 8002bc8:	9b01      	ldr	r3, [sp, #4]
 8002bca:	106d      	asrs	r5, r5, #1
 8002bcc:	3301      	adds	r3, #1
 8002bce:	181b      	adds	r3, r3, r0
 8002bd0:	42ab      	cmp	r3, r5
 8002bd2:	d900      	bls.n	8002bd6 <__ssputs_r+0x3e>
 8002bd4:	001d      	movs	r5, r3
 8002bd6:	0553      	lsls	r3, r2, #21
 8002bd8:	d532      	bpl.n	8002c40 <__ssputs_r+0xa8>
 8002bda:	0029      	movs	r1, r5
 8002bdc:	0038      	movs	r0, r7
 8002bde:	f000 fb31 	bl	8003244 <_malloc_r>
 8002be2:	1e06      	subs	r6, r0, #0
 8002be4:	d109      	bne.n	8002bfa <__ssputs_r+0x62>
 8002be6:	230c      	movs	r3, #12
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	2340      	movs	r3, #64	; 0x40
 8002bec:	2001      	movs	r0, #1
 8002bee:	89a2      	ldrh	r2, [r4, #12]
 8002bf0:	4240      	negs	r0, r0
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	81a3      	strh	r3, [r4, #12]
 8002bf6:	b005      	add	sp, #20
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bfa:	9a02      	ldr	r2, [sp, #8]
 8002bfc:	6921      	ldr	r1, [r4, #16]
 8002bfe:	f000 faba 	bl	8003176 <memcpy>
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <__ssputs_r+0xc0>)
 8002c06:	401a      	ands	r2, r3
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	9b02      	ldr	r3, [sp, #8]
 8002c10:	6126      	str	r6, [r4, #16]
 8002c12:	18f6      	adds	r6, r6, r3
 8002c14:	6026      	str	r6, [r4, #0]
 8002c16:	6165      	str	r5, [r4, #20]
 8002c18:	9e01      	ldr	r6, [sp, #4]
 8002c1a:	1aed      	subs	r5, r5, r3
 8002c1c:	60a5      	str	r5, [r4, #8]
 8002c1e:	9b01      	ldr	r3, [sp, #4]
 8002c20:	429e      	cmp	r6, r3
 8002c22:	d900      	bls.n	8002c26 <__ssputs_r+0x8e>
 8002c24:	9e01      	ldr	r6, [sp, #4]
 8002c26:	0032      	movs	r2, r6
 8002c28:	9903      	ldr	r1, [sp, #12]
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	f000 faac 	bl	8003188 <memmove>
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	2000      	movs	r0, #0
 8002c34:	1b9b      	subs	r3, r3, r6
 8002c36:	60a3      	str	r3, [r4, #8]
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	199e      	adds	r6, r3, r6
 8002c3c:	6026      	str	r6, [r4, #0]
 8002c3e:	e7da      	b.n	8002bf6 <__ssputs_r+0x5e>
 8002c40:	002a      	movs	r2, r5
 8002c42:	0038      	movs	r0, r7
 8002c44:	f000 fb5c 	bl	8003300 <_realloc_r>
 8002c48:	1e06      	subs	r6, r0, #0
 8002c4a:	d1e0      	bne.n	8002c0e <__ssputs_r+0x76>
 8002c4c:	0038      	movs	r0, r7
 8002c4e:	6921      	ldr	r1, [r4, #16]
 8002c50:	f000 faae 	bl	80031b0 <_free_r>
 8002c54:	e7c7      	b.n	8002be6 <__ssputs_r+0x4e>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	fffffb7f 	.word	0xfffffb7f

08002c5c <_svfiprintf_r>:
 8002c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5e:	b0a1      	sub	sp, #132	; 0x84
 8002c60:	9003      	str	r0, [sp, #12]
 8002c62:	001d      	movs	r5, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	000f      	movs	r7, r1
 8002c68:	0016      	movs	r6, r2
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	d511      	bpl.n	8002c92 <_svfiprintf_r+0x36>
 8002c6e:	690b      	ldr	r3, [r1, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10e      	bne.n	8002c92 <_svfiprintf_r+0x36>
 8002c74:	2140      	movs	r1, #64	; 0x40
 8002c76:	f000 fae5 	bl	8003244 <_malloc_r>
 8002c7a:	6038      	str	r0, [r7, #0]
 8002c7c:	6138      	str	r0, [r7, #16]
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d105      	bne.n	8002c8e <_svfiprintf_r+0x32>
 8002c82:	230c      	movs	r3, #12
 8002c84:	9a03      	ldr	r2, [sp, #12]
 8002c86:	3801      	subs	r0, #1
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	b021      	add	sp, #132	; 0x84
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8e:	2340      	movs	r3, #64	; 0x40
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	ac08      	add	r4, sp, #32
 8002c96:	6163      	str	r3, [r4, #20]
 8002c98:	3320      	adds	r3, #32
 8002c9a:	7663      	strb	r3, [r4, #25]
 8002c9c:	3310      	adds	r3, #16
 8002c9e:	76a3      	strb	r3, [r4, #26]
 8002ca0:	9507      	str	r5, [sp, #28]
 8002ca2:	0035      	movs	r5, r6
 8002ca4:	782b      	ldrb	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_svfiprintf_r+0x52>
 8002caa:	2b25      	cmp	r3, #37	; 0x25
 8002cac:	d147      	bne.n	8002d3e <_svfiprintf_r+0xe2>
 8002cae:	1bab      	subs	r3, r5, r6
 8002cb0:	9305      	str	r3, [sp, #20]
 8002cb2:	42b5      	cmp	r5, r6
 8002cb4:	d00c      	beq.n	8002cd0 <_svfiprintf_r+0x74>
 8002cb6:	0032      	movs	r2, r6
 8002cb8:	0039      	movs	r1, r7
 8002cba:	9803      	ldr	r0, [sp, #12]
 8002cbc:	f7ff ff6c 	bl	8002b98 <__ssputs_r>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d100      	bne.n	8002cc6 <_svfiprintf_r+0x6a>
 8002cc4:	e0ae      	b.n	8002e24 <_svfiprintf_r+0x1c8>
 8002cc6:	6962      	ldr	r2, [r4, #20]
 8002cc8:	9b05      	ldr	r3, [sp, #20]
 8002cca:	4694      	mov	ip, r2
 8002ccc:	4463      	add	r3, ip
 8002cce:	6163      	str	r3, [r4, #20]
 8002cd0:	782b      	ldrb	r3, [r5, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d100      	bne.n	8002cd8 <_svfiprintf_r+0x7c>
 8002cd6:	e0a5      	b.n	8002e24 <_svfiprintf_r+0x1c8>
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2300      	movs	r3, #0
 8002cdc:	4252      	negs	r2, r2
 8002cde:	6062      	str	r2, [r4, #4]
 8002ce0:	a904      	add	r1, sp, #16
 8002ce2:	3254      	adds	r2, #84	; 0x54
 8002ce4:	1852      	adds	r2, r2, r1
 8002ce6:	1c6e      	adds	r6, r5, #1
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	60e3      	str	r3, [r4, #12]
 8002cec:	60a3      	str	r3, [r4, #8]
 8002cee:	7013      	strb	r3, [r2, #0]
 8002cf0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	7831      	ldrb	r1, [r6, #0]
 8002cf6:	4854      	ldr	r0, [pc, #336]	; (8002e48 <_svfiprintf_r+0x1ec>)
 8002cf8:	f000 fa32 	bl	8003160 <memchr>
 8002cfc:	1c75      	adds	r5, r6, #1
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d11f      	bne.n	8002d42 <_svfiprintf_r+0xe6>
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	06d3      	lsls	r3, r2, #27
 8002d06:	d504      	bpl.n	8002d12 <_svfiprintf_r+0xb6>
 8002d08:	2353      	movs	r3, #83	; 0x53
 8002d0a:	a904      	add	r1, sp, #16
 8002d0c:	185b      	adds	r3, r3, r1
 8002d0e:	2120      	movs	r1, #32
 8002d10:	7019      	strb	r1, [r3, #0]
 8002d12:	0713      	lsls	r3, r2, #28
 8002d14:	d504      	bpl.n	8002d20 <_svfiprintf_r+0xc4>
 8002d16:	2353      	movs	r3, #83	; 0x53
 8002d18:	a904      	add	r1, sp, #16
 8002d1a:	185b      	adds	r3, r3, r1
 8002d1c:	212b      	movs	r1, #43	; 0x2b
 8002d1e:	7019      	strb	r1, [r3, #0]
 8002d20:	7833      	ldrb	r3, [r6, #0]
 8002d22:	2b2a      	cmp	r3, #42	; 0x2a
 8002d24:	d016      	beq.n	8002d54 <_svfiprintf_r+0xf8>
 8002d26:	0035      	movs	r5, r6
 8002d28:	2100      	movs	r1, #0
 8002d2a:	200a      	movs	r0, #10
 8002d2c:	68e3      	ldr	r3, [r4, #12]
 8002d2e:	782a      	ldrb	r2, [r5, #0]
 8002d30:	1c6e      	adds	r6, r5, #1
 8002d32:	3a30      	subs	r2, #48	; 0x30
 8002d34:	2a09      	cmp	r2, #9
 8002d36:	d94e      	bls.n	8002dd6 <_svfiprintf_r+0x17a>
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d111      	bne.n	8002d60 <_svfiprintf_r+0x104>
 8002d3c:	e017      	b.n	8002d6e <_svfiprintf_r+0x112>
 8002d3e:	3501      	adds	r5, #1
 8002d40:	e7b0      	b.n	8002ca4 <_svfiprintf_r+0x48>
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <_svfiprintf_r+0x1ec>)
 8002d44:	6822      	ldr	r2, [r4, #0]
 8002d46:	1ac0      	subs	r0, r0, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	4083      	lsls	r3, r0
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	002e      	movs	r6, r5
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	e7ce      	b.n	8002cf2 <_svfiprintf_r+0x96>
 8002d54:	9b07      	ldr	r3, [sp, #28]
 8002d56:	1d19      	adds	r1, r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	9107      	str	r1, [sp, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db01      	blt.n	8002d64 <_svfiprintf_r+0x108>
 8002d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d62:	e004      	b.n	8002d6e <_svfiprintf_r+0x112>
 8002d64:	425b      	negs	r3, r3
 8002d66:	60e3      	str	r3, [r4, #12]
 8002d68:	2302      	movs	r3, #2
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	782b      	ldrb	r3, [r5, #0]
 8002d70:	2b2e      	cmp	r3, #46	; 0x2e
 8002d72:	d10a      	bne.n	8002d8a <_svfiprintf_r+0x12e>
 8002d74:	786b      	ldrb	r3, [r5, #1]
 8002d76:	2b2a      	cmp	r3, #42	; 0x2a
 8002d78:	d135      	bne.n	8002de6 <_svfiprintf_r+0x18a>
 8002d7a:	9b07      	ldr	r3, [sp, #28]
 8002d7c:	3502      	adds	r5, #2
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	9207      	str	r2, [sp, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db2b      	blt.n	8002de0 <_svfiprintf_r+0x184>
 8002d88:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8a:	4e30      	ldr	r6, [pc, #192]	; (8002e4c <_svfiprintf_r+0x1f0>)
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	0030      	movs	r0, r6
 8002d90:	7829      	ldrb	r1, [r5, #0]
 8002d92:	f000 f9e5 	bl	8003160 <memchr>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d006      	beq.n	8002da8 <_svfiprintf_r+0x14c>
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	1b80      	subs	r0, r0, r6
 8002d9e:	4083      	lsls	r3, r0
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	3501      	adds	r5, #1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	7829      	ldrb	r1, [r5, #0]
 8002daa:	2206      	movs	r2, #6
 8002dac:	4828      	ldr	r0, [pc, #160]	; (8002e50 <_svfiprintf_r+0x1f4>)
 8002dae:	1c6e      	adds	r6, r5, #1
 8002db0:	7621      	strb	r1, [r4, #24]
 8002db2:	f000 f9d5 	bl	8003160 <memchr>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d03c      	beq.n	8002e34 <_svfiprintf_r+0x1d8>
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <_svfiprintf_r+0x1f8>)
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d125      	bne.n	8002e0c <_svfiprintf_r+0x1b0>
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	9b07      	ldr	r3, [sp, #28]
 8002dc4:	3307      	adds	r3, #7
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	3308      	adds	r3, #8
 8002dca:	9307      	str	r3, [sp, #28]
 8002dcc:	6963      	ldr	r3, [r4, #20]
 8002dce:	9a04      	ldr	r2, [sp, #16]
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	6163      	str	r3, [r4, #20]
 8002dd4:	e765      	b.n	8002ca2 <_svfiprintf_r+0x46>
 8002dd6:	4343      	muls	r3, r0
 8002dd8:	0035      	movs	r5, r6
 8002dda:	2101      	movs	r1, #1
 8002ddc:	189b      	adds	r3, r3, r2
 8002dde:	e7a6      	b.n	8002d2e <_svfiprintf_r+0xd2>
 8002de0:	2301      	movs	r3, #1
 8002de2:	425b      	negs	r3, r3
 8002de4:	e7d0      	b.n	8002d88 <_svfiprintf_r+0x12c>
 8002de6:	2300      	movs	r3, #0
 8002de8:	200a      	movs	r0, #10
 8002dea:	001a      	movs	r2, r3
 8002dec:	3501      	adds	r5, #1
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	7829      	ldrb	r1, [r5, #0]
 8002df2:	1c6e      	adds	r6, r5, #1
 8002df4:	3930      	subs	r1, #48	; 0x30
 8002df6:	2909      	cmp	r1, #9
 8002df8:	d903      	bls.n	8002e02 <_svfiprintf_r+0x1a6>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0c5      	beq.n	8002d8a <_svfiprintf_r+0x12e>
 8002dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8002e00:	e7c3      	b.n	8002d8a <_svfiprintf_r+0x12e>
 8002e02:	4342      	muls	r2, r0
 8002e04:	0035      	movs	r5, r6
 8002e06:	2301      	movs	r3, #1
 8002e08:	1852      	adds	r2, r2, r1
 8002e0a:	e7f1      	b.n	8002df0 <_svfiprintf_r+0x194>
 8002e0c:	ab07      	add	r3, sp, #28
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	003a      	movs	r2, r7
 8002e12:	0021      	movs	r1, r4
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <_svfiprintf_r+0x1fc>)
 8002e16:	9803      	ldr	r0, [sp, #12]
 8002e18:	e000      	b.n	8002e1c <_svfiprintf_r+0x1c0>
 8002e1a:	bf00      	nop
 8002e1c:	9004      	str	r0, [sp, #16]
 8002e1e:	9b04      	ldr	r3, [sp, #16]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d1d3      	bne.n	8002dcc <_svfiprintf_r+0x170>
 8002e24:	89bb      	ldrh	r3, [r7, #12]
 8002e26:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002e28:	065b      	lsls	r3, r3, #25
 8002e2a:	d400      	bmi.n	8002e2e <_svfiprintf_r+0x1d2>
 8002e2c:	e72d      	b.n	8002c8a <_svfiprintf_r+0x2e>
 8002e2e:	2001      	movs	r0, #1
 8002e30:	4240      	negs	r0, r0
 8002e32:	e72a      	b.n	8002c8a <_svfiprintf_r+0x2e>
 8002e34:	ab07      	add	r3, sp, #28
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	003a      	movs	r2, r7
 8002e3a:	0021      	movs	r1, r4
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <_svfiprintf_r+0x1fc>)
 8002e3e:	9803      	ldr	r0, [sp, #12]
 8002e40:	f000 f87c 	bl	8002f3c <_printf_i>
 8002e44:	e7ea      	b.n	8002e1c <_svfiprintf_r+0x1c0>
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	08003420 	.word	0x08003420
 8002e4c:	08003426 	.word	0x08003426
 8002e50:	0800342a 	.word	0x0800342a
 8002e54:	00000000 	.word	0x00000000
 8002e58:	08002b99 	.word	0x08002b99

08002e5c <_printf_common>:
 8002e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e5e:	0015      	movs	r5, r2
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	688a      	ldr	r2, [r1, #8]
 8002e64:	690b      	ldr	r3, [r1, #16]
 8002e66:	000c      	movs	r4, r1
 8002e68:	9000      	str	r0, [sp, #0]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	da00      	bge.n	8002e70 <_printf_common+0x14>
 8002e6e:	0013      	movs	r3, r2
 8002e70:	0022      	movs	r2, r4
 8002e72:	602b      	str	r3, [r5, #0]
 8002e74:	3243      	adds	r2, #67	; 0x43
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d001      	beq.n	8002e80 <_printf_common+0x24>
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	d502      	bpl.n	8002e8c <_printf_common+0x30>
 8002e86:	682b      	ldr	r3, [r5, #0]
 8002e88:	3302      	adds	r3, #2
 8002e8a:	602b      	str	r3, [r5, #0]
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	2306      	movs	r3, #6
 8002e90:	0017      	movs	r7, r2
 8002e92:	401f      	ands	r7, r3
 8002e94:	421a      	tst	r2, r3
 8002e96:	d027      	beq.n	8002ee8 <_printf_common+0x8c>
 8002e98:	0023      	movs	r3, r4
 8002e9a:	3343      	adds	r3, #67	; 0x43
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	4193      	sbcs	r3, r2
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d430      	bmi.n	8002f0a <_printf_common+0xae>
 8002ea8:	0022      	movs	r2, r4
 8002eaa:	9901      	ldr	r1, [sp, #4]
 8002eac:	9800      	ldr	r0, [sp, #0]
 8002eae:	9e08      	ldr	r6, [sp, #32]
 8002eb0:	3243      	adds	r2, #67	; 0x43
 8002eb2:	47b0      	blx	r6
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d025      	beq.n	8002f04 <_printf_common+0xa8>
 8002eb8:	2306      	movs	r3, #6
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	682a      	ldr	r2, [r5, #0]
 8002ebe:	68e1      	ldr	r1, [r4, #12]
 8002ec0:	2500      	movs	r5, #0
 8002ec2:	4003      	ands	r3, r0
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d103      	bne.n	8002ed0 <_printf_common+0x74>
 8002ec8:	1a8d      	subs	r5, r1, r2
 8002eca:	43eb      	mvns	r3, r5
 8002ecc:	17db      	asrs	r3, r3, #31
 8002ece:	401d      	ands	r5, r3
 8002ed0:	68a3      	ldr	r3, [r4, #8]
 8002ed2:	6922      	ldr	r2, [r4, #16]
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	dd01      	ble.n	8002edc <_printf_common+0x80>
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	18ed      	adds	r5, r5, r3
 8002edc:	2700      	movs	r7, #0
 8002ede:	42bd      	cmp	r5, r7
 8002ee0:	d120      	bne.n	8002f24 <_printf_common+0xc8>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e010      	b.n	8002f08 <_printf_common+0xac>
 8002ee6:	3701      	adds	r7, #1
 8002ee8:	68e3      	ldr	r3, [r4, #12]
 8002eea:	682a      	ldr	r2, [r5, #0]
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	42bb      	cmp	r3, r7
 8002ef0:	ddd2      	ble.n	8002e98 <_printf_common+0x3c>
 8002ef2:	0022      	movs	r2, r4
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9901      	ldr	r1, [sp, #4]
 8002ef8:	9800      	ldr	r0, [sp, #0]
 8002efa:	9e08      	ldr	r6, [sp, #32]
 8002efc:	3219      	adds	r2, #25
 8002efe:	47b0      	blx	r6
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d1f0      	bne.n	8002ee6 <_printf_common+0x8a>
 8002f04:	2001      	movs	r0, #1
 8002f06:	4240      	negs	r0, r0
 8002f08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f0a:	2030      	movs	r0, #48	; 0x30
 8002f0c:	18e1      	adds	r1, r4, r3
 8002f0e:	3143      	adds	r1, #67	; 0x43
 8002f10:	7008      	strb	r0, [r1, #0]
 8002f12:	0021      	movs	r1, r4
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	3145      	adds	r1, #69	; 0x45
 8002f18:	7809      	ldrb	r1, [r1, #0]
 8002f1a:	18a2      	adds	r2, r4, r2
 8002f1c:	3243      	adds	r2, #67	; 0x43
 8002f1e:	3302      	adds	r3, #2
 8002f20:	7011      	strb	r1, [r2, #0]
 8002f22:	e7c1      	b.n	8002ea8 <_printf_common+0x4c>
 8002f24:	0022      	movs	r2, r4
 8002f26:	2301      	movs	r3, #1
 8002f28:	9901      	ldr	r1, [sp, #4]
 8002f2a:	9800      	ldr	r0, [sp, #0]
 8002f2c:	9e08      	ldr	r6, [sp, #32]
 8002f2e:	321a      	adds	r2, #26
 8002f30:	47b0      	blx	r6
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	d0e6      	beq.n	8002f04 <_printf_common+0xa8>
 8002f36:	3701      	adds	r7, #1
 8002f38:	e7d1      	b.n	8002ede <_printf_common+0x82>
	...

08002f3c <_printf_i>:
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b08b      	sub	sp, #44	; 0x2c
 8002f40:	9206      	str	r2, [sp, #24]
 8002f42:	000a      	movs	r2, r1
 8002f44:	3243      	adds	r2, #67	; 0x43
 8002f46:	9307      	str	r3, [sp, #28]
 8002f48:	9005      	str	r0, [sp, #20]
 8002f4a:	9204      	str	r2, [sp, #16]
 8002f4c:	7e0a      	ldrb	r2, [r1, #24]
 8002f4e:	000c      	movs	r4, r1
 8002f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f52:	2a78      	cmp	r2, #120	; 0x78
 8002f54:	d806      	bhi.n	8002f64 <_printf_i+0x28>
 8002f56:	2a62      	cmp	r2, #98	; 0x62
 8002f58:	d808      	bhi.n	8002f6c <_printf_i+0x30>
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d100      	bne.n	8002f60 <_printf_i+0x24>
 8002f5e:	e0c0      	b.n	80030e2 <_printf_i+0x1a6>
 8002f60:	2a58      	cmp	r2, #88	; 0x58
 8002f62:	d052      	beq.n	800300a <_printf_i+0xce>
 8002f64:	0026      	movs	r6, r4
 8002f66:	3642      	adds	r6, #66	; 0x42
 8002f68:	7032      	strb	r2, [r6, #0]
 8002f6a:	e022      	b.n	8002fb2 <_printf_i+0x76>
 8002f6c:	0010      	movs	r0, r2
 8002f6e:	3863      	subs	r0, #99	; 0x63
 8002f70:	2815      	cmp	r0, #21
 8002f72:	d8f7      	bhi.n	8002f64 <_printf_i+0x28>
 8002f74:	f7fd f8c8 	bl	8000108 <__gnu_thumb1_case_shi>
 8002f78:	001f0016 	.word	0x001f0016
 8002f7c:	fff6fff6 	.word	0xfff6fff6
 8002f80:	fff6fff6 	.word	0xfff6fff6
 8002f84:	fff6001f 	.word	0xfff6001f
 8002f88:	fff6fff6 	.word	0xfff6fff6
 8002f8c:	00a8fff6 	.word	0x00a8fff6
 8002f90:	009a0036 	.word	0x009a0036
 8002f94:	fff6fff6 	.word	0xfff6fff6
 8002f98:	fff600b9 	.word	0xfff600b9
 8002f9c:	fff60036 	.word	0xfff60036
 8002fa0:	009efff6 	.word	0x009efff6
 8002fa4:	0026      	movs	r6, r4
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	3642      	adds	r6, #66	; 0x42
 8002faa:	1d11      	adds	r1, r2, #4
 8002fac:	6019      	str	r1, [r3, #0]
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	7033      	strb	r3, [r6, #0]
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0a7      	b.n	8003106 <_printf_i+0x1ca>
 8002fb6:	6808      	ldr	r0, [r1, #0]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	1d0a      	adds	r2, r1, #4
 8002fbc:	0605      	lsls	r5, r0, #24
 8002fbe:	d50b      	bpl.n	8002fd8 <_printf_i+0x9c>
 8002fc0:	680d      	ldr	r5, [r1, #0]
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	2d00      	cmp	r5, #0
 8002fc6:	da03      	bge.n	8002fd0 <_printf_i+0x94>
 8002fc8:	232d      	movs	r3, #45	; 0x2d
 8002fca:	9a04      	ldr	r2, [sp, #16]
 8002fcc:	426d      	negs	r5, r5
 8002fce:	7013      	strb	r3, [r2, #0]
 8002fd0:	4b61      	ldr	r3, [pc, #388]	; (8003158 <_printf_i+0x21c>)
 8002fd2:	270a      	movs	r7, #10
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	e032      	b.n	800303e <_printf_i+0x102>
 8002fd8:	680d      	ldr	r5, [r1, #0]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	0641      	lsls	r1, r0, #25
 8002fde:	d5f1      	bpl.n	8002fc4 <_printf_i+0x88>
 8002fe0:	b22d      	sxth	r5, r5
 8002fe2:	e7ef      	b.n	8002fc4 <_printf_i+0x88>
 8002fe4:	680d      	ldr	r5, [r1, #0]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	1d08      	adds	r0, r1, #4
 8002fea:	6018      	str	r0, [r3, #0]
 8002fec:	062e      	lsls	r6, r5, #24
 8002fee:	d501      	bpl.n	8002ff4 <_printf_i+0xb8>
 8002ff0:	680d      	ldr	r5, [r1, #0]
 8002ff2:	e003      	b.n	8002ffc <_printf_i+0xc0>
 8002ff4:	066d      	lsls	r5, r5, #25
 8002ff6:	d5fb      	bpl.n	8002ff0 <_printf_i+0xb4>
 8002ff8:	680d      	ldr	r5, [r1, #0]
 8002ffa:	b2ad      	uxth	r5, r5
 8002ffc:	4b56      	ldr	r3, [pc, #344]	; (8003158 <_printf_i+0x21c>)
 8002ffe:	270a      	movs	r7, #10
 8003000:	9303      	str	r3, [sp, #12]
 8003002:	2a6f      	cmp	r2, #111	; 0x6f
 8003004:	d117      	bne.n	8003036 <_printf_i+0xfa>
 8003006:	2708      	movs	r7, #8
 8003008:	e015      	b.n	8003036 <_printf_i+0xfa>
 800300a:	3145      	adds	r1, #69	; 0x45
 800300c:	700a      	strb	r2, [r1, #0]
 800300e:	4a52      	ldr	r2, [pc, #328]	; (8003158 <_printf_i+0x21c>)
 8003010:	9203      	str	r2, [sp, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	6821      	ldr	r1, [r4, #0]
 8003016:	ca20      	ldmia	r2!, {r5}
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	0608      	lsls	r0, r1, #24
 800301c:	d550      	bpl.n	80030c0 <_printf_i+0x184>
 800301e:	07cb      	lsls	r3, r1, #31
 8003020:	d502      	bpl.n	8003028 <_printf_i+0xec>
 8003022:	2320      	movs	r3, #32
 8003024:	4319      	orrs	r1, r3
 8003026:	6021      	str	r1, [r4, #0]
 8003028:	2710      	movs	r7, #16
 800302a:	2d00      	cmp	r5, #0
 800302c:	d103      	bne.n	8003036 <_printf_i+0xfa>
 800302e:	2320      	movs	r3, #32
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	439a      	bics	r2, r3
 8003034:	6022      	str	r2, [r4, #0]
 8003036:	0023      	movs	r3, r4
 8003038:	2200      	movs	r2, #0
 800303a:	3343      	adds	r3, #67	; 0x43
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	60a3      	str	r3, [r4, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db03      	blt.n	800304e <_printf_i+0x112>
 8003046:	2204      	movs	r2, #4
 8003048:	6821      	ldr	r1, [r4, #0]
 800304a:	4391      	bics	r1, r2
 800304c:	6021      	str	r1, [r4, #0]
 800304e:	2d00      	cmp	r5, #0
 8003050:	d102      	bne.n	8003058 <_printf_i+0x11c>
 8003052:	9e04      	ldr	r6, [sp, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00c      	beq.n	8003072 <_printf_i+0x136>
 8003058:	9e04      	ldr	r6, [sp, #16]
 800305a:	0028      	movs	r0, r5
 800305c:	0039      	movs	r1, r7
 800305e:	f7fd f8e3 	bl	8000228 <__aeabi_uidivmod>
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	3e01      	subs	r6, #1
 8003066:	5c5b      	ldrb	r3, [r3, r1]
 8003068:	7033      	strb	r3, [r6, #0]
 800306a:	002b      	movs	r3, r5
 800306c:	0005      	movs	r5, r0
 800306e:	429f      	cmp	r7, r3
 8003070:	d9f3      	bls.n	800305a <_printf_i+0x11e>
 8003072:	2f08      	cmp	r7, #8
 8003074:	d109      	bne.n	800308a <_printf_i+0x14e>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	07db      	lsls	r3, r3, #31
 800307a:	d506      	bpl.n	800308a <_printf_i+0x14e>
 800307c:	6863      	ldr	r3, [r4, #4]
 800307e:	6922      	ldr	r2, [r4, #16]
 8003080:	4293      	cmp	r3, r2
 8003082:	dc02      	bgt.n	800308a <_printf_i+0x14e>
 8003084:	2330      	movs	r3, #48	; 0x30
 8003086:	3e01      	subs	r6, #1
 8003088:	7033      	strb	r3, [r6, #0]
 800308a:	9b04      	ldr	r3, [sp, #16]
 800308c:	1b9b      	subs	r3, r3, r6
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	9b07      	ldr	r3, [sp, #28]
 8003092:	0021      	movs	r1, r4
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	9805      	ldr	r0, [sp, #20]
 8003098:	9b06      	ldr	r3, [sp, #24]
 800309a:	aa09      	add	r2, sp, #36	; 0x24
 800309c:	f7ff fede 	bl	8002e5c <_printf_common>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d135      	bne.n	8003110 <_printf_i+0x1d4>
 80030a4:	2001      	movs	r0, #1
 80030a6:	4240      	negs	r0, r0
 80030a8:	b00b      	add	sp, #44	; 0x2c
 80030aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ac:	2220      	movs	r2, #32
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	6022      	str	r2, [r4, #0]
 80030b4:	0022      	movs	r2, r4
 80030b6:	2178      	movs	r1, #120	; 0x78
 80030b8:	3245      	adds	r2, #69	; 0x45
 80030ba:	7011      	strb	r1, [r2, #0]
 80030bc:	4a27      	ldr	r2, [pc, #156]	; (800315c <_printf_i+0x220>)
 80030be:	e7a7      	b.n	8003010 <_printf_i+0xd4>
 80030c0:	0648      	lsls	r0, r1, #25
 80030c2:	d5ac      	bpl.n	800301e <_printf_i+0xe2>
 80030c4:	b2ad      	uxth	r5, r5
 80030c6:	e7aa      	b.n	800301e <_printf_i+0xe2>
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	680d      	ldr	r5, [r1, #0]
 80030cc:	1d10      	adds	r0, r2, #4
 80030ce:	6949      	ldr	r1, [r1, #20]
 80030d0:	6018      	str	r0, [r3, #0]
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	062e      	lsls	r6, r5, #24
 80030d6:	d501      	bpl.n	80030dc <_printf_i+0x1a0>
 80030d8:	6019      	str	r1, [r3, #0]
 80030da:	e002      	b.n	80030e2 <_printf_i+0x1a6>
 80030dc:	066d      	lsls	r5, r5, #25
 80030de:	d5fb      	bpl.n	80030d8 <_printf_i+0x19c>
 80030e0:	8019      	strh	r1, [r3, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9e04      	ldr	r6, [sp, #16]
 80030e6:	6123      	str	r3, [r4, #16]
 80030e8:	e7d2      	b.n	8003090 <_printf_i+0x154>
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	1d11      	adds	r1, r2, #4
 80030ee:	6019      	str	r1, [r3, #0]
 80030f0:	6816      	ldr	r6, [r2, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	0030      	movs	r0, r6
 80030f6:	6862      	ldr	r2, [r4, #4]
 80030f8:	f000 f832 	bl	8003160 <memchr>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d001      	beq.n	8003104 <_printf_i+0x1c8>
 8003100:	1b80      	subs	r0, r0, r6
 8003102:	6060      	str	r0, [r4, #4]
 8003104:	6863      	ldr	r3, [r4, #4]
 8003106:	6123      	str	r3, [r4, #16]
 8003108:	2300      	movs	r3, #0
 800310a:	9a04      	ldr	r2, [sp, #16]
 800310c:	7013      	strb	r3, [r2, #0]
 800310e:	e7bf      	b.n	8003090 <_printf_i+0x154>
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	0032      	movs	r2, r6
 8003114:	9906      	ldr	r1, [sp, #24]
 8003116:	9805      	ldr	r0, [sp, #20]
 8003118:	9d07      	ldr	r5, [sp, #28]
 800311a:	47a8      	blx	r5
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d0c1      	beq.n	80030a4 <_printf_i+0x168>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	079b      	lsls	r3, r3, #30
 8003124:	d415      	bmi.n	8003152 <_printf_i+0x216>
 8003126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003128:	68e0      	ldr	r0, [r4, #12]
 800312a:	4298      	cmp	r0, r3
 800312c:	dabc      	bge.n	80030a8 <_printf_i+0x16c>
 800312e:	0018      	movs	r0, r3
 8003130:	e7ba      	b.n	80030a8 <_printf_i+0x16c>
 8003132:	0022      	movs	r2, r4
 8003134:	2301      	movs	r3, #1
 8003136:	9906      	ldr	r1, [sp, #24]
 8003138:	9805      	ldr	r0, [sp, #20]
 800313a:	9e07      	ldr	r6, [sp, #28]
 800313c:	3219      	adds	r2, #25
 800313e:	47b0      	blx	r6
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d0af      	beq.n	80030a4 <_printf_i+0x168>
 8003144:	3501      	adds	r5, #1
 8003146:	68e3      	ldr	r3, [r4, #12]
 8003148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	42ab      	cmp	r3, r5
 800314e:	dcf0      	bgt.n	8003132 <_printf_i+0x1f6>
 8003150:	e7e9      	b.n	8003126 <_printf_i+0x1ea>
 8003152:	2500      	movs	r5, #0
 8003154:	e7f7      	b.n	8003146 <_printf_i+0x20a>
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	08003431 	.word	0x08003431
 800315c:	08003442 	.word	0x08003442

08003160 <memchr>:
 8003160:	b2c9      	uxtb	r1, r1
 8003162:	1882      	adds	r2, r0, r2
 8003164:	4290      	cmp	r0, r2
 8003166:	d101      	bne.n	800316c <memchr+0xc>
 8003168:	2000      	movs	r0, #0
 800316a:	4770      	bx	lr
 800316c:	7803      	ldrb	r3, [r0, #0]
 800316e:	428b      	cmp	r3, r1
 8003170:	d0fb      	beq.n	800316a <memchr+0xa>
 8003172:	3001      	adds	r0, #1
 8003174:	e7f6      	b.n	8003164 <memchr+0x4>

08003176 <memcpy>:
 8003176:	2300      	movs	r3, #0
 8003178:	b510      	push	{r4, lr}
 800317a:	429a      	cmp	r2, r3
 800317c:	d100      	bne.n	8003180 <memcpy+0xa>
 800317e:	bd10      	pop	{r4, pc}
 8003180:	5ccc      	ldrb	r4, [r1, r3]
 8003182:	54c4      	strb	r4, [r0, r3]
 8003184:	3301      	adds	r3, #1
 8003186:	e7f8      	b.n	800317a <memcpy+0x4>

08003188 <memmove>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4288      	cmp	r0, r1
 800318c:	d902      	bls.n	8003194 <memmove+0xc>
 800318e:	188b      	adds	r3, r1, r2
 8003190:	4298      	cmp	r0, r3
 8003192:	d303      	bcc.n	800319c <memmove+0x14>
 8003194:	2300      	movs	r3, #0
 8003196:	e007      	b.n	80031a8 <memmove+0x20>
 8003198:	5c8b      	ldrb	r3, [r1, r2]
 800319a:	5483      	strb	r3, [r0, r2]
 800319c:	3a01      	subs	r2, #1
 800319e:	d2fb      	bcs.n	8003198 <memmove+0x10>
 80031a0:	bd10      	pop	{r4, pc}
 80031a2:	5ccc      	ldrb	r4, [r1, r3]
 80031a4:	54c4      	strb	r4, [r0, r3]
 80031a6:	3301      	adds	r3, #1
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1fa      	bne.n	80031a2 <memmove+0x1a>
 80031ac:	e7f8      	b.n	80031a0 <memmove+0x18>
	...

080031b0 <_free_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	0005      	movs	r5, r0
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d010      	beq.n	80031da <_free_r+0x2a>
 80031b8:	1f0c      	subs	r4, r1, #4
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	da00      	bge.n	80031c2 <_free_r+0x12>
 80031c0:	18e4      	adds	r4, r4, r3
 80031c2:	0028      	movs	r0, r5
 80031c4:	f000 f8d4 	bl	8003370 <__malloc_lock>
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <_free_r+0x90>)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <_free_r+0x2c>
 80031d0:	6063      	str	r3, [r4, #4]
 80031d2:	6014      	str	r4, [r2, #0]
 80031d4:	0028      	movs	r0, r5
 80031d6:	f000 f8d3 	bl	8003380 <__malloc_unlock>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d908      	bls.n	80031f2 <_free_r+0x42>
 80031e0:	6821      	ldr	r1, [r4, #0]
 80031e2:	1860      	adds	r0, r4, r1
 80031e4:	4283      	cmp	r3, r0
 80031e6:	d1f3      	bne.n	80031d0 <_free_r+0x20>
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	1841      	adds	r1, r0, r1
 80031ee:	6021      	str	r1, [r4, #0]
 80031f0:	e7ee      	b.n	80031d0 <_free_r+0x20>
 80031f2:	001a      	movs	r2, r3
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <_free_r+0x4e>
 80031fa:	42a3      	cmp	r3, r4
 80031fc:	d9f9      	bls.n	80031f2 <_free_r+0x42>
 80031fe:	6811      	ldr	r1, [r2, #0]
 8003200:	1850      	adds	r0, r2, r1
 8003202:	42a0      	cmp	r0, r4
 8003204:	d10b      	bne.n	800321e <_free_r+0x6e>
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	1809      	adds	r1, r1, r0
 800320a:	1850      	adds	r0, r2, r1
 800320c:	6011      	str	r1, [r2, #0]
 800320e:	4283      	cmp	r3, r0
 8003210:	d1e0      	bne.n	80031d4 <_free_r+0x24>
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	1841      	adds	r1, r0, r1
 8003218:	6011      	str	r1, [r2, #0]
 800321a:	6053      	str	r3, [r2, #4]
 800321c:	e7da      	b.n	80031d4 <_free_r+0x24>
 800321e:	42a0      	cmp	r0, r4
 8003220:	d902      	bls.n	8003228 <_free_r+0x78>
 8003222:	230c      	movs	r3, #12
 8003224:	602b      	str	r3, [r5, #0]
 8003226:	e7d5      	b.n	80031d4 <_free_r+0x24>
 8003228:	6821      	ldr	r1, [r4, #0]
 800322a:	1860      	adds	r0, r4, r1
 800322c:	4283      	cmp	r3, r0
 800322e:	d103      	bne.n	8003238 <_free_r+0x88>
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	1841      	adds	r1, r0, r1
 8003236:	6021      	str	r1, [r4, #0]
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	6054      	str	r4, [r2, #4]
 800323c:	e7ca      	b.n	80031d4 <_free_r+0x24>
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000090 	.word	0x20000090

08003244 <_malloc_r>:
 8003244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003246:	2303      	movs	r3, #3
 8003248:	1ccd      	adds	r5, r1, #3
 800324a:	439d      	bics	r5, r3
 800324c:	3508      	adds	r5, #8
 800324e:	0006      	movs	r6, r0
 8003250:	2d0c      	cmp	r5, #12
 8003252:	d21f      	bcs.n	8003294 <_malloc_r+0x50>
 8003254:	250c      	movs	r5, #12
 8003256:	42a9      	cmp	r1, r5
 8003258:	d81e      	bhi.n	8003298 <_malloc_r+0x54>
 800325a:	0030      	movs	r0, r6
 800325c:	f000 f888 	bl	8003370 <__malloc_lock>
 8003260:	4925      	ldr	r1, [pc, #148]	; (80032f8 <_malloc_r+0xb4>)
 8003262:	680a      	ldr	r2, [r1, #0]
 8003264:	0014      	movs	r4, r2
 8003266:	2c00      	cmp	r4, #0
 8003268:	d11a      	bne.n	80032a0 <_malloc_r+0x5c>
 800326a:	4f24      	ldr	r7, [pc, #144]	; (80032fc <_malloc_r+0xb8>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <_malloc_r+0x38>
 8003272:	0021      	movs	r1, r4
 8003274:	0030      	movs	r0, r6
 8003276:	f000 f869 	bl	800334c <_sbrk_r>
 800327a:	6038      	str	r0, [r7, #0]
 800327c:	0029      	movs	r1, r5
 800327e:	0030      	movs	r0, r6
 8003280:	f000 f864 	bl	800334c <_sbrk_r>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d12b      	bne.n	80032e0 <_malloc_r+0x9c>
 8003288:	230c      	movs	r3, #12
 800328a:	0030      	movs	r0, r6
 800328c:	6033      	str	r3, [r6, #0]
 800328e:	f000 f877 	bl	8003380 <__malloc_unlock>
 8003292:	e003      	b.n	800329c <_malloc_r+0x58>
 8003294:	2d00      	cmp	r5, #0
 8003296:	dade      	bge.n	8003256 <_malloc_r+0x12>
 8003298:	230c      	movs	r3, #12
 800329a:	6033      	str	r3, [r6, #0]
 800329c:	2000      	movs	r0, #0
 800329e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	1b5b      	subs	r3, r3, r5
 80032a4:	d419      	bmi.n	80032da <_malloc_r+0x96>
 80032a6:	2b0b      	cmp	r3, #11
 80032a8:	d903      	bls.n	80032b2 <_malloc_r+0x6e>
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	18e4      	adds	r4, r4, r3
 80032ae:	6025      	str	r5, [r4, #0]
 80032b0:	e003      	b.n	80032ba <_malloc_r+0x76>
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	42a2      	cmp	r2, r4
 80032b6:	d10e      	bne.n	80032d6 <_malloc_r+0x92>
 80032b8:	600b      	str	r3, [r1, #0]
 80032ba:	0030      	movs	r0, r6
 80032bc:	f000 f860 	bl	8003380 <__malloc_unlock>
 80032c0:	0020      	movs	r0, r4
 80032c2:	2207      	movs	r2, #7
 80032c4:	300b      	adds	r0, #11
 80032c6:	1d23      	adds	r3, r4, #4
 80032c8:	4390      	bics	r0, r2
 80032ca:	1ac2      	subs	r2, r0, r3
 80032cc:	4298      	cmp	r0, r3
 80032ce:	d0e6      	beq.n	800329e <_malloc_r+0x5a>
 80032d0:	1a1b      	subs	r3, r3, r0
 80032d2:	50a3      	str	r3, [r4, r2]
 80032d4:	e7e3      	b.n	800329e <_malloc_r+0x5a>
 80032d6:	6053      	str	r3, [r2, #4]
 80032d8:	e7ef      	b.n	80032ba <_malloc_r+0x76>
 80032da:	0022      	movs	r2, r4
 80032dc:	6864      	ldr	r4, [r4, #4]
 80032de:	e7c2      	b.n	8003266 <_malloc_r+0x22>
 80032e0:	2303      	movs	r3, #3
 80032e2:	1cc4      	adds	r4, r0, #3
 80032e4:	439c      	bics	r4, r3
 80032e6:	42a0      	cmp	r0, r4
 80032e8:	d0e1      	beq.n	80032ae <_malloc_r+0x6a>
 80032ea:	1a21      	subs	r1, r4, r0
 80032ec:	0030      	movs	r0, r6
 80032ee:	f000 f82d 	bl	800334c <_sbrk_r>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	d1db      	bne.n	80032ae <_malloc_r+0x6a>
 80032f6:	e7c7      	b.n	8003288 <_malloc_r+0x44>
 80032f8:	20000090 	.word	0x20000090
 80032fc:	20000094 	.word	0x20000094

08003300 <_realloc_r>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	0007      	movs	r7, r0
 8003304:	000d      	movs	r5, r1
 8003306:	0016      	movs	r6, r2
 8003308:	2900      	cmp	r1, #0
 800330a:	d105      	bne.n	8003318 <_realloc_r+0x18>
 800330c:	0011      	movs	r1, r2
 800330e:	f7ff ff99 	bl	8003244 <_malloc_r>
 8003312:	0004      	movs	r4, r0
 8003314:	0020      	movs	r0, r4
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003318:	2a00      	cmp	r2, #0
 800331a:	d103      	bne.n	8003324 <_realloc_r+0x24>
 800331c:	f7ff ff48 	bl	80031b0 <_free_r>
 8003320:	0034      	movs	r4, r6
 8003322:	e7f7      	b.n	8003314 <_realloc_r+0x14>
 8003324:	f000 f834 	bl	8003390 <_malloc_usable_size_r>
 8003328:	002c      	movs	r4, r5
 800332a:	42b0      	cmp	r0, r6
 800332c:	d2f2      	bcs.n	8003314 <_realloc_r+0x14>
 800332e:	0031      	movs	r1, r6
 8003330:	0038      	movs	r0, r7
 8003332:	f7ff ff87 	bl	8003244 <_malloc_r>
 8003336:	1e04      	subs	r4, r0, #0
 8003338:	d0ec      	beq.n	8003314 <_realloc_r+0x14>
 800333a:	0029      	movs	r1, r5
 800333c:	0032      	movs	r2, r6
 800333e:	f7ff ff1a 	bl	8003176 <memcpy>
 8003342:	0029      	movs	r1, r5
 8003344:	0038      	movs	r0, r7
 8003346:	f7ff ff33 	bl	80031b0 <_free_r>
 800334a:	e7e3      	b.n	8003314 <_realloc_r+0x14>

0800334c <_sbrk_r>:
 800334c:	2300      	movs	r3, #0
 800334e:	b570      	push	{r4, r5, r6, lr}
 8003350:	4d06      	ldr	r5, [pc, #24]	; (800336c <_sbrk_r+0x20>)
 8003352:	0004      	movs	r4, r0
 8003354:	0008      	movs	r0, r1
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	f7fd f9c4 	bl	80006e4 <_sbrk>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d103      	bne.n	8003368 <_sbrk_r+0x1c>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d000      	beq.n	8003368 <_sbrk_r+0x1c>
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	bd70      	pop	{r4, r5, r6, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000168 	.word	0x20000168

08003370 <__malloc_lock>:
 8003370:	b510      	push	{r4, lr}
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <__malloc_lock+0xc>)
 8003374:	f000 f814 	bl	80033a0 <__retarget_lock_acquire_recursive>
 8003378:	bd10      	pop	{r4, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	20000170 	.word	0x20000170

08003380 <__malloc_unlock>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4802      	ldr	r0, [pc, #8]	; (800338c <__malloc_unlock+0xc>)
 8003384:	f000 f80d 	bl	80033a2 <__retarget_lock_release_recursive>
 8003388:	bd10      	pop	{r4, pc}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	20000170 	.word	0x20000170

08003390 <_malloc_usable_size_r>:
 8003390:	1f0b      	subs	r3, r1, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	1f18      	subs	r0, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	da01      	bge.n	800339e <_malloc_usable_size_r+0xe>
 800339a:	580b      	ldr	r3, [r1, r0]
 800339c:	18c0      	adds	r0, r0, r3
 800339e:	4770      	bx	lr

080033a0 <__retarget_lock_acquire_recursive>:
 80033a0:	4770      	bx	lr

080033a2 <__retarget_lock_release_recursive>:
 80033a2:	4770      	bx	lr

080033a4 <_init>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr

080033b0 <_fini>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr
