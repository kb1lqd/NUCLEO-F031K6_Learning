
Timer_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e10  08002e10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e10  08002e10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e10  08002e10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08002e88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002e88  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a487  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a06  00000000  00000000  0002a51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010077  00000000  00000000  0002d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6a8  00000000  00000000  0003d567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064a2c  00000000  00000000  00049c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae63b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc4  00000000  00000000  000ae690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d58 	.word	0x08002d58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002d58 	.word	0x08002d58

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b091      	sub	sp, #68	; 0x44
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fadb 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f855 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f959 	bl	80004f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f927 	bl	8000498 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800024a:	f000 f8fb 	bl	8000444 <MX_TIM16_Init>
  MX_TIM2_Init();
 800024e:	f000 f8a5 	bl	800039c <MX_TIM2_Init>
   * - 16 bit count
   */


  // Say hello
  uart_buf_len = sprintf(uart_buf, "Timer blinky program started!\r\n");
 8000252:	4a21      	ldr	r2, [pc, #132]	; (80002d8 <main+0xa4>)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	0011      	movs	r1, r2
 8000258:	0018      	movs	r0, r3
 800025a:	f002 f957 	bl	800250c <siprintf>
 800025e:	0003      	movs	r3, r0
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000264:	b29a      	uxth	r2, r3
 8000266:	1d39      	adds	r1, r7, #4
 8000268:	481c      	ldr	r0, [pc, #112]	; (80002dc <main+0xa8>)
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	f001 fdce 	bl	8001e0c <HAL_UART_Transmit>

  //Start the timer
  HAL_TIM_Base_Start(&htim16);
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <main+0xac>)
 8000272:	0018      	movs	r0, r3
 8000274:	f001 fb00 	bl	8001878 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 500)
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <main+0xac>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800027e:	243e      	movs	r4, #62	; 0x3e
 8000280:	193b      	adds	r3, r7, r4
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	1ad2      	subs	r2, r2, r3
 8000286:	23fa      	movs	r3, #250	; 0xfa
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	429a      	cmp	r2, r3
 800028c:	d3f4      	bcc.n	8000278 <main+0x44>
	  {
		  //Toggle  LED
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <main+0xb0>)
 8000290:	2108      	movs	r1, #8
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fd4b 	bl	8000d2e <HAL_GPIO_TogglePin>

		  //Print elapsed time to UART
		  uart_buf_len = sprintf(uart_buf, "Duration: %u ms\r\n", (__HAL_TIM_GET_COUNTER(&htim16) - timer_val)/10); // /10 for ms
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <main+0xac>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	210a      	movs	r1, #10
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ff38 	bl	800011c <__udivsi3>
 80002ac:	0003      	movs	r3, r0
 80002ae:	001a      	movs	r2, r3
 80002b0:	490d      	ldr	r1, [pc, #52]	; (80002e8 <main+0xb4>)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 f929 	bl	800250c <siprintf>
 80002ba:	0003      	movs	r3, r0
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
		  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 80002be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	1d39      	adds	r1, r7, #4
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <main+0xa8>)
 80002c6:	2364      	movs	r3, #100	; 0x64
 80002c8:	f001 fda0 	bl	8001e0c <HAL_UART_Transmit>

		  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <main+0xac>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	801a      	strh	r2, [r3, #0]
	  if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 500)
 80002d6:	e7cf      	b.n	8000278 <main+0x44>
 80002d8:	08002d70 	.word	0x08002d70
 80002dc:	20000098 	.word	0x20000098
 80002e0:	20000164 	.word	0x20000164
 80002e4:	48000400 	.word	0x48000400
 80002e8:	08002d90 	.word	0x08002d90

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b095      	sub	sp, #84	; 0x54
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	2420      	movs	r4, #32
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2330      	movs	r3, #48	; 0x30
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f002 f8fd 	bl	80024fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	2310      	movs	r3, #16
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	0018      	movs	r0, r3
 8000308:	2310      	movs	r3, #16
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 f8f5 	bl	80024fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	2310      	movs	r3, #16
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 f8ee 	bl	80024fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	0021      	movs	r1, r4
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2210      	movs	r2, #16
 8000332:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	187b      	adds	r3, r7, r1
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fd11 	bl	8000d64 <HAL_RCC_OscConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000346:	f000 f92d 	bl	80005a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	2110      	movs	r1, #16
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2207      	movs	r2, #7
 8000350:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2100      	movs	r1, #0
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f815 	bl	8001398 <HAL_RCC_ClockConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000372:	f000 f917 	bl	80005a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000376:	003b      	movs	r3, r7
 8000378:	2201      	movs	r2, #1
 800037a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800037c:	003b      	movs	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000382:	003b      	movs	r3, r7
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f959 	bl	800163c <HAL_RCCEx_PeriphCLKConfig>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800038e:	f000 f909 	bl	80005a4 <Error_Handler>
  }
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b015      	add	sp, #84	; 0x54
 8000398:	bd90      	pop	{r4, r7, pc}
	...

0800039c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	2308      	movs	r3, #8
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	0018      	movs	r0, r3
 80003a8:	2310      	movs	r3, #16
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f002 f8a5 	bl	80024fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b2:	003b      	movs	r3, r7
 80003b4:	0018      	movs	r0, r3
 80003b6:	2308      	movs	r3, #8
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f002 f89e 	bl	80024fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	05d2      	lsls	r2, r2, #23
 80003c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003ca:	2207      	movs	r2, #7
 80003cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	4252      	negs	r2, r2
 80003da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_TIM2_Init+0xa4>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 f9f4 	bl	80017d8 <HAL_TIM_Base_Init>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f8d6 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f8:	2108      	movs	r1, #8
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	0152      	lsls	r2, r2, #5
 8000400:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000402:	187a      	adds	r2, r7, r1
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_TIM2_Init+0xa4>)
 8000406:	0011      	movs	r1, r2
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fa79 	bl	8001900 <HAL_TIM_ConfigClockSource>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000412:	f000 f8c7 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000422:	003a      	movs	r2, r7
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_TIM2_Init+0xa4>)
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fc43 	bl	8001cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000432:	f000 f8b7 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b006      	add	sp, #24
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	2000011c 	.word	0x2000011c

08000444 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_TIM16_Init+0x44>)
 800044a:	4a10      	ldr	r2, [pc, #64]	; (800048c <MX_TIM16_Init+0x48>)
 800044c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 800-1;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_TIM16_Init+0x44>)
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <MX_TIM16_Init+0x4c>)
 8000452:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_TIM16_Init+0x44>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <MX_TIM16_Init+0x44>)
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <MX_TIM16_Init+0x50>)
 800045e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_TIM16_Init+0x44>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <MX_TIM16_Init+0x44>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_TIM16_Init+0x44>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000472:	4b05      	ldr	r3, [pc, #20]	; (8000488 <MX_TIM16_Init+0x44>)
 8000474:	0018      	movs	r0, r3
 8000476:	f001 f9af 	bl	80017d8 <HAL_TIM_Base_Init>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800047e:	f000 f891 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000164 	.word	0x20000164
 800048c:	40014400 	.word	0x40014400
 8000490:	0000031f 	.word	0x0000031f
 8000494:	0000ffff 	.word	0x0000ffff

08000498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART1_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004a4:	2296      	movs	r2, #150	; 0x96
 80004a6:	0212      	lsls	r2, r2, #8
 80004a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fc41 	bl	8001d64 <HAL_UART_Init>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004e6:	f000 f85d 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000098 	.word	0x20000098
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	240c      	movs	r4, #12
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f001 fff7 	bl	80024fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_GPIO_Init+0xa4>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_GPIO_Init+0xa4>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	03c9      	lsls	r1, r1, #15
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_GPIO_Init+0xa4>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	03db      	lsls	r3, r3, #15
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_GPIO_Init+0xa4>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0xa4>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0xa4>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_GPIO_Init+0xa4>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_GPIO_Init+0xa4>)
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	02c9      	lsls	r1, r1, #11
 8000550:	430a      	orrs	r2, r1
 8000552:	615a      	str	r2, [r3, #20]
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_GPIO_Init+0xa4>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	02db      	lsls	r3, r3, #11
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_GPIO_Init+0xa8>)
 8000564:	2200      	movs	r2, #0
 8000566:	2108      	movs	r1, #8
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fbc3 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2208      	movs	r2, #8
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000588:	187b      	adds	r3, r7, r1
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <MX_GPIO_Init+0xa8>)
 800058c:	0019      	movs	r1, r3
 800058e:	0010      	movs	r0, r2
 8000590:	f000 fa48 	bl	8000a24 <HAL_GPIO_Init>

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b009      	add	sp, #36	; 0x24
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000400 	.word	0x48000400

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x44>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_MspInit+0x44>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x44>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_MspInit+0x44>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_MspInit+0x44>)
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	429a      	cmp	r2, r3
 800060a:	d10c      	bne.n	8000626 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 8000612:	2101      	movs	r1, #1
 8000614:	430a      	orrs	r2, r1
 8000616:	61da      	str	r2, [r3, #28]
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	2201      	movs	r2, #1
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000624:	e012      	b.n	800064c <HAL_TIM_Base_MspInit+0x54>
  else if(htim_base->Instance==TIM16)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_TIM_Base_MspInit+0x60>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d10d      	bne.n	800064c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0289      	lsls	r1, r1, #10
 800063a:	430a      	orrs	r2, r1
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_TIM_Base_MspInit+0x5c>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	029b      	lsls	r3, r3, #10
 8000646:	4013      	ands	r3, r2
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b004      	add	sp, #16
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	40014400 	.word	0x40014400

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b08b      	sub	sp, #44	; 0x2c
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	2414      	movs	r4, #20
 8000666:	193b      	adds	r3, r7, r4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f001 ff44 	bl	80024fc <memset>
  if(huart->Instance==USART1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <HAL_UART_MspInit+0x90>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d132      	bne.n	80006e4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <HAL_UART_MspInit+0x94>)
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_UART_MspInit+0x94>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	01c9      	lsls	r1, r1, #7
 8000688:	430a      	orrs	r2, r1
 800068a:	619a      	str	r2, [r3, #24]
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_UART_MspInit+0x94>)
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	01db      	lsls	r3, r3, #7
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_UART_MspInit+0x94>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0289      	lsls	r1, r1, #10
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0x94>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	029b      	lsls	r3, r3, #10
 80006b0:	4013      	ands	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006b6:	0021      	movs	r1, r4
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_UART_MspInit+0x98>)
 80006bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2203      	movs	r2, #3
 80006ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	187a      	adds	r2, r7, r1
 80006d8:	2390      	movs	r3, #144	; 0x90
 80006da:	05db      	lsls	r3, r3, #23
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f9a0 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b00b      	add	sp, #44	; 0x2c
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40021000 	.word	0x40021000
 80006f4:	00008004 	.word	0x00008004

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f8b2 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000758:	f001 fea6 	bl	80024a8 <__errno>
 800075c:	0003      	movs	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000762:	2301      	movs	r3, #1
 8000764:	425b      	negs	r3, r3
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	18d2      	adds	r2, r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <_sbrk+0x64>)
 8000778:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b006      	add	sp, #24
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20001000 	.word	0x20001000
 8000788:	00000400 	.word	0x00000400
 800078c:	2000008c 	.word	0x2000008c
 8000790:	200001c0 	.word	0x200001c0

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0b      	ldr	r4, [pc, #44]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ca:	f7ff ffe3 	bl	8000794 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007ce:	f001 fe71 	bl	80024b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fd2f 	bl	8000234 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007e4:	08002e18 	.word	0x08002e18
  ldr r2, =_sbss
 80007e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007ec:	200001c0 	.word	0x200001c0

080007f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_IRQHandler>
	...

080007f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_Init+0x24>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_Init+0x24>)
 80007fe:	2110      	movs	r1, #16
 8000800:	430a      	orrs	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f809 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080a:	f7ff fed1 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
}
 8000810:	0018      	movs	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0x5c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc73 	bl	800011c <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc6e 	bl	800011c <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f8e1 	bl	8000a0a <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e00f      	b.n	8000870 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d80b      	bhi.n	800086e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8be 	bl	80009e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_InitTick+0x64>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200001ac 	.word	0x200001ac

080008a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200001ac 	.word	0x200001ac

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b7f      	cmp	r3, #127	; 0x7f
 80008d0:	d828      	bhi.n	8000924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	4a2f      	ldr	r2, [pc, #188]	; (8000990 <__NVIC_SetPriority+0xd4>)
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	33c0      	adds	r3, #192	; 0xc0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	589b      	ldr	r3, [r3, r2]
 80008e2:	1dfa      	adds	r2, r7, #7
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	0011      	movs	r1, r2
 80008e8:	2203      	movs	r2, #3
 80008ea:	400a      	ands	r2, r1
 80008ec:	00d2      	lsls	r2, r2, #3
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	43d2      	mvns	r2, r2
 80008f6:	401a      	ands	r2, r3
 80008f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	019b      	lsls	r3, r3, #6
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	401a      	ands	r2, r3
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	2303      	movs	r3, #3
 800090a:	4003      	ands	r3, r0
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000910:	481f      	ldr	r0, [pc, #124]	; (8000990 <__NVIC_SetPriority+0xd4>)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b25b      	sxtb	r3, r3
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	430a      	orrs	r2, r1
 800091c:	33c0      	adds	r3, #192	; 0xc0
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000922:	e031      	b.n	8000988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <__NVIC_SetPriority+0xd8>)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0019      	movs	r1, r3
 800092c:	230f      	movs	r3, #15
 800092e:	400b      	ands	r3, r1
 8000930:	3b08      	subs	r3, #8
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	3306      	adds	r3, #6
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	3304      	adds	r3, #4
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	0011      	movs	r1, r2
 8000944:	2203      	movs	r2, #3
 8000946:	400a      	ands	r2, r1
 8000948:	00d2      	lsls	r2, r2, #3
 800094a:	21ff      	movs	r1, #255	; 0xff
 800094c:	4091      	lsls	r1, r2
 800094e:	000a      	movs	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	22ff      	movs	r2, #255	; 0xff
 800095c:	401a      	ands	r2, r3
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	4003      	ands	r3, r0
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <__NVIC_SetPriority+0xd8>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	001c      	movs	r4, r3
 8000974:	230f      	movs	r3, #15
 8000976:	4023      	ands	r3, r4
 8000978:	3b08      	subs	r3, #8
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	3306      	adds	r3, #6
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	18c3      	adds	r3, r0, r3
 8000984:	3304      	adds	r3, #4
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b003      	add	sp, #12
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	045b      	lsls	r3, r3, #17
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d301      	bcc.n	80009b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ac:	2301      	movs	r3, #1
 80009ae:	e010      	b.n	80009d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SysTick_Config+0x44>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	3a01      	subs	r2, #1
 80009b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2103      	movs	r1, #3
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff ff7c 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x44>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x44>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	1c02      	adds	r2, r0, #0
 80009f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	0011      	movs	r1, r2
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b004      	add	sp, #16
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ffbf 	bl	8000998 <SysTick_Config>
 8000a1a:	0003      	movs	r3, r0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e149      	b.n	8000cc8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d100      	bne.n	8000a4c <HAL_GPIO_Init+0x28>
 8000a4a:	e13a      	b.n	8000cc2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d00b      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	2b11      	cmp	r3, #17
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b12      	cmp	r3, #18
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	2201      	movs	r2, #1
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0xea>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	2207      	movs	r2, #7
 8000b20:	4013      	ands	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2107      	movs	r1, #7
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	6939      	ldr	r1, [r7, #16]
 8000b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2203      	movs	r2, #3
 8000b74:	401a      	ands	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	055b      	lsls	r3, r3, #21
 8000b92:	4013      	ands	r3, r2
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x174>
 8000b96:	e094      	b.n	8000cc2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4013      	ands	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	; (8000ce4 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	589b      	ldr	r3, [r3, r2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	2390      	movs	r3, #144	; 0x90
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d00d      	beq.n	8000bfa <HAL_GPIO_Init+0x1d6>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a41      	ldr	r2, [pc, #260]	; (8000ce8 <HAL_GPIO_Init+0x2c4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x1d2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a40      	ldr	r2, [pc, #256]	; (8000cec <HAL_GPIO_Init+0x2c8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_GPIO_Init+0x1ce>
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e004      	b.n	8000bfc <HAL_GPIO_Init+0x1d8>
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e002      	b.n	8000bfc <HAL_GPIO_Init+0x1d8>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <HAL_GPIO_Init+0x1d8>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	2103      	movs	r1, #3
 8000c00:	400a      	ands	r2, r1
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	4093      	lsls	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <HAL_GPIO_Init+0x2c0>)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c1a:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	4013      	ands	r3, r2
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	035b      	lsls	r3, r3, #13
 8000c86:	4013      	ands	r3, r2
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	039b      	lsls	r3, r3, #14
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	40da      	lsrs	r2, r3
 8000cd0:	1e13      	subs	r3, r2, #0
 8000cd2:	d000      	beq.n	8000cd6 <HAL_GPIO_Init+0x2b2>
 8000cd4:	e6ae      	b.n	8000a34 <HAL_GPIO_Init+0x10>
  } 
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b006      	add	sp, #24
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	0011      	movs	r1, r2
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	801a      	strh	r2, [r3, #0]
 8000d06:	1c7b      	adds	r3, r7, #1
 8000d08:	1c0a      	adds	r2, r1, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d0c:	1c7b      	adds	r3, r7, #1
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d004      	beq.n	8000d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d14:	1cbb      	adds	r3, r7, #2
 8000d16:	881a      	ldrh	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d1c:	e003      	b.n	8000d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	881a      	ldrh	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	000a      	movs	r2, r1
 8000d38:	1cbb      	adds	r3, r7, #2
 8000d3a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d42:	1cbb      	adds	r3, r7, #2
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	041a      	lsls	r2, r3, #16
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	1cb9      	adds	r1, r7, #2
 8000d52:	8809      	ldrh	r1, [r1, #0]
 8000d54:	400b      	ands	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e301      	b.n	800137a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x1e>
 8000d80:	e08d      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d82:	4bc3      	ldr	r3, [pc, #780]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	220c      	movs	r2, #12
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d00e      	beq.n	8000dac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8e:	4bc0      	ldr	r3, [pc, #768]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	220c      	movs	r2, #12
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d116      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x64>
 8000d9a:	4bbd      	ldr	r3, [pc, #756]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	025b      	lsls	r3, r3, #9
 8000da2:	401a      	ands	r2, r3
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d10d      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	4bb8      	ldr	r3, [pc, #736]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	029b      	lsls	r3, r3, #10
 8000db4:	4013      	ands	r3, r2
 8000db6:	d100      	bne.n	8000dba <HAL_RCC_OscConfig+0x56>
 8000db8:	e070      	b.n	8000e9c <HAL_RCC_OscConfig+0x138>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x60>
 8000dc2:	e06b      	b.n	8000e9c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e2d8      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d107      	bne.n	8000de0 <HAL_RCC_OscConfig+0x7c>
 8000dd0:	4baf      	ldr	r3, [pc, #700]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4bae      	ldr	r3, [pc, #696]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e02f      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x9e>
 8000de8:	4ba9      	ldr	r3, [pc, #676]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	49a9      	ldr	r1, [pc, #676]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4ba6      	ldr	r3, [pc, #664]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4ba5      	ldr	r3, [pc, #660]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	49a7      	ldr	r1, [pc, #668]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e01e      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d10e      	bne.n	8000e28 <HAL_RCC_OscConfig+0xc4>
 8000e0a:	4ba1      	ldr	r3, [pc, #644]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4ba0      	ldr	r3, [pc, #640]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	02c9      	lsls	r1, r1, #11
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	4b9d      	ldr	r3, [pc, #628]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0249      	lsls	r1, r1, #9
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0xdc>
 8000e28:	4b99      	ldr	r3, [pc, #612]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b98      	ldr	r3, [pc, #608]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	4999      	ldr	r1, [pc, #612]	; (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	4b96      	ldr	r3, [pc, #600]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b95      	ldr	r3, [pc, #596]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	4997      	ldr	r1, [pc, #604]	; (8001098 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d014      	beq.n	8000e72 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fd2e 	bl	80008a8 <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e52:	f7ff fd29 	bl	80008a8 <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b64      	cmp	r3, #100	; 0x64
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e28a      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	4b8a      	ldr	r3, [pc, #552]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f0      	beq.n	8000e52 <HAL_RCC_OscConfig+0xee>
 8000e70:	e015      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fd19 	bl	80008a8 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fd14 	bl	80008a8 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e275      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8e:	4b80      	ldr	r3, [pc, #512]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x118>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x146>
 8000ea8:	e069      	b.n	8000f7e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eaa:	4b79      	ldr	r3, [pc, #484]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	220c      	movs	r2, #12
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d00b      	beq.n	8000ecc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb4:	4b76      	ldr	r3, [pc, #472]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	220c      	movs	r2, #12
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d11c      	bne.n	8000efa <HAL_RCC_OscConfig+0x196>
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	025b      	lsls	r3, r3, #9
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d116      	bne.n	8000efa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ecc:	4b70      	ldr	r3, [pc, #448]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x17e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e24b      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b6b      	ldr	r3, [pc, #428]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	22f8      	movs	r2, #248	; 0xf8
 8000ee8:	4393      	bics	r3, r2
 8000eea:	0019      	movs	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	00da      	lsls	r2, r3, #3
 8000ef2:	4b67      	ldr	r3, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef8:	e041      	b.n	8000f7e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d024      	beq.n	8000f4c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f02:	4b63      	ldr	r3, [pc, #396]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b62      	ldr	r3, [pc, #392]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fccb 	bl	80008a8 <HAL_GetTick>
 8000f12:	0003      	movs	r3, r0
 8000f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fcc6 	bl	80008a8 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e227      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f1      	beq.n	8000f18 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	22f8      	movs	r2, #248	; 0xf8
 8000f3a:	4393      	bics	r3, r2
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	00da      	lsls	r2, r3, #3
 8000f44:	4b52      	ldr	r3, [pc, #328]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e018      	b.n	8000f7e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f4c:	4b50      	ldr	r3, [pc, #320]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	438a      	bics	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fca6 	bl	80008a8 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fca1 	bl	80008a8 <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e202      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f74:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f1      	bne.n	8000f62 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2208      	movs	r2, #8
 8000f84:	4013      	ands	r3, r2
 8000f86:	d036      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d019      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f90:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f94:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9c:	f7ff fc84 	bl	80008a8 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fa6:	f7ff fc7f 	bl	80008a8 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e1e0      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d0f1      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x242>
 8000fc2:	e018      	b.n	8000ff6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	438a      	bics	r2, r1
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fc6a 	bl	80008a8 <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fda:	f7ff fc65 	bl	80008a8 <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1c6      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1f1      	bne.n	8000fda <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d100      	bne.n	8001002 <HAL_RCC_OscConfig+0x29e>
 8001000:	e0b4      	b.n	800116c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001002:	201f      	movs	r0, #31
 8001004:	183b      	adds	r3, r7, r0
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 800100c:	69da      	ldr	r2, [r3, #28]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	055b      	lsls	r3, r3, #21
 8001012:	4013      	ands	r3, r2
 8001014:	d110      	bne.n	8001038 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0549      	lsls	r1, r1, #21
 8001020:	430a      	orrs	r2, r1
 8001022:	61da      	str	r2, [r3, #28]
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001032:	183b      	adds	r3, r7, r0
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_RCC_OscConfig+0x338>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4013      	ands	r3, r2
 8001042:	d11a      	bne.n	800107a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_RCC_OscConfig+0x338>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_RCC_OscConfig+0x338>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0049      	lsls	r1, r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001052:	f7ff fc29 	bl	80008a8 <HAL_GetTick>
 8001056:	0003      	movs	r3, r0
 8001058:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105c:	f7ff fc24 	bl	80008a8 <HAL_GetTick>
 8001060:	0002      	movs	r2, r0
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e185      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_OscConfig+0x338>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4013      	ands	r3, r2
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10e      	bne.n	80010a0 <HAL_RCC_OscConfig+0x33c>
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	4b02      	ldr	r3, [pc, #8]	; (8001090 <HAL_RCC_OscConfig+0x32c>)
 8001088:	2101      	movs	r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	e035      	b.n	80010fc <HAL_RCC_OscConfig+0x398>
 8001090:	40021000 	.word	0x40021000
 8001094:	fffeffff 	.word	0xfffeffff
 8001098:	fffbffff 	.word	0xfffbffff
 800109c:	40007000 	.word	0x40007000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x35e>
 80010a8:	4bb6      	ldr	r3, [pc, #728]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010aa:	6a1a      	ldr	r2, [r3, #32]
 80010ac:	4bb5      	ldr	r3, [pc, #724]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	438a      	bics	r2, r1
 80010b2:	621a      	str	r2, [r3, #32]
 80010b4:	4bb3      	ldr	r3, [pc, #716]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010b6:	6a1a      	ldr	r2, [r3, #32]
 80010b8:	4bb2      	ldr	r3, [pc, #712]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010ba:	2104      	movs	r1, #4
 80010bc:	438a      	bics	r2, r1
 80010be:	621a      	str	r2, [r3, #32]
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x398>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x380>
 80010ca:	4bae      	ldr	r3, [pc, #696]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	4bad      	ldr	r3, [pc, #692]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010d0:	2104      	movs	r1, #4
 80010d2:	430a      	orrs	r2, r1
 80010d4:	621a      	str	r2, [r3, #32]
 80010d6:	4bab      	ldr	r3, [pc, #684]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010d8:	6a1a      	ldr	r2, [r3, #32]
 80010da:	4baa      	ldr	r3, [pc, #680]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	621a      	str	r2, [r3, #32]
 80010e2:	e00b      	b.n	80010fc <HAL_RCC_OscConfig+0x398>
 80010e4:	4ba7      	ldr	r3, [pc, #668]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	4ba6      	ldr	r3, [pc, #664]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	438a      	bics	r2, r1
 80010ee:	621a      	str	r2, [r3, #32]
 80010f0:	4ba4      	ldr	r3, [pc, #656]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	4ba3      	ldr	r3, [pc, #652]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80010f6:	2104      	movs	r1, #4
 80010f8:	438a      	bics	r2, r1
 80010fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d014      	beq.n	800112e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001104:	f7ff fbd0 	bl	80008a8 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	e009      	b.n	8001122 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff fbcb 	bl	80008a8 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	4a9b      	ldr	r2, [pc, #620]	; (8001388 <HAL_RCC_OscConfig+0x624>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e12b      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001122:	4b98      	ldr	r3, [pc, #608]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x3aa>
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fbbb 	bl	80008a8 <HAL_GetTick>
 8001132:	0003      	movs	r3, r0
 8001134:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001136:	e009      	b.n	800114c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f7ff fbb6 	bl	80008a8 <HAL_GetTick>
 800113c:	0002      	movs	r2, r0
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a91      	ldr	r2, [pc, #580]	; (8001388 <HAL_RCC_OscConfig+0x624>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e116      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114c:	4b8d      	ldr	r3, [pc, #564]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001156:	231f      	movs	r3, #31
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d105      	bne.n	800116c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001160:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001162:	69da      	ldr	r2, [r3, #28]
 8001164:	4b87      	ldr	r3, [pc, #540]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001166:	4989      	ldr	r1, [pc, #548]	; (800138c <HAL_RCC_OscConfig+0x628>)
 8001168:	400a      	ands	r2, r1
 800116a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2210      	movs	r2, #16
 8001172:	4013      	ands	r3, r2
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d12a      	bne.n	80011d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800117e:	4b81      	ldr	r3, [pc, #516]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001182:	4b80      	ldr	r3, [pc, #512]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001184:	2104      	movs	r1, #4
 8001186:	430a      	orrs	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800118a:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 800118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118e:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001190:	2101      	movs	r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fb87 	bl	80008a8 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011a0:	f7ff fb82 	bl	80008a8 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0e3      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	d0f1      	beq.n	80011a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011bc:	4b71      	ldr	r3, [pc, #452]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	22f8      	movs	r2, #248	; 0xf8
 80011c2:	4393      	bics	r3, r2
 80011c4:	0019      	movs	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	00da      	lsls	r2, r3, #3
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e034      	b.n	800123e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	3305      	adds	r3, #5
 80011da:	d111      	bne.n	8001200 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011dc:	4b69      	ldr	r3, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011e2:	2104      	movs	r1, #4
 80011e4:	438a      	bics	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e8:	4b66      	ldr	r3, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ec:	22f8      	movs	r2, #248	; 0xf8
 80011ee:	4393      	bics	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	00da      	lsls	r2, r3, #3
 80011f8:	4b62      	ldr	r3, [pc, #392]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80011fa:	430a      	orrs	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
 80011fe:	e01e      	b.n	800123e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001200:	4b60      	ldr	r3, [pc, #384]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001204:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001206:	2104      	movs	r1, #4
 8001208:	430a      	orrs	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800120c:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 800120e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001210:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001212:	2101      	movs	r1, #1
 8001214:	438a      	bics	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fb46 	bl	80008a8 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001222:	f7ff fb41 	bl	80008a8 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0a2      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	2202      	movs	r2, #2
 800123a:	4013      	ands	r3, r2
 800123c:	d1f1      	bne.n	8001222 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <HAL_RCC_OscConfig+0x4e4>
 8001246:	e097      	b.n	8001378 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	220c      	movs	r2, #12
 800124e:	4013      	ands	r3, r2
 8001250:	2b08      	cmp	r3, #8
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x4f2>
 8001254:	e06b      	b.n	800132e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d14c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	4b49      	ldr	r3, [pc, #292]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001264:	494a      	ldr	r1, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x62c>)
 8001266:	400a      	ands	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fb1d 	bl	80008a8 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fb18 	bl	80008a8 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e079      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	049b      	lsls	r3, r3, #18
 800128e:	4013      	ands	r3, r2
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	220f      	movs	r2, #15
 8001298:	4393      	bics	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a0:	4b38      	ldr	r3, [pc, #224]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012a2:	430a      	orrs	r2, r1
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <HAL_RCC_OscConfig+0x630>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	431a      	orrs	r2, r3
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	0449      	lsls	r1, r1, #17
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff faeb 	bl	80008a8 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fae6 	bl	80008a8 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e047      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	4013      	ands	r3, r2
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x574>
 80012f6:	e03f      	b.n	8001378 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 80012fe:	4924      	ldr	r1, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x62c>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fad0 	bl	80008a8 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff facb 	bl	80008a8 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e02c      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	049b      	lsls	r3, r3, #18
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x5aa>
 800132c:	e024      	b.n	8001378 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e01f      	b.n	800137a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_RCC_OscConfig+0x620>)
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	025b      	lsls	r3, r3, #9
 800134c:	401a      	ands	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	429a      	cmp	r2, r3
 8001354:	d10e      	bne.n	8001374 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	220f      	movs	r2, #15
 800135a:	401a      	ands	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d107      	bne.n	8001374 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	23f0      	movs	r3, #240	; 0xf0
 8001368:	039b      	lsls	r3, r3, #14
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b008      	add	sp, #32
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40021000 	.word	0x40021000
 8001388:	00001388 	.word	0x00001388
 800138c:	efffffff 	.word	0xefffffff
 8001390:	feffffff 	.word	0xfeffffff
 8001394:	ffc2ffff 	.word	0xffc2ffff

08001398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0b3      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d911      	bls.n	80013de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	4393      	bics	r3, r2
 80013c2:	0019      	movs	r1, r3
 80013c4:	4b55      	ldr	r3, [pc, #340]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d001      	beq.n	80013de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e09a      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d015      	beq.n	8001414 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2204      	movs	r2, #4
 80013ee:	4013      	ands	r3, r2
 80013f0:	d006      	beq.n	8001400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f2:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 80013f8:	21e0      	movs	r1, #224	; 0xe0
 80013fa:	00c9      	lsls	r1, r1, #3
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	22f0      	movs	r2, #240	; 0xf0
 8001406:	4393      	bics	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001410:	430a      	orrs	r2, r1
 8001412:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	029b      	lsls	r3, r3, #10
 800142e:	4013      	ands	r3, r2
 8001430:	d114      	bne.n	800145c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e06e      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	049b      	lsls	r3, r3, #18
 8001446:	4013      	ands	r3, r2
 8001448:	d108      	bne.n	800145c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e062      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2202      	movs	r2, #2
 8001454:	4013      	ands	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e05b      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fa1a 	bl	80008a8 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001478:	e009      	b.n	800148e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147a:	f7ff fa15 	bl	80008a8 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <HAL_RCC_ClockConfig+0x18c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e042      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	220c      	movs	r2, #12
 8001494:	401a      	ands	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1ec      	bne.n	800147a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d211      	bcs.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4393      	bics	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCC_ClockConfig+0x184>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4013      	ands	r3, r2
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e020      	b.n	8001514 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2204      	movs	r2, #4
 80014d8:	4013      	ands	r3, r2
 80014da:	d009      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_RCC_ClockConfig+0x190>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014f0:	f000 f820 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014f4:	0001      	movs	r1, r0
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_RCC_ClockConfig+0x188>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	220f      	movs	r2, #15
 80014fe:	4013      	ands	r3, r2
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x194>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	000a      	movs	r2, r1
 8001506:	40da      	lsrs	r2, r3
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_ClockConfig+0x198>)
 800150a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff f985 	bl	800081c <HAL_InitTick>
  
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b004      	add	sp, #16
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40022000 	.word	0x40022000
 8001520:	40021000 	.word	0x40021000
 8001524:	00001388 	.word	0x00001388
 8001528:	fffff8ff 	.word	0xfffff8ff
 800152c:	08002dc4 	.word	0x08002dc4
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b08f      	sub	sp, #60	; 0x3c
 8001538:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800153a:	2314      	movs	r3, #20
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001540:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001542:	c313      	stmia	r3!, {r0, r1, r4}
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800154c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800154e:	c313      	stmia	r3!, {r0, r1, r4}
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	220c      	movs	r2, #12
 8001572:	4013      	ands	r3, r2
 8001574:	2b04      	cmp	r3, #4
 8001576:	d002      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x4a>
 8001578:	2b08      	cmp	r3, #8
 800157a:	d003      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x50>
 800157c:	e02d      	b.n	80015da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001582:	e02d      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	220f      	movs	r2, #15
 800158a:	4013      	ands	r3, r2
 800158c:	2214      	movs	r2, #20
 800158e:	18ba      	adds	r2, r7, r2
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	220f      	movs	r2, #15
 800159a:	4013      	ands	r3, r2
 800159c:	1d3a      	adds	r2, r7, #4
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	4013      	ands	r3, r2
 80015aa:	d009      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015b0:	f7fe fdb4 	bl	800011c <__udivsi3>
 80015b4:	0003      	movs	r3, r0
 80015b6:	001a      	movs	r2, r3
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	4353      	muls	r3, r2
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
 80015be:	e009      	b.n	80015d4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c2:	000a      	movs	r2, r1
 80015c4:	0152      	lsls	r2, r2, #5
 80015c6:	1a52      	subs	r2, r2, r1
 80015c8:	0193      	lsls	r3, r2, #6
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	185b      	adds	r3, r3, r1
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015d8:	e002      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015de:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b00f      	add	sp, #60	; 0x3c
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	08002da4 	.word	0x08002da4
 80015f0:	08002db4 	.word	0x08002db4
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200

080015fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_RCC_GetHCLKFreq+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000000 	.word	0x20000000

08001610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001614:	f7ff fff2 	bl	80015fc <HAL_RCC_GetHCLKFreq>
 8001618:	0001      	movs	r1, r0
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	2207      	movs	r2, #7
 8001622:	4013      	ands	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	40d9      	lsrs	r1, r3
 800162a:	000b      	movs	r3, r1
}    
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40021000 	.word	0x40021000
 8001638:	08002dd4 	.word	0x08002dd4

0800163c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001658:	e08e      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2017      	movs	r0, #23
 800165c:	183b      	adds	r3, r7, r0
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	055b      	lsls	r3, r3, #21
 800166a:	4013      	ands	r3, r2
 800166c:	d110      	bne.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b54      	ldr	r3, [pc, #336]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0549      	lsls	r1, r1, #21
 8001678:	430a      	orrs	r2, r1
 800167a:	61da      	str	r2, [r3, #28]
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	055b      	lsls	r3, r3, #21
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	183b      	adds	r3, r7, r0
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4013      	ands	r3, r2
 800169a:	d11a      	bne.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169c:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	0049      	lsls	r1, r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff f8fd 	bl	80008a8 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	e008      	b.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b4:	f7ff f8f8 	bl	80008a8 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e077      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d034      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	23c0      	movs	r3, #192	; 0xc0
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d02c      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0249      	lsls	r1, r1, #9
 8001708:	430a      	orrs	r2, r1
 800170a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800170c:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001712:	492e      	ldr	r1, [pc, #184]	; (80017cc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001714:	400a      	ands	r2, r1
 8001716:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	4013      	ands	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff f8bf 	bl	80008a8 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	e009      	b.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff f8ba 	bl	80008a8 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e038      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d0f0      	beq.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800175e:	430a      	orrs	r2, r1
 8001760:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001762:	2317      	movs	r3, #23
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001772:	4918      	ldr	r1, [pc, #96]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001774:	400a      	ands	r2, r1
 8001776:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d009      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	2203      	movs	r2, #3
 8001788:	4393      	bics	r3, r2
 800178a:	0019      	movs	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001792:	430a      	orrs	r2, r1
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2220      	movs	r2, #32
 800179c:	4013      	ands	r3, r2
 800179e:	d009      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	2210      	movs	r2, #16
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b006      	add	sp, #24
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
 80017c8:	fffffcff 	.word	0xfffffcff
 80017cc:	fffeffff 	.word	0xfffeffff
 80017d0:	00001388 	.word	0x00001388
 80017d4:	efffffff 	.word	0xefffffff

080017d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e042      	b.n	8001870 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223d      	movs	r2, #61	; 0x3d
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223c      	movs	r2, #60	; 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7fe fef9 	bl	80005f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	223d      	movs	r2, #61	; 0x3d
 800180a:	2102      	movs	r1, #2
 800180c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f000 f93b 	bl	8001a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2246      	movs	r2, #70	; 0x46
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223e      	movs	r2, #62	; 0x3e
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	223f      	movs	r2, #63	; 0x3f
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2241      	movs	r2, #65	; 0x41
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2242      	movs	r2, #66	; 0x42
 800184a:	2101      	movs	r1, #1
 800184c:	5499      	strb	r1, [r3, r2]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2243      	movs	r2, #67	; 0x43
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2244      	movs	r2, #68	; 0x44
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2245      	movs	r2, #69	; 0x45
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223d      	movs	r2, #61	; 0x3d
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	223d      	movs	r2, #61	; 0x3d
 8001884:	5c9b      	ldrb	r3, [r3, r2]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e02e      	b.n	80018ee <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	223d      	movs	r2, #61	; 0x3d
 8001894:	2102      	movs	r1, #2
 8001896:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <HAL_TIM_Base_Start+0x80>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00a      	beq.n	80018b8 <HAL_TIM_Base_Start+0x40>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d004      	beq.n	80018b8 <HAL_TIM_Base_Start+0x40>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_TIM_Base_Start+0x84>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d111      	bne.n	80018dc <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2207      	movs	r2, #7
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d010      	beq.n	80018ec <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018da:	e007      	b.n	80018ec <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40000400 	.word	0x40000400

08001900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	223c      	movs	r2, #60	; 0x3c
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_TIM_ConfigClockSource+0x18>
 8001914:	2302      	movs	r3, #2
 8001916:	e0b7      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x188>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	223c      	movs	r2, #60	; 0x3c
 800191c:	2101      	movs	r1, #1
 800191e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	223d      	movs	r2, #61	; 0x3d
 8001924:	2102      	movs	r1, #2
 8001926:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2277      	movs	r2, #119	; 0x77
 8001934:	4393      	bics	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <HAL_TIM_ConfigClockSource+0x190>)
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	0192      	lsls	r2, r2, #6
 8001950:	4293      	cmp	r3, r2
 8001952:	d040      	beq.n	80019d6 <HAL_TIM_ConfigClockSource+0xd6>
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	0192      	lsls	r2, r2, #6
 8001958:	4293      	cmp	r3, r2
 800195a:	d900      	bls.n	800195e <HAL_TIM_ConfigClockSource+0x5e>
 800195c:	e088      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	0152      	lsls	r2, r2, #5
 8001962:	4293      	cmp	r3, r2
 8001964:	d100      	bne.n	8001968 <HAL_TIM_ConfigClockSource+0x68>
 8001966:	e085      	b.n	8001a74 <HAL_TIM_ConfigClockSource+0x174>
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0152      	lsls	r2, r2, #5
 800196c:	4293      	cmp	r3, r2
 800196e:	d900      	bls.n	8001972 <HAL_TIM_ConfigClockSource+0x72>
 8001970:	e07e      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 8001972:	2b70      	cmp	r3, #112	; 0x70
 8001974:	d018      	beq.n	80019a8 <HAL_TIM_ConfigClockSource+0xa8>
 8001976:	d900      	bls.n	800197a <HAL_TIM_ConfigClockSource+0x7a>
 8001978:	e07a      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 800197a:	2b60      	cmp	r3, #96	; 0x60
 800197c:	d04f      	beq.n	8001a1e <HAL_TIM_ConfigClockSource+0x11e>
 800197e:	d900      	bls.n	8001982 <HAL_TIM_ConfigClockSource+0x82>
 8001980:	e076      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 8001982:	2b50      	cmp	r3, #80	; 0x50
 8001984:	d03b      	beq.n	80019fe <HAL_TIM_ConfigClockSource+0xfe>
 8001986:	d900      	bls.n	800198a <HAL_TIM_ConfigClockSource+0x8a>
 8001988:	e072      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d057      	beq.n	8001a3e <HAL_TIM_ConfigClockSource+0x13e>
 800198e:	d900      	bls.n	8001992 <HAL_TIM_ConfigClockSource+0x92>
 8001990:	e06e      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 8001992:	2b30      	cmp	r3, #48	; 0x30
 8001994:	d063      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15e>
 8001996:	d86b      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 8001998:	2b20      	cmp	r3, #32
 800199a:	d060      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15e>
 800199c:	d868      	bhi.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d05d      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15e>
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d05b      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80019a6:	e063      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6899      	ldr	r1, [r3, #8]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f000 f95c 	bl	8001c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2277      	movs	r2, #119	; 0x77
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	609a      	str	r2, [r3, #8]
      break;
 80019d4:	e04f      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f000 f945 	bl	8001c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	01c9      	lsls	r1, r1, #7
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
      break;
 80019fc:	e03b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	f000 f8b8 	bl	8001b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2150      	movs	r1, #80	; 0x50
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f912 	bl	8001c40 <TIM_ITRx_SetConfig>
      break;
 8001a1c:	e02b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	f000 f8d6 	bl	8001bdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2160      	movs	r1, #96	; 0x60
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 f902 	bl	8001c40 <TIM_ITRx_SetConfig>
      break;
 8001a3c:	e01b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	f000 f898 	bl	8001b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2140      	movs	r1, #64	; 0x40
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f8f2 	bl	8001c40 <TIM_ITRx_SetConfig>
      break;
 8001a5c:	e00b      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0019      	movs	r1, r3
 8001a68:	0010      	movs	r0, r2
 8001a6a:	f000 f8e9 	bl	8001c40 <TIM_ITRx_SetConfig>
        break;
 8001a6e:	e002      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	e000      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001a74:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	223d      	movs	r2, #61	; 0x3d
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223c      	movs	r2, #60	; 0x3c
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b004      	add	sp, #16
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	ffff00ff 	.word	0xffff00ff

08001a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <TIM_Base_SetConfig+0xd4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d008      	beq.n	8001abe <TIM_Base_SetConfig+0x2a>
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d003      	beq.n	8001abe <TIM_Base_SetConfig+0x2a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <TIM_Base_SetConfig+0xd8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d108      	bne.n	8001ad0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2270      	movs	r2, #112	; 0x70
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <TIM_Base_SetConfig+0xd4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d014      	beq.n	8001b02 <TIM_Base_SetConfig+0x6e>
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d00f      	beq.n	8001b02 <TIM_Base_SetConfig+0x6e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <TIM_Base_SetConfig+0xd8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00b      	beq.n	8001b02 <TIM_Base_SetConfig+0x6e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <TIM_Base_SetConfig+0xdc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <TIM_Base_SetConfig+0x6e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <TIM_Base_SetConfig+0xe0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d003      	beq.n	8001b02 <TIM_Base_SetConfig+0x6e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <TIM_Base_SetConfig+0xe4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d108      	bne.n	8001b14 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <TIM_Base_SetConfig+0xe8>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	4393      	bics	r3, r2
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <TIM_Base_SetConfig+0xd4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <TIM_Base_SetConfig+0xbe>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <TIM_Base_SetConfig+0xe0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d003      	beq.n	8001b52 <TIM_Base_SetConfig+0xbe>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <TIM_Base_SetConfig+0xe4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d103      	bne.n	8001b5a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	615a      	str	r2, [r3, #20]
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40002000 	.word	0x40002000
 8001b74:	40014400 	.word	0x40014400
 8001b78:	40014800 	.word	0x40014800
 8001b7c:	fffffcff 	.word	0xfffffcff

08001b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4393      	bics	r3, r2
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	22f0      	movs	r2, #240	; 0xf0
 8001baa:	4393      	bics	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	220a      	movs	r2, #10
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	621a      	str	r2, [r3, #32]
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2210      	movs	r2, #16
 8001bee:	4393      	bics	r3, r2
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <TIM_TI2_ConfigInputStage+0x60>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	031b      	lsls	r3, r3, #12
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	22a0      	movs	r2, #160	; 0xa0
 8001c18:	4393      	bics	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	621a      	str	r2, [r3, #32]
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b006      	add	sp, #24
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	ffff0fff 	.word	0xffff0fff

08001c40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2270      	movs	r2, #112	; 0x70
 8001c54:	4393      	bics	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <TIM_ETR_SetConfig+0x3c>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	021a      	lsls	r2, r3, #8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b006      	add	sp, #24
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	ffff00ff 	.word	0xffff00ff

08001cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223c      	movs	r2, #60	; 0x3c
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e042      	b.n	8001d52 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	223d      	movs	r2, #61	; 0x3d
 8001cd8:	2102      	movs	r1, #2
 8001cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2270      	movs	r2, #112	; 0x70
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00a      	beq.n	8001d26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	05db      	lsls	r3, r3, #23
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d004      	beq.n	8001d26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10c      	bne.n	8001d40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	223d      	movs	r2, #61	; 0x3d
 8001d44:	2101      	movs	r1, #1
 8001d46:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	223c      	movs	r2, #60	; 0x3c
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40000400 	.word	0x40000400

08001d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e044      	b.n	8001e00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d107      	bne.n	8001d8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2274      	movs	r2, #116	; 0x74
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7fe fc67 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2224      	movs	r2, #36	; 0x24
 8001d92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f8da 	bl	8001f60 <UART_SetConfig>
 8001dac:	0003      	movs	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e024      	b.n	8001e00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f9f7 	bl	80021b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	490d      	ldr	r1, [pc, #52]	; (8001e08 <HAL_UART_Init+0xa4>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	212a      	movs	r1, #42	; 0x2a
 8001de2:	438a      	bics	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fa8f 	bl	800231c <UART_CheckIdleState>
 8001dfe:	0003      	movs	r3, r0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	ffffb7ff 	.word	0xffffb7ff

08001e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	1dbb      	adds	r3, r7, #6
 8001e1a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d000      	beq.n	8001e26 <HAL_UART_Transmit+0x1a>
 8001e24:	e096      	b.n	8001f54 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_UART_Transmit+0x28>
 8001e2c:	1dbb      	adds	r3, r7, #6
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e08e      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	015b      	lsls	r3, r3, #5
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d109      	bne.n	8001e58 <HAL_UART_Transmit+0x4c>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d001      	beq.n	8001e58 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e07e      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2274      	movs	r2, #116	; 0x74
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Transmit+0x5a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e077      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2274      	movs	r2, #116	; 0x74
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	2100      	movs	r1, #0
 8001e74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2221      	movs	r2, #33	; 0x21
 8001e7a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe fd14 	bl	80008a8 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1dba      	adds	r2, r7, #6
 8001e88:	2150      	movs	r1, #80	; 0x50
 8001e8a:	8812      	ldrh	r2, [r2, #0]
 8001e8c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1dba      	adds	r2, r7, #6
 8001e92:	2152      	movs	r1, #82	; 0x52
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	015b      	lsls	r3, r3, #5
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d108      	bne.n	8001eb6 <HAL_UART_Transmit+0xaa>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e003      	b.n	8001ebe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2274      	movs	r2, #116	; 0x74
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001ec6:	e02d      	b.n	8001f24 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	f000 fa69 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e039      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	881a      	ldrh	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	05d2      	lsls	r2, r2, #23
 8001ef2:	0dd2      	lsrs	r2, r2, #23
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	3302      	adds	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	e008      	b.n	8001f12 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2252      	movs	r2, #82	; 0x52
 8001f16:	5a9b      	ldrh	r3, [r3, r2]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2252      	movs	r2, #82	; 0x52
 8001f22:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2252      	movs	r2, #82	; 0x52
 8001f28:	5a9b      	ldrh	r3, [r3, r2]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1cb      	bne.n	8001ec8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	0013      	movs	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	f000 fa35 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e005      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b008      	add	sp, #32
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f68:	231e      	movs	r3, #30
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a84      	ldr	r2, [pc, #528]	; (80021a0 <UART_SetConfig+0x240>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a7f      	ldr	r2, [pc, #508]	; (80021a4 <UART_SetConfig+0x244>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a76      	ldr	r2, [pc, #472]	; (80021a8 <UART_SetConfig+0x248>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fdc:	4b73      	ldr	r3, [pc, #460]	; (80021ac <UART_SetConfig+0x24c>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d00d      	beq.n	8002004 <UART_SetConfig+0xa4>
 8001fe8:	d81b      	bhi.n	8002022 <UART_SetConfig+0xc2>
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d014      	beq.n	8002018 <UART_SetConfig+0xb8>
 8001fee:	d818      	bhi.n	8002022 <UART_SetConfig+0xc2>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <UART_SetConfig+0x9a>
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00a      	beq.n	800200e <UART_SetConfig+0xae>
 8001ff8:	e013      	b.n	8002022 <UART_SetConfig+0xc2>
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e012      	b.n	800202a <UART_SetConfig+0xca>
 8002004:	231f      	movs	r3, #31
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e00d      	b.n	800202a <UART_SetConfig+0xca>
 800200e:	231f      	movs	r3, #31
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2204      	movs	r2, #4
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e008      	b.n	800202a <UART_SetConfig+0xca>
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2208      	movs	r2, #8
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e003      	b.n	800202a <UART_SetConfig+0xca>
 8002022:	231f      	movs	r3, #31
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2210      	movs	r2, #16
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	429a      	cmp	r2, r3
 8002036:	d15d      	bne.n	80020f4 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002038:	231f      	movs	r3, #31
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d015      	beq.n	800206e <UART_SetConfig+0x10e>
 8002042:	dc18      	bgt.n	8002076 <UART_SetConfig+0x116>
 8002044:	2b04      	cmp	r3, #4
 8002046:	d00d      	beq.n	8002064 <UART_SetConfig+0x104>
 8002048:	dc15      	bgt.n	8002076 <UART_SetConfig+0x116>
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <UART_SetConfig+0xf4>
 800204e:	2b02      	cmp	r3, #2
 8002050:	d005      	beq.n	800205e <UART_SetConfig+0xfe>
 8002052:	e010      	b.n	8002076 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002054:	f7ff fadc 	bl	8001610 <HAL_RCC_GetPCLK1Freq>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
        break;
 800205c:	e012      	b.n	8002084 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800205e:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <UART_SetConfig+0x250>)
 8002060:	61bb      	str	r3, [r7, #24]
        break;
 8002062:	e00f      	b.n	8002084 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002064:	f7ff fa66 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 8002068:	0003      	movs	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
        break;
 800206c:	e00a      	b.n	8002084 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	61bb      	str	r3, [r7, #24]
        break;
 8002074:	e006      	b.n	8002084 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800207a:	231e      	movs	r3, #30
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
        break;
 8002082:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d100      	bne.n	800208c <UART_SetConfig+0x12c>
 800208a:	e07b      	b.n	8002184 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	005a      	lsls	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	18d2      	adds	r2, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0019      	movs	r1, r3
 800209e:	0010      	movs	r0, r2
 80020a0:	f7fe f83c 	bl	800011c <__udivsi3>
 80020a4:	0003      	movs	r3, r0
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d91c      	bls.n	80020ea <UART_SetConfig+0x18a>
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d217      	bcs.n	80020ea <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	200e      	movs	r0, #14
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	210f      	movs	r1, #15
 80020c4:	438a      	bics	r2, r1
 80020c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	b299      	uxth	r1, r3
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	183a      	adds	r2, r7, r0
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	183a      	adds	r2, r7, r0
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	e04c      	b.n	8002184 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80020ea:	231e      	movs	r3, #30
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e047      	b.n	8002184 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020f4:	231f      	movs	r3, #31
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d015      	beq.n	800212a <UART_SetConfig+0x1ca>
 80020fe:	dc18      	bgt.n	8002132 <UART_SetConfig+0x1d2>
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00d      	beq.n	8002120 <UART_SetConfig+0x1c0>
 8002104:	dc15      	bgt.n	8002132 <UART_SetConfig+0x1d2>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <UART_SetConfig+0x1b0>
 800210a:	2b02      	cmp	r3, #2
 800210c:	d005      	beq.n	800211a <UART_SetConfig+0x1ba>
 800210e:	e010      	b.n	8002132 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002110:	f7ff fa7e 	bl	8001610 <HAL_RCC_GetPCLK1Freq>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
        break;
 8002118:	e012      	b.n	8002140 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <UART_SetConfig+0x250>)
 800211c:	61bb      	str	r3, [r7, #24]
        break;
 800211e:	e00f      	b.n	8002140 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002120:	f7ff fa08 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
        break;
 8002128:	e00a      	b.n	8002140 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	61bb      	str	r3, [r7, #24]
        break;
 8002130:	e006      	b.n	8002140 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002136:	231e      	movs	r3, #30
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
        break;
 800213e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01e      	beq.n	8002184 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	085a      	lsrs	r2, r3, #1
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	18d2      	adds	r2, r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0019      	movs	r1, r3
 8002156:	0010      	movs	r0, r2
 8002158:	f7fd ffe0 	bl	800011c <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	b29b      	uxth	r3, r3
 8002160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d909      	bls.n	800217c <UART_SetConfig+0x21c>
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	429a      	cmp	r2, r3
 8002170:	d204      	bcs.n	800217c <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e003      	b.n	8002184 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800217c:	231e      	movs	r3, #30
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002190:	231e      	movs	r3, #30
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b008      	add	sp, #32
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	ffff69f3 	.word	0xffff69f3
 80021a4:	ffffcfff 	.word	0xffffcfff
 80021a8:	fffff4ff 	.word	0xfffff4ff
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200

080021b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2201      	movs	r2, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d00b      	beq.n	80021de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a4a      	ldr	r2, [pc, #296]	; (80022f8 <UART_AdvFeatureConfig+0x144>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d00b      	beq.n	8002200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a43      	ldr	r2, [pc, #268]	; (80022fc <UART_AdvFeatureConfig+0x148>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d00b      	beq.n	8002222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a3b      	ldr	r2, [pc, #236]	; (8002300 <UART_AdvFeatureConfig+0x14c>)
 8002212:	4013      	ands	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2208      	movs	r2, #8
 8002228:	4013      	ands	r3, r2
 800222a:	d00b      	beq.n	8002244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <UART_AdvFeatureConfig+0x150>)
 8002234:	4013      	ands	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2210      	movs	r2, #16
 800224a:	4013      	ands	r3, r2
 800224c:	d00b      	beq.n	8002266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <UART_AdvFeatureConfig+0x154>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2220      	movs	r2, #32
 800226c:	4013      	ands	r3, r2
 800226e:	d00b      	beq.n	8002288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <UART_AdvFeatureConfig+0x158>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	4013      	ands	r3, r2
 8002290:	d01d      	beq.n	80022ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <UART_AdvFeatureConfig+0x15c>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	035b      	lsls	r3, r3, #13
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d10b      	bne.n	80022ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <UART_AdvFeatureConfig+0x160>)
 80022be:	4013      	ands	r3, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	4013      	ands	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <UART_AdvFeatureConfig+0x164>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
  }
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	fffdffff 	.word	0xfffdffff
 80022fc:	fffeffff 	.word	0xfffeffff
 8002300:	fffbffff 	.word	0xfffbffff
 8002304:	ffff7fff 	.word	0xffff7fff
 8002308:	ffffefff 	.word	0xffffefff
 800230c:	ffffdfff 	.word	0xffffdfff
 8002310:	ffefffff 	.word	0xffefffff
 8002314:	ff9fffff 	.word	0xff9fffff
 8002318:	fff7ffff 	.word	0xfff7ffff

0800231c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af02      	add	r7, sp, #8
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	2100      	movs	r1, #0
 800232a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800232c:	f7fe fabc 	bl	80008a8 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2208      	movs	r2, #8
 800233c:	4013      	ands	r3, r2
 800233e:	2b08      	cmp	r3, #8
 8002340:	d10c      	bne.n	800235c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	0391      	lsls	r1, r2, #14
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <UART_CheckIdleState+0x8c>)
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	f000 f82c 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d001      	beq.n	800235c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e021      	b.n	80023a0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2204      	movs	r2, #4
 8002364:	4013      	ands	r3, r2
 8002366:	2b04      	cmp	r3, #4
 8002368:	d10c      	bne.n	8002384 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	03d1      	lsls	r1, r2, #15
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <UART_CheckIdleState+0x8c>)
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	f000 f818 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 800237c:	1e03      	subs	r3, r0, #0
 800237e:	d001      	beq.n	8002384 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e00d      	b.n	80023a0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2274      	movs	r2, #116	; 0x74
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	01ffffff 	.word	0x01ffffff

080023ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023bc:	e05e      	b.n	800247c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3301      	adds	r3, #1
 80023c2:	d05b      	beq.n	800247c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe fa70 	bl	80008a8 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <UART_WaitOnFlagUntilTimeout+0x2e>
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11b      	bne.n	8002412 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	492f      	ldr	r1, [pc, #188]	; (80024a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	438a      	bics	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2274      	movs	r2, #116	; 0x74
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e044      	b.n	800249c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	4013      	ands	r3, r2
 800241c:	d02e      	beq.n	800247c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	401a      	ands	r2, r3
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	429a      	cmp	r2, r3
 8002430:	d124      	bne.n	800247c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2280      	movs	r2, #128	; 0x80
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4917      	ldr	r1, [pc, #92]	; (80024a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2101      	movs	r1, #1
 8002458:	438a      	bics	r2, r1
 800245a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	2120      	movs	r1, #32
 800246e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2274      	movs	r2, #116	; 0x74
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e00f      	b.n	800249c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	425a      	negs	r2, r3
 800248c:	4153      	adcs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	001a      	movs	r2, r3
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d091      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	fffffe5f 	.word	0xfffffe5f

080024a8 <__errno>:
 80024a8:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <__errno+0x8>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	4770      	bx	lr
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <__libc_init_array>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	2600      	movs	r6, #0
 80024b8:	4d0c      	ldr	r5, [pc, #48]	; (80024ec <__libc_init_array+0x38>)
 80024ba:	4c0d      	ldr	r4, [pc, #52]	; (80024f0 <__libc_init_array+0x3c>)
 80024bc:	1b64      	subs	r4, r4, r5
 80024be:	10a4      	asrs	r4, r4, #2
 80024c0:	42a6      	cmp	r6, r4
 80024c2:	d109      	bne.n	80024d8 <__libc_init_array+0x24>
 80024c4:	2600      	movs	r6, #0
 80024c6:	f000 fc47 	bl	8002d58 <_init>
 80024ca:	4d0a      	ldr	r5, [pc, #40]	; (80024f4 <__libc_init_array+0x40>)
 80024cc:	4c0a      	ldr	r4, [pc, #40]	; (80024f8 <__libc_init_array+0x44>)
 80024ce:	1b64      	subs	r4, r4, r5
 80024d0:	10a4      	asrs	r4, r4, #2
 80024d2:	42a6      	cmp	r6, r4
 80024d4:	d105      	bne.n	80024e2 <__libc_init_array+0x2e>
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	00b3      	lsls	r3, r6, #2
 80024da:	58eb      	ldr	r3, [r5, r3]
 80024dc:	4798      	blx	r3
 80024de:	3601      	adds	r6, #1
 80024e0:	e7ee      	b.n	80024c0 <__libc_init_array+0xc>
 80024e2:	00b3      	lsls	r3, r6, #2
 80024e4:	58eb      	ldr	r3, [r5, r3]
 80024e6:	4798      	blx	r3
 80024e8:	3601      	adds	r6, #1
 80024ea:	e7f2      	b.n	80024d2 <__libc_init_array+0x1e>
 80024ec:	08002e10 	.word	0x08002e10
 80024f0:	08002e10 	.word	0x08002e10
 80024f4:	08002e10 	.word	0x08002e10
 80024f8:	08002e14 	.word	0x08002e14

080024fc <memset>:
 80024fc:	0003      	movs	r3, r0
 80024fe:	1882      	adds	r2, r0, r2
 8002500:	4293      	cmp	r3, r2
 8002502:	d100      	bne.n	8002506 <memset+0xa>
 8002504:	4770      	bx	lr
 8002506:	7019      	strb	r1, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	e7f9      	b.n	8002500 <memset+0x4>

0800250c <siprintf>:
 800250c:	b40e      	push	{r1, r2, r3}
 800250e:	b500      	push	{lr}
 8002510:	490b      	ldr	r1, [pc, #44]	; (8002540 <siprintf+0x34>)
 8002512:	b09c      	sub	sp, #112	; 0x70
 8002514:	ab1d      	add	r3, sp, #116	; 0x74
 8002516:	9002      	str	r0, [sp, #8]
 8002518:	9006      	str	r0, [sp, #24]
 800251a:	9107      	str	r1, [sp, #28]
 800251c:	9104      	str	r1, [sp, #16]
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <siprintf+0x38>)
 8002520:	4909      	ldr	r1, [pc, #36]	; (8002548 <siprintf+0x3c>)
 8002522:	cb04      	ldmia	r3!, {r2}
 8002524:	9105      	str	r1, [sp, #20]
 8002526:	6800      	ldr	r0, [r0, #0]
 8002528:	a902      	add	r1, sp, #8
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f000 f870 	bl	8002610 <_svfiprintf_r>
 8002530:	2300      	movs	r3, #0
 8002532:	9a02      	ldr	r2, [sp, #8]
 8002534:	7013      	strb	r3, [r2, #0]
 8002536:	b01c      	add	sp, #112	; 0x70
 8002538:	bc08      	pop	{r3}
 800253a:	b003      	add	sp, #12
 800253c:	4718      	bx	r3
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	7fffffff 	.word	0x7fffffff
 8002544:	2000000c 	.word	0x2000000c
 8002548:	ffff0208 	.word	0xffff0208

0800254c <__ssputs_r>:
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	688e      	ldr	r6, [r1, #8]
 8002550:	b085      	sub	sp, #20
 8002552:	0007      	movs	r7, r0
 8002554:	000c      	movs	r4, r1
 8002556:	9203      	str	r2, [sp, #12]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	429e      	cmp	r6, r3
 800255c:	d83c      	bhi.n	80025d8 <__ssputs_r+0x8c>
 800255e:	2390      	movs	r3, #144	; 0x90
 8002560:	898a      	ldrh	r2, [r1, #12]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	421a      	tst	r2, r3
 8002566:	d034      	beq.n	80025d2 <__ssputs_r+0x86>
 8002568:	2503      	movs	r5, #3
 800256a:	6909      	ldr	r1, [r1, #16]
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	1a5b      	subs	r3, r3, r1
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	6963      	ldr	r3, [r4, #20]
 8002574:	9802      	ldr	r0, [sp, #8]
 8002576:	435d      	muls	r5, r3
 8002578:	0feb      	lsrs	r3, r5, #31
 800257a:	195d      	adds	r5, r3, r5
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	106d      	asrs	r5, r5, #1
 8002580:	3301      	adds	r3, #1
 8002582:	181b      	adds	r3, r3, r0
 8002584:	42ab      	cmp	r3, r5
 8002586:	d900      	bls.n	800258a <__ssputs_r+0x3e>
 8002588:	001d      	movs	r5, r3
 800258a:	0553      	lsls	r3, r2, #21
 800258c:	d532      	bpl.n	80025f4 <__ssputs_r+0xa8>
 800258e:	0029      	movs	r1, r5
 8002590:	0038      	movs	r0, r7
 8002592:	f000 fb31 	bl	8002bf8 <_malloc_r>
 8002596:	1e06      	subs	r6, r0, #0
 8002598:	d109      	bne.n	80025ae <__ssputs_r+0x62>
 800259a:	230c      	movs	r3, #12
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	2001      	movs	r0, #1
 80025a2:	89a2      	ldrh	r2, [r4, #12]
 80025a4:	4240      	negs	r0, r0
 80025a6:	4313      	orrs	r3, r2
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	b005      	add	sp, #20
 80025ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ae:	9a02      	ldr	r2, [sp, #8]
 80025b0:	6921      	ldr	r1, [r4, #16]
 80025b2:	f000 faba 	bl	8002b2a <memcpy>
 80025b6:	89a3      	ldrh	r3, [r4, #12]
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <__ssputs_r+0xc0>)
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	4313      	orrs	r3, r2
 80025c0:	81a3      	strh	r3, [r4, #12]
 80025c2:	9b02      	ldr	r3, [sp, #8]
 80025c4:	6126      	str	r6, [r4, #16]
 80025c6:	18f6      	adds	r6, r6, r3
 80025c8:	6026      	str	r6, [r4, #0]
 80025ca:	6165      	str	r5, [r4, #20]
 80025cc:	9e01      	ldr	r6, [sp, #4]
 80025ce:	1aed      	subs	r5, r5, r3
 80025d0:	60a5      	str	r5, [r4, #8]
 80025d2:	9b01      	ldr	r3, [sp, #4]
 80025d4:	429e      	cmp	r6, r3
 80025d6:	d900      	bls.n	80025da <__ssputs_r+0x8e>
 80025d8:	9e01      	ldr	r6, [sp, #4]
 80025da:	0032      	movs	r2, r6
 80025dc:	9903      	ldr	r1, [sp, #12]
 80025de:	6820      	ldr	r0, [r4, #0]
 80025e0:	f000 faac 	bl	8002b3c <memmove>
 80025e4:	68a3      	ldr	r3, [r4, #8]
 80025e6:	2000      	movs	r0, #0
 80025e8:	1b9b      	subs	r3, r3, r6
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	199e      	adds	r6, r3, r6
 80025f0:	6026      	str	r6, [r4, #0]
 80025f2:	e7da      	b.n	80025aa <__ssputs_r+0x5e>
 80025f4:	002a      	movs	r2, r5
 80025f6:	0038      	movs	r0, r7
 80025f8:	f000 fb5c 	bl	8002cb4 <_realloc_r>
 80025fc:	1e06      	subs	r6, r0, #0
 80025fe:	d1e0      	bne.n	80025c2 <__ssputs_r+0x76>
 8002600:	0038      	movs	r0, r7
 8002602:	6921      	ldr	r1, [r4, #16]
 8002604:	f000 faae 	bl	8002b64 <_free_r>
 8002608:	e7c7      	b.n	800259a <__ssputs_r+0x4e>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffb7f 	.word	0xfffffb7f

08002610 <_svfiprintf_r>:
 8002610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002612:	b0a1      	sub	sp, #132	; 0x84
 8002614:	9003      	str	r0, [sp, #12]
 8002616:	001d      	movs	r5, r3
 8002618:	898b      	ldrh	r3, [r1, #12]
 800261a:	000f      	movs	r7, r1
 800261c:	0016      	movs	r6, r2
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	d511      	bpl.n	8002646 <_svfiprintf_r+0x36>
 8002622:	690b      	ldr	r3, [r1, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <_svfiprintf_r+0x36>
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	f000 fae5 	bl	8002bf8 <_malloc_r>
 800262e:	6038      	str	r0, [r7, #0]
 8002630:	6138      	str	r0, [r7, #16]
 8002632:	2800      	cmp	r0, #0
 8002634:	d105      	bne.n	8002642 <_svfiprintf_r+0x32>
 8002636:	230c      	movs	r3, #12
 8002638:	9a03      	ldr	r2, [sp, #12]
 800263a:	3801      	subs	r0, #1
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	b021      	add	sp, #132	; 0x84
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	2340      	movs	r3, #64	; 0x40
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	2300      	movs	r3, #0
 8002648:	ac08      	add	r4, sp, #32
 800264a:	6163      	str	r3, [r4, #20]
 800264c:	3320      	adds	r3, #32
 800264e:	7663      	strb	r3, [r4, #25]
 8002650:	3310      	adds	r3, #16
 8002652:	76a3      	strb	r3, [r4, #26]
 8002654:	9507      	str	r5, [sp, #28]
 8002656:	0035      	movs	r5, r6
 8002658:	782b      	ldrb	r3, [r5, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <_svfiprintf_r+0x52>
 800265e:	2b25      	cmp	r3, #37	; 0x25
 8002660:	d147      	bne.n	80026f2 <_svfiprintf_r+0xe2>
 8002662:	1bab      	subs	r3, r5, r6
 8002664:	9305      	str	r3, [sp, #20]
 8002666:	42b5      	cmp	r5, r6
 8002668:	d00c      	beq.n	8002684 <_svfiprintf_r+0x74>
 800266a:	0032      	movs	r2, r6
 800266c:	0039      	movs	r1, r7
 800266e:	9803      	ldr	r0, [sp, #12]
 8002670:	f7ff ff6c 	bl	800254c <__ssputs_r>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d100      	bne.n	800267a <_svfiprintf_r+0x6a>
 8002678:	e0ae      	b.n	80027d8 <_svfiprintf_r+0x1c8>
 800267a:	6962      	ldr	r2, [r4, #20]
 800267c:	9b05      	ldr	r3, [sp, #20]
 800267e:	4694      	mov	ip, r2
 8002680:	4463      	add	r3, ip
 8002682:	6163      	str	r3, [r4, #20]
 8002684:	782b      	ldrb	r3, [r5, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d100      	bne.n	800268c <_svfiprintf_r+0x7c>
 800268a:	e0a5      	b.n	80027d8 <_svfiprintf_r+0x1c8>
 800268c:	2201      	movs	r2, #1
 800268e:	2300      	movs	r3, #0
 8002690:	4252      	negs	r2, r2
 8002692:	6062      	str	r2, [r4, #4]
 8002694:	a904      	add	r1, sp, #16
 8002696:	3254      	adds	r2, #84	; 0x54
 8002698:	1852      	adds	r2, r2, r1
 800269a:	1c6e      	adds	r6, r5, #1
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	60e3      	str	r3, [r4, #12]
 80026a0:	60a3      	str	r3, [r4, #8]
 80026a2:	7013      	strb	r3, [r2, #0]
 80026a4:	65a3      	str	r3, [r4, #88]	; 0x58
 80026a6:	2205      	movs	r2, #5
 80026a8:	7831      	ldrb	r1, [r6, #0]
 80026aa:	4854      	ldr	r0, [pc, #336]	; (80027fc <_svfiprintf_r+0x1ec>)
 80026ac:	f000 fa32 	bl	8002b14 <memchr>
 80026b0:	1c75      	adds	r5, r6, #1
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d11f      	bne.n	80026f6 <_svfiprintf_r+0xe6>
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	06d3      	lsls	r3, r2, #27
 80026ba:	d504      	bpl.n	80026c6 <_svfiprintf_r+0xb6>
 80026bc:	2353      	movs	r3, #83	; 0x53
 80026be:	a904      	add	r1, sp, #16
 80026c0:	185b      	adds	r3, r3, r1
 80026c2:	2120      	movs	r1, #32
 80026c4:	7019      	strb	r1, [r3, #0]
 80026c6:	0713      	lsls	r3, r2, #28
 80026c8:	d504      	bpl.n	80026d4 <_svfiprintf_r+0xc4>
 80026ca:	2353      	movs	r3, #83	; 0x53
 80026cc:	a904      	add	r1, sp, #16
 80026ce:	185b      	adds	r3, r3, r1
 80026d0:	212b      	movs	r1, #43	; 0x2b
 80026d2:	7019      	strb	r1, [r3, #0]
 80026d4:	7833      	ldrb	r3, [r6, #0]
 80026d6:	2b2a      	cmp	r3, #42	; 0x2a
 80026d8:	d016      	beq.n	8002708 <_svfiprintf_r+0xf8>
 80026da:	0035      	movs	r5, r6
 80026dc:	2100      	movs	r1, #0
 80026de:	200a      	movs	r0, #10
 80026e0:	68e3      	ldr	r3, [r4, #12]
 80026e2:	782a      	ldrb	r2, [r5, #0]
 80026e4:	1c6e      	adds	r6, r5, #1
 80026e6:	3a30      	subs	r2, #48	; 0x30
 80026e8:	2a09      	cmp	r2, #9
 80026ea:	d94e      	bls.n	800278a <_svfiprintf_r+0x17a>
 80026ec:	2900      	cmp	r1, #0
 80026ee:	d111      	bne.n	8002714 <_svfiprintf_r+0x104>
 80026f0:	e017      	b.n	8002722 <_svfiprintf_r+0x112>
 80026f2:	3501      	adds	r5, #1
 80026f4:	e7b0      	b.n	8002658 <_svfiprintf_r+0x48>
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <_svfiprintf_r+0x1ec>)
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	1ac0      	subs	r0, r0, r3
 80026fc:	2301      	movs	r3, #1
 80026fe:	4083      	lsls	r3, r0
 8002700:	4313      	orrs	r3, r2
 8002702:	002e      	movs	r6, r5
 8002704:	6023      	str	r3, [r4, #0]
 8002706:	e7ce      	b.n	80026a6 <_svfiprintf_r+0x96>
 8002708:	9b07      	ldr	r3, [sp, #28]
 800270a:	1d19      	adds	r1, r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	9107      	str	r1, [sp, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db01      	blt.n	8002718 <_svfiprintf_r+0x108>
 8002714:	930b      	str	r3, [sp, #44]	; 0x2c
 8002716:	e004      	b.n	8002722 <_svfiprintf_r+0x112>
 8002718:	425b      	negs	r3, r3
 800271a:	60e3      	str	r3, [r4, #12]
 800271c:	2302      	movs	r3, #2
 800271e:	4313      	orrs	r3, r2
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	782b      	ldrb	r3, [r5, #0]
 8002724:	2b2e      	cmp	r3, #46	; 0x2e
 8002726:	d10a      	bne.n	800273e <_svfiprintf_r+0x12e>
 8002728:	786b      	ldrb	r3, [r5, #1]
 800272a:	2b2a      	cmp	r3, #42	; 0x2a
 800272c:	d135      	bne.n	800279a <_svfiprintf_r+0x18a>
 800272e:	9b07      	ldr	r3, [sp, #28]
 8002730:	3502      	adds	r5, #2
 8002732:	1d1a      	adds	r2, r3, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	9207      	str	r2, [sp, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db2b      	blt.n	8002794 <_svfiprintf_r+0x184>
 800273c:	9309      	str	r3, [sp, #36]	; 0x24
 800273e:	4e30      	ldr	r6, [pc, #192]	; (8002800 <_svfiprintf_r+0x1f0>)
 8002740:	2203      	movs	r2, #3
 8002742:	0030      	movs	r0, r6
 8002744:	7829      	ldrb	r1, [r5, #0]
 8002746:	f000 f9e5 	bl	8002b14 <memchr>
 800274a:	2800      	cmp	r0, #0
 800274c:	d006      	beq.n	800275c <_svfiprintf_r+0x14c>
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	1b80      	subs	r0, r0, r6
 8002752:	4083      	lsls	r3, r0
 8002754:	6822      	ldr	r2, [r4, #0]
 8002756:	3501      	adds	r5, #1
 8002758:	4313      	orrs	r3, r2
 800275a:	6023      	str	r3, [r4, #0]
 800275c:	7829      	ldrb	r1, [r5, #0]
 800275e:	2206      	movs	r2, #6
 8002760:	4828      	ldr	r0, [pc, #160]	; (8002804 <_svfiprintf_r+0x1f4>)
 8002762:	1c6e      	adds	r6, r5, #1
 8002764:	7621      	strb	r1, [r4, #24]
 8002766:	f000 f9d5 	bl	8002b14 <memchr>
 800276a:	2800      	cmp	r0, #0
 800276c:	d03c      	beq.n	80027e8 <_svfiprintf_r+0x1d8>
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <_svfiprintf_r+0x1f8>)
 8002770:	2b00      	cmp	r3, #0
 8002772:	d125      	bne.n	80027c0 <_svfiprintf_r+0x1b0>
 8002774:	2207      	movs	r2, #7
 8002776:	9b07      	ldr	r3, [sp, #28]
 8002778:	3307      	adds	r3, #7
 800277a:	4393      	bics	r3, r2
 800277c:	3308      	adds	r3, #8
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	6963      	ldr	r3, [r4, #20]
 8002782:	9a04      	ldr	r2, [sp, #16]
 8002784:	189b      	adds	r3, r3, r2
 8002786:	6163      	str	r3, [r4, #20]
 8002788:	e765      	b.n	8002656 <_svfiprintf_r+0x46>
 800278a:	4343      	muls	r3, r0
 800278c:	0035      	movs	r5, r6
 800278e:	2101      	movs	r1, #1
 8002790:	189b      	adds	r3, r3, r2
 8002792:	e7a6      	b.n	80026e2 <_svfiprintf_r+0xd2>
 8002794:	2301      	movs	r3, #1
 8002796:	425b      	negs	r3, r3
 8002798:	e7d0      	b.n	800273c <_svfiprintf_r+0x12c>
 800279a:	2300      	movs	r3, #0
 800279c:	200a      	movs	r0, #10
 800279e:	001a      	movs	r2, r3
 80027a0:	3501      	adds	r5, #1
 80027a2:	6063      	str	r3, [r4, #4]
 80027a4:	7829      	ldrb	r1, [r5, #0]
 80027a6:	1c6e      	adds	r6, r5, #1
 80027a8:	3930      	subs	r1, #48	; 0x30
 80027aa:	2909      	cmp	r1, #9
 80027ac:	d903      	bls.n	80027b6 <_svfiprintf_r+0x1a6>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0c5      	beq.n	800273e <_svfiprintf_r+0x12e>
 80027b2:	9209      	str	r2, [sp, #36]	; 0x24
 80027b4:	e7c3      	b.n	800273e <_svfiprintf_r+0x12e>
 80027b6:	4342      	muls	r2, r0
 80027b8:	0035      	movs	r5, r6
 80027ba:	2301      	movs	r3, #1
 80027bc:	1852      	adds	r2, r2, r1
 80027be:	e7f1      	b.n	80027a4 <_svfiprintf_r+0x194>
 80027c0:	ab07      	add	r3, sp, #28
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	003a      	movs	r2, r7
 80027c6:	0021      	movs	r1, r4
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <_svfiprintf_r+0x1fc>)
 80027ca:	9803      	ldr	r0, [sp, #12]
 80027cc:	e000      	b.n	80027d0 <_svfiprintf_r+0x1c0>
 80027ce:	bf00      	nop
 80027d0:	9004      	str	r0, [sp, #16]
 80027d2:	9b04      	ldr	r3, [sp, #16]
 80027d4:	3301      	adds	r3, #1
 80027d6:	d1d3      	bne.n	8002780 <_svfiprintf_r+0x170>
 80027d8:	89bb      	ldrh	r3, [r7, #12]
 80027da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80027dc:	065b      	lsls	r3, r3, #25
 80027de:	d400      	bmi.n	80027e2 <_svfiprintf_r+0x1d2>
 80027e0:	e72d      	b.n	800263e <_svfiprintf_r+0x2e>
 80027e2:	2001      	movs	r0, #1
 80027e4:	4240      	negs	r0, r0
 80027e6:	e72a      	b.n	800263e <_svfiprintf_r+0x2e>
 80027e8:	ab07      	add	r3, sp, #28
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	003a      	movs	r2, r7
 80027ee:	0021      	movs	r1, r4
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <_svfiprintf_r+0x1fc>)
 80027f2:	9803      	ldr	r0, [sp, #12]
 80027f4:	f000 f87c 	bl	80028f0 <_printf_i>
 80027f8:	e7ea      	b.n	80027d0 <_svfiprintf_r+0x1c0>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	08002ddc 	.word	0x08002ddc
 8002800:	08002de2 	.word	0x08002de2
 8002804:	08002de6 	.word	0x08002de6
 8002808:	00000000 	.word	0x00000000
 800280c:	0800254d 	.word	0x0800254d

08002810 <_printf_common>:
 8002810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002812:	0015      	movs	r5, r2
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	688a      	ldr	r2, [r1, #8]
 8002818:	690b      	ldr	r3, [r1, #16]
 800281a:	000c      	movs	r4, r1
 800281c:	9000      	str	r0, [sp, #0]
 800281e:	4293      	cmp	r3, r2
 8002820:	da00      	bge.n	8002824 <_printf_common+0x14>
 8002822:	0013      	movs	r3, r2
 8002824:	0022      	movs	r2, r4
 8002826:	602b      	str	r3, [r5, #0]
 8002828:	3243      	adds	r2, #67	; 0x43
 800282a:	7812      	ldrb	r2, [r2, #0]
 800282c:	2a00      	cmp	r2, #0
 800282e:	d001      	beq.n	8002834 <_printf_common+0x24>
 8002830:	3301      	adds	r3, #1
 8002832:	602b      	str	r3, [r5, #0]
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	d502      	bpl.n	8002840 <_printf_common+0x30>
 800283a:	682b      	ldr	r3, [r5, #0]
 800283c:	3302      	adds	r3, #2
 800283e:	602b      	str	r3, [r5, #0]
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	2306      	movs	r3, #6
 8002844:	0017      	movs	r7, r2
 8002846:	401f      	ands	r7, r3
 8002848:	421a      	tst	r2, r3
 800284a:	d027      	beq.n	800289c <_printf_common+0x8c>
 800284c:	0023      	movs	r3, r4
 800284e:	3343      	adds	r3, #67	; 0x43
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	4193      	sbcs	r3, r2
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	0692      	lsls	r2, r2, #26
 800285a:	d430      	bmi.n	80028be <_printf_common+0xae>
 800285c:	0022      	movs	r2, r4
 800285e:	9901      	ldr	r1, [sp, #4]
 8002860:	9800      	ldr	r0, [sp, #0]
 8002862:	9e08      	ldr	r6, [sp, #32]
 8002864:	3243      	adds	r2, #67	; 0x43
 8002866:	47b0      	blx	r6
 8002868:	1c43      	adds	r3, r0, #1
 800286a:	d025      	beq.n	80028b8 <_printf_common+0xa8>
 800286c:	2306      	movs	r3, #6
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	682a      	ldr	r2, [r5, #0]
 8002872:	68e1      	ldr	r1, [r4, #12]
 8002874:	2500      	movs	r5, #0
 8002876:	4003      	ands	r3, r0
 8002878:	2b04      	cmp	r3, #4
 800287a:	d103      	bne.n	8002884 <_printf_common+0x74>
 800287c:	1a8d      	subs	r5, r1, r2
 800287e:	43eb      	mvns	r3, r5
 8002880:	17db      	asrs	r3, r3, #31
 8002882:	401d      	ands	r5, r3
 8002884:	68a3      	ldr	r3, [r4, #8]
 8002886:	6922      	ldr	r2, [r4, #16]
 8002888:	4293      	cmp	r3, r2
 800288a:	dd01      	ble.n	8002890 <_printf_common+0x80>
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	18ed      	adds	r5, r5, r3
 8002890:	2700      	movs	r7, #0
 8002892:	42bd      	cmp	r5, r7
 8002894:	d120      	bne.n	80028d8 <_printf_common+0xc8>
 8002896:	2000      	movs	r0, #0
 8002898:	e010      	b.n	80028bc <_printf_common+0xac>
 800289a:	3701      	adds	r7, #1
 800289c:	68e3      	ldr	r3, [r4, #12]
 800289e:	682a      	ldr	r2, [r5, #0]
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	42bb      	cmp	r3, r7
 80028a4:	ddd2      	ble.n	800284c <_printf_common+0x3c>
 80028a6:	0022      	movs	r2, r4
 80028a8:	2301      	movs	r3, #1
 80028aa:	9901      	ldr	r1, [sp, #4]
 80028ac:	9800      	ldr	r0, [sp, #0]
 80028ae:	9e08      	ldr	r6, [sp, #32]
 80028b0:	3219      	adds	r2, #25
 80028b2:	47b0      	blx	r6
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	d1f0      	bne.n	800289a <_printf_common+0x8a>
 80028b8:	2001      	movs	r0, #1
 80028ba:	4240      	negs	r0, r0
 80028bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028be:	2030      	movs	r0, #48	; 0x30
 80028c0:	18e1      	adds	r1, r4, r3
 80028c2:	3143      	adds	r1, #67	; 0x43
 80028c4:	7008      	strb	r0, [r1, #0]
 80028c6:	0021      	movs	r1, r4
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	3145      	adds	r1, #69	; 0x45
 80028cc:	7809      	ldrb	r1, [r1, #0]
 80028ce:	18a2      	adds	r2, r4, r2
 80028d0:	3243      	adds	r2, #67	; 0x43
 80028d2:	3302      	adds	r3, #2
 80028d4:	7011      	strb	r1, [r2, #0]
 80028d6:	e7c1      	b.n	800285c <_printf_common+0x4c>
 80028d8:	0022      	movs	r2, r4
 80028da:	2301      	movs	r3, #1
 80028dc:	9901      	ldr	r1, [sp, #4]
 80028de:	9800      	ldr	r0, [sp, #0]
 80028e0:	9e08      	ldr	r6, [sp, #32]
 80028e2:	321a      	adds	r2, #26
 80028e4:	47b0      	blx	r6
 80028e6:	1c43      	adds	r3, r0, #1
 80028e8:	d0e6      	beq.n	80028b8 <_printf_common+0xa8>
 80028ea:	3701      	adds	r7, #1
 80028ec:	e7d1      	b.n	8002892 <_printf_common+0x82>
	...

080028f0 <_printf_i>:
 80028f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	9206      	str	r2, [sp, #24]
 80028f6:	000a      	movs	r2, r1
 80028f8:	3243      	adds	r2, #67	; 0x43
 80028fa:	9307      	str	r3, [sp, #28]
 80028fc:	9005      	str	r0, [sp, #20]
 80028fe:	9204      	str	r2, [sp, #16]
 8002900:	7e0a      	ldrb	r2, [r1, #24]
 8002902:	000c      	movs	r4, r1
 8002904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002906:	2a78      	cmp	r2, #120	; 0x78
 8002908:	d806      	bhi.n	8002918 <_printf_i+0x28>
 800290a:	2a62      	cmp	r2, #98	; 0x62
 800290c:	d808      	bhi.n	8002920 <_printf_i+0x30>
 800290e:	2a00      	cmp	r2, #0
 8002910:	d100      	bne.n	8002914 <_printf_i+0x24>
 8002912:	e0c0      	b.n	8002a96 <_printf_i+0x1a6>
 8002914:	2a58      	cmp	r2, #88	; 0x58
 8002916:	d052      	beq.n	80029be <_printf_i+0xce>
 8002918:	0026      	movs	r6, r4
 800291a:	3642      	adds	r6, #66	; 0x42
 800291c:	7032      	strb	r2, [r6, #0]
 800291e:	e022      	b.n	8002966 <_printf_i+0x76>
 8002920:	0010      	movs	r0, r2
 8002922:	3863      	subs	r0, #99	; 0x63
 8002924:	2815      	cmp	r0, #21
 8002926:	d8f7      	bhi.n	8002918 <_printf_i+0x28>
 8002928:	f7fd fbee 	bl	8000108 <__gnu_thumb1_case_shi>
 800292c:	001f0016 	.word	0x001f0016
 8002930:	fff6fff6 	.word	0xfff6fff6
 8002934:	fff6fff6 	.word	0xfff6fff6
 8002938:	fff6001f 	.word	0xfff6001f
 800293c:	fff6fff6 	.word	0xfff6fff6
 8002940:	00a8fff6 	.word	0x00a8fff6
 8002944:	009a0036 	.word	0x009a0036
 8002948:	fff6fff6 	.word	0xfff6fff6
 800294c:	fff600b9 	.word	0xfff600b9
 8002950:	fff60036 	.word	0xfff60036
 8002954:	009efff6 	.word	0x009efff6
 8002958:	0026      	movs	r6, r4
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	3642      	adds	r6, #66	; 0x42
 800295e:	1d11      	adds	r1, r2, #4
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	7033      	strb	r3, [r6, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	e0a7      	b.n	8002aba <_printf_i+0x1ca>
 800296a:	6808      	ldr	r0, [r1, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	1d0a      	adds	r2, r1, #4
 8002970:	0605      	lsls	r5, r0, #24
 8002972:	d50b      	bpl.n	800298c <_printf_i+0x9c>
 8002974:	680d      	ldr	r5, [r1, #0]
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	2d00      	cmp	r5, #0
 800297a:	da03      	bge.n	8002984 <_printf_i+0x94>
 800297c:	232d      	movs	r3, #45	; 0x2d
 800297e:	9a04      	ldr	r2, [sp, #16]
 8002980:	426d      	negs	r5, r5
 8002982:	7013      	strb	r3, [r2, #0]
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <_printf_i+0x21c>)
 8002986:	270a      	movs	r7, #10
 8002988:	9303      	str	r3, [sp, #12]
 800298a:	e032      	b.n	80029f2 <_printf_i+0x102>
 800298c:	680d      	ldr	r5, [r1, #0]
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	0641      	lsls	r1, r0, #25
 8002992:	d5f1      	bpl.n	8002978 <_printf_i+0x88>
 8002994:	b22d      	sxth	r5, r5
 8002996:	e7ef      	b.n	8002978 <_printf_i+0x88>
 8002998:	680d      	ldr	r5, [r1, #0]
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	1d08      	adds	r0, r1, #4
 800299e:	6018      	str	r0, [r3, #0]
 80029a0:	062e      	lsls	r6, r5, #24
 80029a2:	d501      	bpl.n	80029a8 <_printf_i+0xb8>
 80029a4:	680d      	ldr	r5, [r1, #0]
 80029a6:	e003      	b.n	80029b0 <_printf_i+0xc0>
 80029a8:	066d      	lsls	r5, r5, #25
 80029aa:	d5fb      	bpl.n	80029a4 <_printf_i+0xb4>
 80029ac:	680d      	ldr	r5, [r1, #0]
 80029ae:	b2ad      	uxth	r5, r5
 80029b0:	4b56      	ldr	r3, [pc, #344]	; (8002b0c <_printf_i+0x21c>)
 80029b2:	270a      	movs	r7, #10
 80029b4:	9303      	str	r3, [sp, #12]
 80029b6:	2a6f      	cmp	r2, #111	; 0x6f
 80029b8:	d117      	bne.n	80029ea <_printf_i+0xfa>
 80029ba:	2708      	movs	r7, #8
 80029bc:	e015      	b.n	80029ea <_printf_i+0xfa>
 80029be:	3145      	adds	r1, #69	; 0x45
 80029c0:	700a      	strb	r2, [r1, #0]
 80029c2:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <_printf_i+0x21c>)
 80029c4:	9203      	str	r2, [sp, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	6821      	ldr	r1, [r4, #0]
 80029ca:	ca20      	ldmia	r2!, {r5}
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	0608      	lsls	r0, r1, #24
 80029d0:	d550      	bpl.n	8002a74 <_printf_i+0x184>
 80029d2:	07cb      	lsls	r3, r1, #31
 80029d4:	d502      	bpl.n	80029dc <_printf_i+0xec>
 80029d6:	2320      	movs	r3, #32
 80029d8:	4319      	orrs	r1, r3
 80029da:	6021      	str	r1, [r4, #0]
 80029dc:	2710      	movs	r7, #16
 80029de:	2d00      	cmp	r5, #0
 80029e0:	d103      	bne.n	80029ea <_printf_i+0xfa>
 80029e2:	2320      	movs	r3, #32
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	439a      	bics	r2, r3
 80029e8:	6022      	str	r2, [r4, #0]
 80029ea:	0023      	movs	r3, r4
 80029ec:	2200      	movs	r2, #0
 80029ee:	3343      	adds	r3, #67	; 0x43
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db03      	blt.n	8002a02 <_printf_i+0x112>
 80029fa:	2204      	movs	r2, #4
 80029fc:	6821      	ldr	r1, [r4, #0]
 80029fe:	4391      	bics	r1, r2
 8002a00:	6021      	str	r1, [r4, #0]
 8002a02:	2d00      	cmp	r5, #0
 8002a04:	d102      	bne.n	8002a0c <_printf_i+0x11c>
 8002a06:	9e04      	ldr	r6, [sp, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <_printf_i+0x136>
 8002a0c:	9e04      	ldr	r6, [sp, #16]
 8002a0e:	0028      	movs	r0, r5
 8002a10:	0039      	movs	r1, r7
 8002a12:	f7fd fc09 	bl	8000228 <__aeabi_uidivmod>
 8002a16:	9b03      	ldr	r3, [sp, #12]
 8002a18:	3e01      	subs	r6, #1
 8002a1a:	5c5b      	ldrb	r3, [r3, r1]
 8002a1c:	7033      	strb	r3, [r6, #0]
 8002a1e:	002b      	movs	r3, r5
 8002a20:	0005      	movs	r5, r0
 8002a22:	429f      	cmp	r7, r3
 8002a24:	d9f3      	bls.n	8002a0e <_printf_i+0x11e>
 8002a26:	2f08      	cmp	r7, #8
 8002a28:	d109      	bne.n	8002a3e <_printf_i+0x14e>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	07db      	lsls	r3, r3, #31
 8002a2e:	d506      	bpl.n	8002a3e <_printf_i+0x14e>
 8002a30:	6863      	ldr	r3, [r4, #4]
 8002a32:	6922      	ldr	r2, [r4, #16]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	dc02      	bgt.n	8002a3e <_printf_i+0x14e>
 8002a38:	2330      	movs	r3, #48	; 0x30
 8002a3a:	3e01      	subs	r6, #1
 8002a3c:	7033      	strb	r3, [r6, #0]
 8002a3e:	9b04      	ldr	r3, [sp, #16]
 8002a40:	1b9b      	subs	r3, r3, r6
 8002a42:	6123      	str	r3, [r4, #16]
 8002a44:	9b07      	ldr	r3, [sp, #28]
 8002a46:	0021      	movs	r1, r4
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	9805      	ldr	r0, [sp, #20]
 8002a4c:	9b06      	ldr	r3, [sp, #24]
 8002a4e:	aa09      	add	r2, sp, #36	; 0x24
 8002a50:	f7ff fede 	bl	8002810 <_printf_common>
 8002a54:	1c43      	adds	r3, r0, #1
 8002a56:	d135      	bne.n	8002ac4 <_printf_i+0x1d4>
 8002a58:	2001      	movs	r0, #1
 8002a5a:	4240      	negs	r0, r0
 8002a5c:	b00b      	add	sp, #44	; 0x2c
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a60:	2220      	movs	r2, #32
 8002a62:	6809      	ldr	r1, [r1, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	6022      	str	r2, [r4, #0]
 8002a68:	0022      	movs	r2, r4
 8002a6a:	2178      	movs	r1, #120	; 0x78
 8002a6c:	3245      	adds	r2, #69	; 0x45
 8002a6e:	7011      	strb	r1, [r2, #0]
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <_printf_i+0x220>)
 8002a72:	e7a7      	b.n	80029c4 <_printf_i+0xd4>
 8002a74:	0648      	lsls	r0, r1, #25
 8002a76:	d5ac      	bpl.n	80029d2 <_printf_i+0xe2>
 8002a78:	b2ad      	uxth	r5, r5
 8002a7a:	e7aa      	b.n	80029d2 <_printf_i+0xe2>
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	680d      	ldr	r5, [r1, #0]
 8002a80:	1d10      	adds	r0, r2, #4
 8002a82:	6949      	ldr	r1, [r1, #20]
 8002a84:	6018      	str	r0, [r3, #0]
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	062e      	lsls	r6, r5, #24
 8002a8a:	d501      	bpl.n	8002a90 <_printf_i+0x1a0>
 8002a8c:	6019      	str	r1, [r3, #0]
 8002a8e:	e002      	b.n	8002a96 <_printf_i+0x1a6>
 8002a90:	066d      	lsls	r5, r5, #25
 8002a92:	d5fb      	bpl.n	8002a8c <_printf_i+0x19c>
 8002a94:	8019      	strh	r1, [r3, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9e04      	ldr	r6, [sp, #16]
 8002a9a:	6123      	str	r3, [r4, #16]
 8002a9c:	e7d2      	b.n	8002a44 <_printf_i+0x154>
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	1d11      	adds	r1, r2, #4
 8002aa2:	6019      	str	r1, [r3, #0]
 8002aa4:	6816      	ldr	r6, [r2, #0]
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	0030      	movs	r0, r6
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	f000 f832 	bl	8002b14 <memchr>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <_printf_i+0x1c8>
 8002ab4:	1b80      	subs	r0, r0, r6
 8002ab6:	6060      	str	r0, [r4, #4]
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	6123      	str	r3, [r4, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9a04      	ldr	r2, [sp, #16]
 8002ac0:	7013      	strb	r3, [r2, #0]
 8002ac2:	e7bf      	b.n	8002a44 <_printf_i+0x154>
 8002ac4:	6923      	ldr	r3, [r4, #16]
 8002ac6:	0032      	movs	r2, r6
 8002ac8:	9906      	ldr	r1, [sp, #24]
 8002aca:	9805      	ldr	r0, [sp, #20]
 8002acc:	9d07      	ldr	r5, [sp, #28]
 8002ace:	47a8      	blx	r5
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d0c1      	beq.n	8002a58 <_printf_i+0x168>
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	079b      	lsls	r3, r3, #30
 8002ad8:	d415      	bmi.n	8002b06 <_printf_i+0x216>
 8002ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002adc:	68e0      	ldr	r0, [r4, #12]
 8002ade:	4298      	cmp	r0, r3
 8002ae0:	dabc      	bge.n	8002a5c <_printf_i+0x16c>
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	e7ba      	b.n	8002a5c <_printf_i+0x16c>
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	2301      	movs	r3, #1
 8002aea:	9906      	ldr	r1, [sp, #24]
 8002aec:	9805      	ldr	r0, [sp, #20]
 8002aee:	9e07      	ldr	r6, [sp, #28]
 8002af0:	3219      	adds	r2, #25
 8002af2:	47b0      	blx	r6
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d0af      	beq.n	8002a58 <_printf_i+0x168>
 8002af8:	3501      	adds	r5, #1
 8002afa:	68e3      	ldr	r3, [r4, #12]
 8002afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	42ab      	cmp	r3, r5
 8002b02:	dcf0      	bgt.n	8002ae6 <_printf_i+0x1f6>
 8002b04:	e7e9      	b.n	8002ada <_printf_i+0x1ea>
 8002b06:	2500      	movs	r5, #0
 8002b08:	e7f7      	b.n	8002afa <_printf_i+0x20a>
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	08002ded 	.word	0x08002ded
 8002b10:	08002dfe 	.word	0x08002dfe

08002b14 <memchr>:
 8002b14:	b2c9      	uxtb	r1, r1
 8002b16:	1882      	adds	r2, r0, r2
 8002b18:	4290      	cmp	r0, r2
 8002b1a:	d101      	bne.n	8002b20 <memchr+0xc>
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	4770      	bx	lr
 8002b20:	7803      	ldrb	r3, [r0, #0]
 8002b22:	428b      	cmp	r3, r1
 8002b24:	d0fb      	beq.n	8002b1e <memchr+0xa>
 8002b26:	3001      	adds	r0, #1
 8002b28:	e7f6      	b.n	8002b18 <memchr+0x4>

08002b2a <memcpy>:
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d100      	bne.n	8002b34 <memcpy+0xa>
 8002b32:	bd10      	pop	{r4, pc}
 8002b34:	5ccc      	ldrb	r4, [r1, r3]
 8002b36:	54c4      	strb	r4, [r0, r3]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	e7f8      	b.n	8002b2e <memcpy+0x4>

08002b3c <memmove>:
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	4288      	cmp	r0, r1
 8002b40:	d902      	bls.n	8002b48 <memmove+0xc>
 8002b42:	188b      	adds	r3, r1, r2
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d303      	bcc.n	8002b50 <memmove+0x14>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e007      	b.n	8002b5c <memmove+0x20>
 8002b4c:	5c8b      	ldrb	r3, [r1, r2]
 8002b4e:	5483      	strb	r3, [r0, r2]
 8002b50:	3a01      	subs	r2, #1
 8002b52:	d2fb      	bcs.n	8002b4c <memmove+0x10>
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	5ccc      	ldrb	r4, [r1, r3]
 8002b58:	54c4      	strb	r4, [r0, r3]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1fa      	bne.n	8002b56 <memmove+0x1a>
 8002b60:	e7f8      	b.n	8002b54 <memmove+0x18>
	...

08002b64 <_free_r>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	0005      	movs	r5, r0
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	d010      	beq.n	8002b8e <_free_r+0x2a>
 8002b6c:	1f0c      	subs	r4, r1, #4
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	da00      	bge.n	8002b76 <_free_r+0x12>
 8002b74:	18e4      	adds	r4, r4, r3
 8002b76:	0028      	movs	r0, r5
 8002b78:	f000 f8d4 	bl	8002d24 <__malloc_lock>
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <_free_r+0x90>)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <_free_r+0x2c>
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	6014      	str	r4, [r2, #0]
 8002b88:	0028      	movs	r0, r5
 8002b8a:	f000 f8d3 	bl	8002d34 <__malloc_unlock>
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	42a3      	cmp	r3, r4
 8002b92:	d908      	bls.n	8002ba6 <_free_r+0x42>
 8002b94:	6821      	ldr	r1, [r4, #0]
 8002b96:	1860      	adds	r0, r4, r1
 8002b98:	4283      	cmp	r3, r0
 8002b9a:	d1f3      	bne.n	8002b84 <_free_r+0x20>
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	1841      	adds	r1, r0, r1
 8002ba2:	6021      	str	r1, [r4, #0]
 8002ba4:	e7ee      	b.n	8002b84 <_free_r+0x20>
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_free_r+0x4e>
 8002bae:	42a3      	cmp	r3, r4
 8002bb0:	d9f9      	bls.n	8002ba6 <_free_r+0x42>
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	1850      	adds	r0, r2, r1
 8002bb6:	42a0      	cmp	r0, r4
 8002bb8:	d10b      	bne.n	8002bd2 <_free_r+0x6e>
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	1809      	adds	r1, r1, r0
 8002bbe:	1850      	adds	r0, r2, r1
 8002bc0:	6011      	str	r1, [r2, #0]
 8002bc2:	4283      	cmp	r3, r0
 8002bc4:	d1e0      	bne.n	8002b88 <_free_r+0x24>
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	1841      	adds	r1, r0, r1
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	6053      	str	r3, [r2, #4]
 8002bd0:	e7da      	b.n	8002b88 <_free_r+0x24>
 8002bd2:	42a0      	cmp	r0, r4
 8002bd4:	d902      	bls.n	8002bdc <_free_r+0x78>
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	e7d5      	b.n	8002b88 <_free_r+0x24>
 8002bdc:	6821      	ldr	r1, [r4, #0]
 8002bde:	1860      	adds	r0, r4, r1
 8002be0:	4283      	cmp	r3, r0
 8002be2:	d103      	bne.n	8002bec <_free_r+0x88>
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	1841      	adds	r1, r0, r1
 8002bea:	6021      	str	r1, [r4, #0]
 8002bec:	6063      	str	r3, [r4, #4]
 8002bee:	6054      	str	r4, [r2, #4]
 8002bf0:	e7ca      	b.n	8002b88 <_free_r+0x24>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	20000090 	.word	0x20000090

08002bf8 <_malloc_r>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	1ccd      	adds	r5, r1, #3
 8002bfe:	439d      	bics	r5, r3
 8002c00:	3508      	adds	r5, #8
 8002c02:	0006      	movs	r6, r0
 8002c04:	2d0c      	cmp	r5, #12
 8002c06:	d21f      	bcs.n	8002c48 <_malloc_r+0x50>
 8002c08:	250c      	movs	r5, #12
 8002c0a:	42a9      	cmp	r1, r5
 8002c0c:	d81e      	bhi.n	8002c4c <_malloc_r+0x54>
 8002c0e:	0030      	movs	r0, r6
 8002c10:	f000 f888 	bl	8002d24 <__malloc_lock>
 8002c14:	4925      	ldr	r1, [pc, #148]	; (8002cac <_malloc_r+0xb4>)
 8002c16:	680a      	ldr	r2, [r1, #0]
 8002c18:	0014      	movs	r4, r2
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d11a      	bne.n	8002c54 <_malloc_r+0x5c>
 8002c1e:	4f24      	ldr	r7, [pc, #144]	; (8002cb0 <_malloc_r+0xb8>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d104      	bne.n	8002c30 <_malloc_r+0x38>
 8002c26:	0021      	movs	r1, r4
 8002c28:	0030      	movs	r0, r6
 8002c2a:	f000 f869 	bl	8002d00 <_sbrk_r>
 8002c2e:	6038      	str	r0, [r7, #0]
 8002c30:	0029      	movs	r1, r5
 8002c32:	0030      	movs	r0, r6
 8002c34:	f000 f864 	bl	8002d00 <_sbrk_r>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d12b      	bne.n	8002c94 <_malloc_r+0x9c>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	0030      	movs	r0, r6
 8002c40:	6033      	str	r3, [r6, #0]
 8002c42:	f000 f877 	bl	8002d34 <__malloc_unlock>
 8002c46:	e003      	b.n	8002c50 <_malloc_r+0x58>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	dade      	bge.n	8002c0a <_malloc_r+0x12>
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	6033      	str	r3, [r6, #0]
 8002c50:	2000      	movs	r0, #0
 8002c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	1b5b      	subs	r3, r3, r5
 8002c58:	d419      	bmi.n	8002c8e <_malloc_r+0x96>
 8002c5a:	2b0b      	cmp	r3, #11
 8002c5c:	d903      	bls.n	8002c66 <_malloc_r+0x6e>
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	18e4      	adds	r4, r4, r3
 8002c62:	6025      	str	r5, [r4, #0]
 8002c64:	e003      	b.n	8002c6e <_malloc_r+0x76>
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	42a2      	cmp	r2, r4
 8002c6a:	d10e      	bne.n	8002c8a <_malloc_r+0x92>
 8002c6c:	600b      	str	r3, [r1, #0]
 8002c6e:	0030      	movs	r0, r6
 8002c70:	f000 f860 	bl	8002d34 <__malloc_unlock>
 8002c74:	0020      	movs	r0, r4
 8002c76:	2207      	movs	r2, #7
 8002c78:	300b      	adds	r0, #11
 8002c7a:	1d23      	adds	r3, r4, #4
 8002c7c:	4390      	bics	r0, r2
 8002c7e:	1ac2      	subs	r2, r0, r3
 8002c80:	4298      	cmp	r0, r3
 8002c82:	d0e6      	beq.n	8002c52 <_malloc_r+0x5a>
 8002c84:	1a1b      	subs	r3, r3, r0
 8002c86:	50a3      	str	r3, [r4, r2]
 8002c88:	e7e3      	b.n	8002c52 <_malloc_r+0x5a>
 8002c8a:	6053      	str	r3, [r2, #4]
 8002c8c:	e7ef      	b.n	8002c6e <_malloc_r+0x76>
 8002c8e:	0022      	movs	r2, r4
 8002c90:	6864      	ldr	r4, [r4, #4]
 8002c92:	e7c2      	b.n	8002c1a <_malloc_r+0x22>
 8002c94:	2303      	movs	r3, #3
 8002c96:	1cc4      	adds	r4, r0, #3
 8002c98:	439c      	bics	r4, r3
 8002c9a:	42a0      	cmp	r0, r4
 8002c9c:	d0e1      	beq.n	8002c62 <_malloc_r+0x6a>
 8002c9e:	1a21      	subs	r1, r4, r0
 8002ca0:	0030      	movs	r0, r6
 8002ca2:	f000 f82d 	bl	8002d00 <_sbrk_r>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d1db      	bne.n	8002c62 <_malloc_r+0x6a>
 8002caa:	e7c7      	b.n	8002c3c <_malloc_r+0x44>
 8002cac:	20000090 	.word	0x20000090
 8002cb0:	20000094 	.word	0x20000094

08002cb4 <_realloc_r>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	0007      	movs	r7, r0
 8002cb8:	000d      	movs	r5, r1
 8002cba:	0016      	movs	r6, r2
 8002cbc:	2900      	cmp	r1, #0
 8002cbe:	d105      	bne.n	8002ccc <_realloc_r+0x18>
 8002cc0:	0011      	movs	r1, r2
 8002cc2:	f7ff ff99 	bl	8002bf8 <_malloc_r>
 8002cc6:	0004      	movs	r4, r0
 8002cc8:	0020      	movs	r0, r4
 8002cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d103      	bne.n	8002cd8 <_realloc_r+0x24>
 8002cd0:	f7ff ff48 	bl	8002b64 <_free_r>
 8002cd4:	0034      	movs	r4, r6
 8002cd6:	e7f7      	b.n	8002cc8 <_realloc_r+0x14>
 8002cd8:	f000 f834 	bl	8002d44 <_malloc_usable_size_r>
 8002cdc:	002c      	movs	r4, r5
 8002cde:	42b0      	cmp	r0, r6
 8002ce0:	d2f2      	bcs.n	8002cc8 <_realloc_r+0x14>
 8002ce2:	0031      	movs	r1, r6
 8002ce4:	0038      	movs	r0, r7
 8002ce6:	f7ff ff87 	bl	8002bf8 <_malloc_r>
 8002cea:	1e04      	subs	r4, r0, #0
 8002cec:	d0ec      	beq.n	8002cc8 <_realloc_r+0x14>
 8002cee:	0029      	movs	r1, r5
 8002cf0:	0032      	movs	r2, r6
 8002cf2:	f7ff ff1a 	bl	8002b2a <memcpy>
 8002cf6:	0029      	movs	r1, r5
 8002cf8:	0038      	movs	r0, r7
 8002cfa:	f7ff ff33 	bl	8002b64 <_free_r>
 8002cfe:	e7e3      	b.n	8002cc8 <_realloc_r+0x14>

08002d00 <_sbrk_r>:
 8002d00:	2300      	movs	r3, #0
 8002d02:	b570      	push	{r4, r5, r6, lr}
 8002d04:	4d06      	ldr	r5, [pc, #24]	; (8002d20 <_sbrk_r+0x20>)
 8002d06:	0004      	movs	r4, r0
 8002d08:	0008      	movs	r0, r1
 8002d0a:	602b      	str	r3, [r5, #0]
 8002d0c:	f7fd fd0c 	bl	8000728 <_sbrk>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d103      	bne.n	8002d1c <_sbrk_r+0x1c>
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d000      	beq.n	8002d1c <_sbrk_r+0x1c>
 8002d1a:	6023      	str	r3, [r4, #0]
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	200001b0 	.word	0x200001b0

08002d24 <__malloc_lock>:
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4802      	ldr	r0, [pc, #8]	; (8002d30 <__malloc_lock+0xc>)
 8002d28:	f000 f814 	bl	8002d54 <__retarget_lock_acquire_recursive>
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	200001b8 	.word	0x200001b8

08002d34 <__malloc_unlock>:
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <__malloc_unlock+0xc>)
 8002d38:	f000 f80d 	bl	8002d56 <__retarget_lock_release_recursive>
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	200001b8 	.word	0x200001b8

08002d44 <_malloc_usable_size_r>:
 8002d44:	1f0b      	subs	r3, r1, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1f18      	subs	r0, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da01      	bge.n	8002d52 <_malloc_usable_size_r+0xe>
 8002d4e:	580b      	ldr	r3, [r1, r0]
 8002d50:	18c0      	adds	r0, r0, r3
 8002d52:	4770      	bx	lr

08002d54 <__retarget_lock_acquire_recursive>:
 8002d54:	4770      	bx	lr

08002d56 <__retarget_lock_release_recursive>:
 8002d56:	4770      	bx	lr

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
