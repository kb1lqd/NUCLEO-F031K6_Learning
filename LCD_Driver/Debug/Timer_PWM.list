
Timer_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003558  08003558  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003558  08003558  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003558  08003558  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080035d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080035d0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a41e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fd  00000000  00000000  0002a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010077  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6a4  00000000  00000000  0003d4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064a5b  00000000  00000000  00049b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae5f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000ae64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003498 	.word	0x08003498

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003498 	.word	0x08003498

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
	int uart_buf_len;
	uint16_t timer_val;

	// Test
	unsigned char pwm_val;
	unsigned char pwm_set=0;
 800023a:	233f      	movs	r3, #63	; 0x3f
 800023c:	18fb      	adds	r3, r7, r3
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	unsigned char pwm_dir=1;
 8000242:	233e      	movs	r3, #62	; 0x3e
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
	unsigned char pwm_step=5;
 800024a:	233d      	movs	r3, #61	; 0x3d
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	2205      	movs	r2, #5
 8000250:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fb03 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f875 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f97b 	bl	8000554 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800025e:	f000 f949 	bl	80004f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000262:	f000 f8c7 	bl	80003f4 <MX_TIM2_Init>
   * - 16 bit count
   */


  // Say hello
  uart_buf_len = sprintf(uart_buf, "Timer onboard PWM LED program started!\r\n");
 8000266:	4a33      	ldr	r2, [pc, #204]	; (8000334 <main+0x100>)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f002 fced 	bl	8002c4c <siprintf>
 8000272:	0003      	movs	r3, r0
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000278:	b29a      	uxth	r2, r3
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	482e      	ldr	r0, [pc, #184]	; (8000338 <main+0x104>)
 800027e:	2364      	movs	r3, #100	; 0x64
 8000280:	f002 f964 	bl	800254c <HAL_UART_Transmit>

  //Start the timer
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000284:	4b2d      	ldr	r3, [pc, #180]	; (800033c <main+0x108>)
 8000286:	2104      	movs	r1, #4
 8000288:	0018      	movs	r0, r3
 800028a:	f001 fb6d 	bl	8001968 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//Get PWM CCR value
	pwm_val = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2);
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <main+0x108>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000294:	2137      	movs	r1, #55	; 0x37
 8000296:	187b      	adds	r3, r7, r1
 8000298:	701a      	strb	r2, [r3, #0]

    //Send PWM value over UART
    uart_buf_len = sprintf(uart_buf, "PWM CCR= %u\r\n", pwm_val);
 800029a:	187b      	adds	r3, r7, r1
 800029c:	781a      	ldrb	r2, [r3, #0]
 800029e:	4928      	ldr	r1, [pc, #160]	; (8000340 <main+0x10c>)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f002 fcd2 	bl	8002c4c <siprintf>
 80002a8:	0003      	movs	r3, r0
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 80002ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	1d39      	adds	r1, r7, #4
 80002b2:	4821      	ldr	r0, [pc, #132]	; (8000338 <main+0x104>)
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	f002 f949 	bl	800254c <HAL_UART_Transmit>

    //Change PWM duty cycle
    if(pwm_set+pwm_step>=255)
 80002ba:	233f      	movs	r3, #63	; 0x3f
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	233d      	movs	r3, #61	; 0x3d
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	18d3      	adds	r3, r2, r3
 80002c8:	2bfe      	cmp	r3, #254	; 0xfe
 80002ca:	dd04      	ble.n	80002d6 <main+0xa2>
    {
    	pwm_dir=0;
 80002cc:	233e      	movs	r3, #62	; 0x3e
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
 80002d4:	e00c      	b.n	80002f0 <main+0xbc>
    }
    else if(pwm_set-pwm_step<=0)
 80002d6:	233f      	movs	r3, #63	; 0x3f
 80002d8:	18fb      	adds	r3, r7, r3
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	233d      	movs	r3, #61	; 0x3d
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	1ad3      	subs	r3, r2, r3
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	dc03      	bgt.n	80002f0 <main+0xbc>
    {
    	pwm_dir=1;
 80002e8:	233e      	movs	r3, #62	; 0x3e
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
    else
    {
    	//None
    }

    if(pwm_dir==1)
 80002f0:	233e      	movs	r3, #62	; 0x3e
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d109      	bne.n	800030e <main+0xda>
    {
    	pwm_set+=pwm_step;
 80002fa:	223f      	movs	r2, #63	; 0x3f
 80002fc:	18bb      	adds	r3, r7, r2
 80002fe:	18b9      	adds	r1, r7, r2
 8000300:	223d      	movs	r2, #61	; 0x3d
 8000302:	18ba      	adds	r2, r7, r2
 8000304:	7809      	ldrb	r1, [r1, #0]
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	188a      	adds	r2, r1, r2
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	e008      	b.n	8000320 <main+0xec>
    }
    else
    {
    	pwm_set-=pwm_step;
 800030e:	223f      	movs	r2, #63	; 0x3f
 8000310:	18bb      	adds	r3, r7, r2
 8000312:	18b9      	adds	r1, r7, r2
 8000314:	223d      	movs	r2, #61	; 0x3d
 8000316:	18ba      	adds	r2, r7, r2
 8000318:	7809      	ldrb	r1, [r1, #0]
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	701a      	strb	r2, [r3, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm_set);
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <main+0x108>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	223f      	movs	r2, #63	; 0x3f
 8000326:	18ba      	adds	r2, r7, r2
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_Delay(10); //10ms delay
 800032c:	200a      	movs	r0, #10
 800032e:	f000 faf9 	bl	8000924 <HAL_Delay>
	pwm_val = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_2);
 8000332:	e7ac      	b.n	800028e <main+0x5a>
 8000334:	080034b0 	.word	0x080034b0
 8000338:	20000098 	.word	0x20000098
 800033c:	2000011c 	.word	0x2000011c
 8000340:	080034dc 	.word	0x080034dc

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b095      	sub	sp, #84	; 0x54
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	2420      	movs	r4, #32
 800034c:	193b      	adds	r3, r7, r4
 800034e:	0018      	movs	r0, r3
 8000350:	2330      	movs	r3, #48	; 0x30
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f002 fc71 	bl	8002c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	2310      	movs	r3, #16
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	0018      	movs	r0, r3
 8000360:	2310      	movs	r3, #16
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f002 fc69 	bl	8002c3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036a:	003b      	movs	r3, r7
 800036c:	0018      	movs	r0, r3
 800036e:	2310      	movs	r3, #16
 8000370:	001a      	movs	r2, r3
 8000372:	2100      	movs	r1, #0
 8000374:	f002 fc62 	bl	8002c3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	0021      	movs	r1, r4
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2202      	movs	r2, #2
 800037e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2201      	movs	r2, #1
 8000384:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2210      	movs	r2, #16
 800038a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	0018      	movs	r0, r3
 8000396:	f000 fd05 	bl	8000da4 <HAL_RCC_OscConfig>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800039e:	f000 f90d 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	2110      	movs	r1, #16
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2207      	movs	r2, #7
 80003a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2100      	movs	r1, #0
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f809 	bl	80013d8 <HAL_RCC_ClockConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003ca:	f000 f8f7 	bl	80005bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003ce:	003b      	movs	r3, r7
 80003d0:	2201      	movs	r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003da:	003b      	movs	r3, r7
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f94d 	bl	800167c <HAL_RCCEx_PeriphCLKConfig>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003e6:	f000 f8e9 	bl	80005bc <Error_Handler>
  }
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b015      	add	sp, #84	; 0x54
 80003f0:	bd90      	pop	{r4, r7, pc}
	...

080003f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08e      	sub	sp, #56	; 0x38
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	2328      	movs	r3, #40	; 0x28
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	0018      	movs	r0, r3
 8000400:	2310      	movs	r3, #16
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f002 fc19 	bl	8002c3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040a:	2320      	movs	r3, #32
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	2308      	movs	r3, #8
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f002 fc11 	bl	8002c3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	0018      	movs	r0, r3
 800041e:	231c      	movs	r3, #28
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f002 fc0a 	bl	8002c3c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000428:	4b30      	ldr	r3, [pc, #192]	; (80004ec <MX_TIM2_Init+0xf8>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	05d2      	lsls	r2, r2, #23
 800042e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000432:	2207      	movs	r2, #7
 8000434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <MX_TIM2_Init+0xf8>)
 800043e:	22ff      	movs	r2, #255	; 0xff
 8000440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <MX_TIM2_Init+0xf8>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <MX_TIM2_Init+0xf8>)
 8000450:	0018      	movs	r0, r3
 8000452:	f001 f9e1 	bl	8001818 <HAL_TIM_Base_Init>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800045a:	f000 f8af 	bl	80005bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	2128      	movs	r1, #40	; 0x28
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2280      	movs	r2, #128	; 0x80
 8000464:	0152      	lsls	r2, r2, #5
 8000466:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000468:	187a      	adds	r2, r7, r1
 800046a:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_TIM2_Init+0xf8>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fbe2 	bl	8001c38 <HAL_TIM_ConfigClockSource>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000478:	f000 f8a0 	bl	80005bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_TIM2_Init+0xf8>)
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fa1a 	bl	80018b8 <HAL_TIM_PWM_Init>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000488:	f000 f898 	bl	80005bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048c:	2120      	movs	r1, #32
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049a:	187a      	adds	r2, r7, r1
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_TIM2_Init+0xf8>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 ffa7 	bl	80023f4 <HAL_TIMEx_MasterConfigSynchronization>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004aa:	f000 f887 	bl	80005bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2260      	movs	r2, #96	; 0x60
 80004b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1027/2;
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <MX_TIM2_Init+0xfc>)
 80004b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c6:	1d39      	adds	r1, r7, #4
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_TIM2_Init+0xf8>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 faf7 	bl	8001ac0 <HAL_TIM_PWM_ConfigChannel>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80004d6:	f000 f871 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004da:	4b04      	ldr	r3, [pc, #16]	; (80004ec <MX_TIM2_Init+0xf8>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 f8b3 	bl	8000648 <HAL_TIM_MspPostInit>

}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b00e      	add	sp, #56	; 0x38
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	2000011c 	.word	0x2000011c
 80004f0:	00000201 	.word	0x00000201

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_USART1_UART_Init+0x58>)
 80004fa:	4a15      	ldr	r2, [pc, #84]	; (8000550 <MX_USART1_UART_Init+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000500:	2296      	movs	r2, #150	; 0x96
 8000502:	0212      	lsls	r2, r2, #8
 8000504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_USART1_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_USART1_UART_Init+0x58>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_USART1_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <MX_USART1_UART_Init+0x58>)
 8000538:	0018      	movs	r0, r3
 800053a:	f001 ffb3 	bl	80024a4 <HAL_UART_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000542:	f000 f83b 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000098 	.word	0x20000098
 8000550:	40013800 	.word	0x40013800

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_GPIO_Init+0x64>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_GPIO_Init+0x64>)
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	03c9      	lsls	r1, r1, #15
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <MX_GPIO_Init+0x64>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	03db      	lsls	r3, r3, #15
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_GPIO_Init+0x64>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_GPIO_Init+0x64>)
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	0289      	lsls	r1, r1, #10
 8000580:	430a      	orrs	r2, r1
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_GPIO_Init+0x64>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	029b      	lsls	r3, r3, #10
 800058c:	4013      	ands	r3, r2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_GPIO_Init+0x64>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_GPIO_Init+0x64>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	02c9      	lsls	r1, r1, #11
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_GPIO_Init+0x64>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	02db      	lsls	r3, r3, #11
 80005a8:	4013      	ands	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x44>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x44>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	619a      	str	r2, [r3, #24]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x44>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_MspInit+0x44>)
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x44>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0549      	lsls	r1, r1, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_MspInit+0x44>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	055b      	lsls	r3, r3, #21
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	429a      	cmp	r2, r3
 8000622:	d10b      	bne.n	800063c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 8000626:	69da      	ldr	r2, [r3, #28]
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 800062a:	2101      	movs	r1, #1
 800062c:	430a      	orrs	r2, r1
 800062e:	61da      	str	r2, [r3, #28]
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_TIM_Base_MspInit+0x34>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	2201      	movs	r2, #1
 8000636:	4013      	ands	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	240c      	movs	r4, #12
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 faee 	bl	8002c3c <memset>
  if(htim->Instance==TIM2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	429a      	cmp	r2, r3
 800066a:	d123      	bne.n	80006b4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <HAL_TIM_MspPostInit+0x74>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_TIM_MspPostInit+0x74>)
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	02c9      	lsls	r1, r1, #11
 8000676:	430a      	orrs	r2, r1
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_TIM_MspPostInit+0x74>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	02db      	lsls	r3, r3, #11
 8000682:	4013      	ands	r3, r2
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2208      	movs	r2, #8
 800068e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2202      	movs	r2, #2
 8000694:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2202      	movs	r2, #2
 80006a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <HAL_TIM_MspPostInit+0x78>)
 80006ac:	0019      	movs	r1, r3
 80006ae:	0010      	movs	r0, r2
 80006b0:	f000 fa10 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b009      	add	sp, #36	; 0x24
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b08b      	sub	sp, #44	; 0x2c
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	2414      	movs	r4, #20
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f002 fab0 	bl	8002c3c <memset>
  if(huart->Instance==USART1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d132      	bne.n	800074c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	01c9      	lsls	r1, r1, #7
 80006f0:	430a      	orrs	r2, r1
 80006f2:	619a      	str	r2, [r3, #24]
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_UART_MspInit+0x94>)
 80006f6:	699a      	ldr	r2, [r3, #24]
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	01db      	lsls	r3, r3, #7
 80006fc:	4013      	ands	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000704:	695a      	ldr	r2, [r3, #20]
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	0289      	lsls	r1, r1, #10
 800070c:	430a      	orrs	r2, r1
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	029b      	lsls	r3, r3, #10
 8000718:	4013      	ands	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_UART_MspInit+0x98>)
 8000724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2203      	movs	r2, #3
 8000736:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	187a      	adds	r2, r7, r1
 8000740:	2390      	movs	r3, #144	; 0x90
 8000742:	05db      	lsls	r3, r3, #23
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f9c4 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46bd      	mov	sp, r7
 8000750:	b00b      	add	sp, #44	; 0x2c
 8000752:	bd90      	pop	{r4, r7, pc}
 8000754:	40013800 	.word	0x40013800
 8000758:	40021000 	.word	0x40021000
 800075c:	00008004 	.word	0x00008004

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f8b2 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f002 fa12 	bl	8002be8 <__errno>
 80007c4:	0003      	movs	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	425b      	negs	r3, r3
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	18d2      	adds	r2, r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b006      	add	sp, #24
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20001000 	.word	0x20001000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	20000178 	.word	0x20000178

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000832:	f7ff ffe3 	bl	80007fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000836:	f002 f9dd 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fcfb 	bl	8000234 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800084c:	08003560 	.word	0x08003560
  ldr r2, =_sbss
 8000850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000854:	20000178 	.word	0x20000178

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_Init+0x24>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_Init+0x24>)
 8000866:	2110      	movs	r1, #16
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f809 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000872:	f7ff fea9 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_InitTick+0x5c>)
 800088e:	681c      	ldr	r4, [r3, #0]
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_InitTick+0x60>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	0019      	movs	r1, r3
 8000896:	23fa      	movs	r3, #250	; 0xfa
 8000898:	0098      	lsls	r0, r3, #2
 800089a:	f7ff fc3f 	bl	800011c <__udivsi3>
 800089e:	0003      	movs	r3, r0
 80008a0:	0019      	movs	r1, r3
 80008a2:	0020      	movs	r0, r4
 80008a4:	f7ff fc3a 	bl	800011c <__udivsi3>
 80008a8:	0003      	movs	r3, r0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f905 	bl	8000aba <HAL_SYSTICK_Config>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e00f      	b.n	80008d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d80b      	bhi.n	80008d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	2301      	movs	r3, #1
 80008c2:	425b      	negs	r3, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8e2 	bl	8000a90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_InitTick+0x64>)
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d2      	adds	r2, r2, r3
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	601a      	str	r2, [r3, #0]
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	20000008 	.word	0x20000008
 800090c:	20000164 	.word	0x20000164

08000910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000164 	.word	0x20000164

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	0003      	movs	r3, r0
 8000932:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001a      	movs	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	189b      	adds	r3, r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	f7ff ffe0 	bl	8000910 <HAL_GetTick>
 8000950:	0002      	movs	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000008 	.word	0x20000008

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	0002      	movs	r2, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b7f      	cmp	r3, #127	; 0x7f
 8000980:	d828      	bhi.n	80009d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	33c0      	adds	r3, #192	; 0xc0
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	589b      	ldr	r3, [r3, r2]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	481f      	ldr	r0, [pc, #124]	; (8000a40 <__NVIC_SetPriority+0xd4>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	430a      	orrs	r2, r1
 80009cc:	33c0      	adds	r3, #192	; 0xc0
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009d2:	e031      	b.n	8000a38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0019      	movs	r1, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	400b      	ands	r3, r1
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3306      	adds	r3, #6
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	18d3      	adds	r3, r2, r3
 80009ea:	3304      	adds	r3, #4
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	0011      	movs	r1, r2
 80009f4:	2203      	movs	r2, #3
 80009f6:	400a      	ands	r2, r1
 80009f8:	00d2      	lsls	r2, r2, #3
 80009fa:	21ff      	movs	r1, #255	; 0xff
 80009fc:	4091      	lsls	r1, r2
 80009fe:	000a      	movs	r2, r1
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	401a      	ands	r2, r3
 8000a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	019b      	lsls	r3, r3, #6
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0018      	movs	r0, r3
 8000a14:	2303      	movs	r3, #3
 8000a16:	4003      	ands	r3, r0
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <__NVIC_SetPriority+0xd8>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001c      	movs	r4, r3
 8000a24:	230f      	movs	r3, #15
 8000a26:	4023      	ands	r3, r4
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	3306      	adds	r3, #6
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	18c3      	adds	r3, r0, r3
 8000a34:	3304      	adds	r3, #4
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b003      	add	sp, #12
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	045b      	lsls	r3, r3, #17
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d301      	bcc.n	8000a60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e010      	b.n	8000a82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <SysTick_Config+0x44>)
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	3a01      	subs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a68:	2301      	movs	r3, #1
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff7c 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x44>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	1c02      	adds	r2, r0, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ffbf 	bl	8000a48 <SysTick_Config>
 8000aca:	0003      	movs	r3, r0
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e149      	b.n	8000d78 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	4091      	lsls	r1, r2
 8000aee:	000a      	movs	r2, r1
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d100      	bne.n	8000afc <HAL_GPIO_Init+0x28>
 8000afa:	e13a      	b.n	8000d72 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d00b      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b10:	2b11      	cmp	r3, #17
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b12      	cmp	r3, #18
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	2201      	movs	r2, #1
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0xea>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d123      	bne.n	8000c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	58d3      	ldr	r3, [r2, r3]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2207      	movs	r2, #7
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2107      	movs	r1, #7
 8000bea:	400b      	ands	r3, r1
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	6939      	ldr	r1, [r7, #16]
 8000c04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	409a      	lsls	r2, r3
 8000c14:	0013      	movs	r3, r2
 8000c16:	43da      	mvns	r2, r3
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2203      	movs	r2, #3
 8000c24:	401a      	ands	r2, r3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	055b      	lsls	r3, r3, #21
 8000c42:	4013      	ands	r3, r2
 8000c44:	d100      	bne.n	8000c48 <HAL_GPIO_Init+0x174>
 8000c46:	e094      	b.n	8000d72 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	4b51      	ldr	r3, [pc, #324]	; (8000d90 <HAL_GPIO_Init+0x2bc>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_GPIO_Init+0x2bc>)
 8000c4e:	2101      	movs	r1, #1
 8000c50:	430a      	orrs	r2, r1
 8000c52:	619a      	str	r2, [r3, #24]
 8000c54:	4b4e      	ldr	r3, [pc, #312]	; (8000d90 <HAL_GPIO_Init+0x2bc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c60:	4a4c      	ldr	r2, [pc, #304]	; (8000d94 <HAL_GPIO_Init+0x2c0>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	589b      	ldr	r3, [r3, r2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	2390      	movs	r3, #144	; 0x90
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d00d      	beq.n	8000caa <HAL_GPIO_Init+0x1d6>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a41      	ldr	r2, [pc, #260]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d007      	beq.n	8000ca6 <HAL_GPIO_Init+0x1d2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a40      	ldr	r2, [pc, #256]	; (8000d9c <HAL_GPIO_Init+0x2c8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_GPIO_Init+0x1ce>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e004      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	e002      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <HAL_GPIO_Init+0x1d8>
 8000caa:	2300      	movs	r3, #0
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	2103      	movs	r1, #3
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	0092      	lsls	r2, r2, #2
 8000cb4:	4093      	lsls	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cbc:	4935      	ldr	r1, [pc, #212]	; (8000d94 <HAL_GPIO_Init+0x2c0>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	025b      	lsls	r3, r3, #9
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	029b      	lsls	r3, r3, #10
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	43da      	mvns	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	035b      	lsls	r3, r3, #13
 8000d36:	4013      	ands	r3, r2
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	039b      	lsls	r3, r3, #14
 8000d60:	4013      	ands	r3, r2
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	1e13      	subs	r3, r2, #0
 8000d82:	d000      	beq.n	8000d86 <HAL_GPIO_Init+0x2b2>
 8000d84:	e6ae      	b.n	8000ae4 <HAL_GPIO_Init+0x10>
  } 
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b006      	add	sp, #24
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	40010400 	.word	0x40010400

08000da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e301      	b.n	80013ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x1e>
 8000dc0:	e08d      	b.n	8000ede <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc2:	4bc3      	ldr	r3, [pc, #780]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d00e      	beq.n	8000dec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dce:	4bc0      	ldr	r3, [pc, #768]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x64>
 8000dda:	4bbd      	ldr	r3, [pc, #756]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	401a      	ands	r2, r3
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	025b      	lsls	r3, r3, #9
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d10d      	bne.n	8000e08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dec:	4bb8      	ldr	r3, [pc, #736]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	4013      	ands	r3, r2
 8000df6:	d100      	bne.n	8000dfa <HAL_RCC_OscConfig+0x56>
 8000df8:	e070      	b.n	8000edc <HAL_RCC_OscConfig+0x138>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d000      	beq.n	8000e04 <HAL_RCC_OscConfig+0x60>
 8000e02:	e06b      	b.n	8000edc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e2d8      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d107      	bne.n	8000e20 <HAL_RCC_OscConfig+0x7c>
 8000e10:	4baf      	ldr	r3, [pc, #700]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4bae      	ldr	r3, [pc, #696]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e02f      	b.n	8000e80 <HAL_RCC_OscConfig+0xdc>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x9e>
 8000e28:	4ba9      	ldr	r3, [pc, #676]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e2e:	49a9      	ldr	r1, [pc, #676]	; (80010d4 <HAL_RCC_OscConfig+0x330>)
 8000e30:	400a      	ands	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	4ba6      	ldr	r3, [pc, #664]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba5      	ldr	r3, [pc, #660]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	49a7      	ldr	r1, [pc, #668]	; (80010d8 <HAL_RCC_OscConfig+0x334>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e01e      	b.n	8000e80 <HAL_RCC_OscConfig+0xdc>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d10e      	bne.n	8000e68 <HAL_RCC_OscConfig+0xc4>
 8000e4a:	4ba1      	ldr	r3, [pc, #644]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4ba0      	ldr	r3, [pc, #640]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	02c9      	lsls	r1, r1, #11
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	4b9d      	ldr	r3, [pc, #628]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e00b      	b.n	8000e80 <HAL_RCC_OscConfig+0xdc>
 8000e68:	4b99      	ldr	r3, [pc, #612]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b98      	ldr	r3, [pc, #608]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e6e:	4999      	ldr	r1, [pc, #612]	; (80010d4 <HAL_RCC_OscConfig+0x330>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b95      	ldr	r3, [pc, #596]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	4997      	ldr	r1, [pc, #604]	; (80010d8 <HAL_RCC_OscConfig+0x334>)
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d014      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fd42 	bl	8000910 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff fd3d 	bl	8000910 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b64      	cmp	r3, #100	; 0x64
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e28a      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea4:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	029b      	lsls	r3, r3, #10
 8000eac:	4013      	ands	r3, r2
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0xee>
 8000eb0:	e015      	b.n	8000ede <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fd2d 	bl	8000910 <HAL_GetTick>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fd28 	bl	8000910 <HAL_GetTick>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e275      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ece:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x118>
 8000eda:	e000      	b.n	8000ede <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000edc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d100      	bne.n	8000eea <HAL_RCC_OscConfig+0x146>
 8000ee8:	e069      	b.n	8000fbe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eea:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	220c      	movs	r2, #12
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d00b      	beq.n	8000f0c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ef4:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	220c      	movs	r2, #12
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d11c      	bne.n	8000f3a <HAL_RCC_OscConfig+0x196>
 8000f00:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	025b      	lsls	r3, r3, #9
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d116      	bne.n	8000f3a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0c:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2202      	movs	r2, #2
 8000f12:	4013      	ands	r3, r2
 8000f14:	d005      	beq.n	8000f22 <HAL_RCC_OscConfig+0x17e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e24b      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f22:	4b6b      	ldr	r3, [pc, #428]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	22f8      	movs	r2, #248	; 0xf8
 8000f28:	4393      	bics	r3, r2
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	00da      	lsls	r2, r3, #3
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f38:	e041      	b.n	8000fbe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d024      	beq.n	8000f8c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b62      	ldr	r3, [pc, #392]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4e:	f7ff fcdf 	bl	8000910 <HAL_GetTick>
 8000f52:	0003      	movs	r3, r0
 8000f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fcda 	bl	8000910 <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e227      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4013      	ands	r3, r2
 8000f72:	d0f1      	beq.n	8000f58 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	22f8      	movs	r2, #248	; 0xf8
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	00da      	lsls	r2, r3, #3
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e018      	b.n	8000fbe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8c:	4b50      	ldr	r3, [pc, #320]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcba 	bl	8000910 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fcb5 	bl	8000910 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e202      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb4:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d1f1      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d036      	beq.n	8001036 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d019      	beq.n	8001004 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc98 	bl	8000910 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fc93 	bl	8000910 <HAL_GetTick>
 8000fea:	0002      	movs	r2, r0
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e1e0      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	4013      	ands	r3, r2
 8001000:	d0f1      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x242>
 8001002:	e018      	b.n	8001036 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8001006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 800100a:	2101      	movs	r1, #1
 800100c:	438a      	bics	r2, r1
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001010:	f7ff fc7e 	bl	8000910 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800101a:	f7ff fc79 	bl	8000910 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1c6      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	2202      	movs	r2, #2
 8001032:	4013      	ands	r3, r2
 8001034:	d1f1      	bne.n	800101a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2204      	movs	r2, #4
 800103c:	4013      	ands	r3, r2
 800103e:	d100      	bne.n	8001042 <HAL_RCC_OscConfig+0x29e>
 8001040:	e0b4      	b.n	80011ac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001042:	201f      	movs	r0, #31
 8001044:	183b      	adds	r3, r7, r0
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	4013      	ands	r3, r2
 8001054:	d110      	bne.n	8001078 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8001058:	69da      	ldr	r2, [r3, #28]
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0549      	lsls	r1, r1, #21
 8001060:	430a      	orrs	r2, r1
 8001062:	61da      	str	r2, [r3, #28]
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 8001066:	69da      	ldr	r2, [r3, #28]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001072:	183b      	adds	r3, r7, r0
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_RCC_OscConfig+0x338>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4013      	ands	r3, r2
 8001082:	d11a      	bne.n	80010ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_RCC_OscConfig+0x338>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_RCC_OscConfig+0x338>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0049      	lsls	r1, r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001092:	f7ff fc3d 	bl	8000910 <HAL_GetTick>
 8001096:	0003      	movs	r3, r0
 8001098:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800109c:	f7ff fc38 	bl	8000910 <HAL_GetTick>
 80010a0:	0002      	movs	r2, r0
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e185      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x338>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4013      	ands	r3, r2
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10e      	bne.n	80010e0 <HAL_RCC_OscConfig+0x33c>
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	621a      	str	r2, [r3, #32]
 80010ce:	e035      	b.n	800113c <HAL_RCC_OscConfig+0x398>
 80010d0:	40021000 	.word	0x40021000
 80010d4:	fffeffff 	.word	0xfffeffff
 80010d8:	fffbffff 	.word	0xfffbffff
 80010dc:	40007000 	.word	0x40007000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x35e>
 80010e8:	4bb6      	ldr	r3, [pc, #728]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80010ea:	6a1a      	ldr	r2, [r3, #32]
 80010ec:	4bb5      	ldr	r3, [pc, #724]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	438a      	bics	r2, r1
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	4bb3      	ldr	r3, [pc, #716]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4bb2      	ldr	r3, [pc, #712]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	438a      	bics	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
 8001100:	e01c      	b.n	800113c <HAL_RCC_OscConfig+0x398>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x380>
 800110a:	4bae      	ldr	r3, [pc, #696]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4bad      	ldr	r3, [pc, #692]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001110:	2104      	movs	r1, #4
 8001112:	430a      	orrs	r2, r1
 8001114:	621a      	str	r2, [r3, #32]
 8001116:	4bab      	ldr	r3, [pc, #684]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001118:	6a1a      	ldr	r2, [r3, #32]
 800111a:	4baa      	ldr	r3, [pc, #680]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	621a      	str	r2, [r3, #32]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0x398>
 8001124:	4ba7      	ldr	r3, [pc, #668]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	4ba6      	ldr	r3, [pc, #664]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800112a:	2101      	movs	r1, #1
 800112c:	438a      	bics	r2, r1
 800112e:	621a      	str	r2, [r3, #32]
 8001130:	4ba4      	ldr	r3, [pc, #656]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	4ba3      	ldr	r3, [pc, #652]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001136:	2104      	movs	r1, #4
 8001138:	438a      	bics	r2, r1
 800113a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d014      	beq.n	800116e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fbe4 	bl	8000910 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	e009      	b.n	8001162 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fbdf 	bl	8000910 <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4a9b      	ldr	r2, [pc, #620]	; (80013c8 <HAL_RCC_OscConfig+0x624>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e12b      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001162:	4b98      	ldr	r3, [pc, #608]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x3aa>
 800116c:	e013      	b.n	8001196 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbcf 	bl	8000910 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001176:	e009      	b.n	800118c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001178:	f7ff fbca 	bl	8000910 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4a91      	ldr	r2, [pc, #580]	; (80013c8 <HAL_RCC_OscConfig+0x624>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e116      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118c:	4b8d      	ldr	r3, [pc, #564]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001196:	231f      	movs	r3, #31
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a0:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	4b87      	ldr	r3, [pc, #540]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011a6:	4989      	ldr	r1, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x628>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2210      	movs	r2, #16
 80011b2:	4013      	ands	r3, r2
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d12a      	bne.n	8001214 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c2:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011c4:	2104      	movs	r1, #4
 80011c6:	430a      	orrs	r2, r1
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ca:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011d0:	2101      	movs	r1, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb9b 	bl	8000910 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011e0:	f7ff fb96 	bl	8000910 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e0e3      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011f2:	4b74      	ldr	r3, [pc, #464]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f6:	2202      	movs	r2, #2
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f1      	beq.n	80011e0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011fc:	4b71      	ldr	r3, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80011fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001200:	22f8      	movs	r2, #248	; 0xf8
 8001202:	4393      	bics	r3, r2
 8001204:	0019      	movs	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	e034      	b.n	800127e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	3305      	adds	r3, #5
 800121a:	d111      	bne.n	8001240 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800121e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001222:	2104      	movs	r1, #4
 8001224:	438a      	bics	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800122a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122c:	22f8      	movs	r2, #248	; 0xf8
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e01e      	b.n	800127e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001240:	4b60      	ldr	r3, [pc, #384]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001246:	2104      	movs	r1, #4
 8001248:	430a      	orrs	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800124c:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800124e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001252:	2101      	movs	r1, #1
 8001254:	438a      	bics	r2, r1
 8001256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001258:	f7ff fb5a 	bl	8000910 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001262:	f7ff fb55 	bl	8000910 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0a2      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	d1f1      	bne.n	8001262 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d100      	bne.n	8001288 <HAL_RCC_OscConfig+0x4e4>
 8001286:	e097      	b.n	80013b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	220c      	movs	r2, #12
 800128e:	4013      	ands	r3, r2
 8001290:	2b08      	cmp	r3, #8
 8001292:	d100      	bne.n	8001296 <HAL_RCC_OscConfig+0x4f2>
 8001294:	e06b      	b.n	800136e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d14c      	bne.n	8001338 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129e:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012a4:	494a      	ldr	r1, [pc, #296]	; (80013d0 <HAL_RCC_OscConfig+0x62c>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb31 	bl	8000910 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fb2c 	bl	8000910 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e079      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	049b      	lsls	r3, r3, #18
 80012ce:	4013      	ands	r3, r2
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	220f      	movs	r2, #15
 80012d8:	4393      	bics	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e0:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <HAL_RCC_OscConfig+0x630>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	431a      	orrs	r2, r3
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	0449      	lsls	r1, r1, #17
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff faff 	bl	8000910 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fafa 	bl	8000910 <HAL_GetTick>
 800131c:	0002      	movs	r2, r0
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e047      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	049b      	lsls	r3, r3, #18
 8001332:	4013      	ands	r3, r2
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x574>
 8001336:	e03f      	b.n	80013b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800133e:	4924      	ldr	r1, [pc, #144]	; (80013d0 <HAL_RCC_OscConfig+0x62c>)
 8001340:	400a      	ands	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fae4 	bl	8000910 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff fadf 	bl	8000910 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e02c      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	049b      	lsls	r3, r3, #18
 8001368:	4013      	ands	r3, r2
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x5aa>
 800136c:	e024      	b.n	80013b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e01f      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x620>)
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	401a      	ands	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	429a      	cmp	r2, r3
 8001394:	d10e      	bne.n	80013b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	220f      	movs	r2, #15
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d107      	bne.n	80013b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	23f0      	movs	r3, #240	; 0xf0
 80013a8:	039b      	lsls	r3, r3, #14
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b008      	add	sp, #32
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40021000 	.word	0x40021000
 80013c8:	00001388 	.word	0x00001388
 80013cc:	efffffff 	.word	0xefffffff
 80013d0:	feffffff 	.word	0xfeffffff
 80013d4:	ffc2ffff 	.word	0xffc2ffff

080013d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b3      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ec:	4b5b      	ldr	r3, [pc, #364]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d911      	bls.n	800141e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b58      	ldr	r3, [pc, #352]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4393      	bics	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e09a      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d015      	beq.n	8001454 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2204      	movs	r2, #4
 800142e:	4013      	ands	r3, r2
 8001430:	d006      	beq.n	8001440 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001432:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001438:	21e0      	movs	r1, #224	; 0xe0
 800143a:	00c9      	lsls	r1, r1, #3
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	22f0      	movs	r2, #240	; 0xf0
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	d040      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	029b      	lsls	r3, r3, #10
 800146e:	4013      	ands	r3, r2
 8001470:	d114      	bne.n	800149c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e06e      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	049b      	lsls	r3, r3, #18
 8001486:	4013      	ands	r3, r2
 8001488:	d108      	bne.n	800149c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e062      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e05b      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	4393      	bics	r3, r2
 80014a4:	0019      	movs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b0:	f7ff fa2e 	bl	8000910 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b8:	e009      	b.n	80014ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ba:	f7ff fa29 	bl	8000910 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_RCC_ClockConfig+0x18c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e042      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	220c      	movs	r2, #12
 80014d4:	401a      	ands	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1ec      	bne.n	80014ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d211      	bcs.n	8001512 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	4393      	bics	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_RCC_ClockConfig+0x184>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d001      	beq.n	8001512 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e020      	b.n	8001554 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2204      	movs	r2, #4
 8001518:	4013      	ands	r3, r2
 800151a:	d009      	beq.n	8001530 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_RCC_ClockConfig+0x190>)
 8001522:	4013      	ands	r3, r2
 8001524:	0019      	movs	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 800152c:	430a      	orrs	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001530:	f000 f820 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 8001534:	0001      	movs	r1, r0
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x188>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	220f      	movs	r2, #15
 800153e:	4013      	ands	r3, r2
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_RCC_ClockConfig+0x194>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	000a      	movs	r2, r1
 8001546:	40da      	lsrs	r2, r3
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_RCC_ClockConfig+0x198>)
 800154a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff f999 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	00001388 	.word	0x00001388
 8001568:	fffff8ff 	.word	0xfffff8ff
 800156c:	0800350c 	.word	0x0800350c
 8001570:	20000000 	.word	0x20000000

08001574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b08f      	sub	sp, #60	; 0x3c
 8001578:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800157a:	2314      	movs	r3, #20
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	4a2b      	ldr	r2, [pc, #172]	; (800162c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001580:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001582:	c313      	stmia	r3!, {r0, r1, r4}
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_RCC_GetSysClockFreq+0xbc>)
 800158c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800158e:	c313      	stmia	r3!, {r0, r1, r4}
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
 800159c:	2300      	movs	r3, #0
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	220c      	movs	r2, #12
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d002      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x4a>
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d003      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x50>
 80015bc:	e02d      	b.n	800161a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015c2:	e02d      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	220f      	movs	r2, #15
 80015ca:	4013      	ands	r3, r2
 80015cc:	2214      	movs	r2, #20
 80015ce:	18ba      	adds	r2, r7, r2
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	1d3a      	adds	r2, r7, #4
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4013      	ands	r3, r2
 80015ea:	d009      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015f0:	f7fe fd94 	bl	800011c <__udivsi3>
 80015f4:	0003      	movs	r3, r0
 80015f6:	001a      	movs	r2, r3
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	4353      	muls	r3, r2
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
 80015fe:	e009      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001602:	000a      	movs	r2, r1
 8001604:	0152      	lsls	r2, r2, #5
 8001606:	1a52      	subs	r2, r2, r1
 8001608:	0193      	lsls	r3, r2, #6
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	185b      	adds	r3, r3, r1
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001618:	e002      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc4>)
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800161e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b00f      	add	sp, #60	; 0x3c
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	080034ec 	.word	0x080034ec
 8001630:	080034fc 	.word	0x080034fc
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200

0800163c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_RCC_GetHCLKFreq+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001654:	f7ff fff2 	bl	800163c <HAL_RCC_GetHCLKFreq>
 8001658:	0001      	movs	r1, r0
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	2207      	movs	r2, #7
 8001662:	4013      	ands	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	40d9      	lsrs	r1, r3
 800166a:	000b      	movs	r3, r1
}    
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40021000 	.word	0x40021000
 8001678:	0800351c 	.word	0x0800351c

0800167c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	4013      	ands	r3, r2
 8001696:	d100      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001698:	e08e      	b.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2017      	movs	r0, #23
 800169c:	183b      	adds	r3, r7, r0
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	055b      	lsls	r3, r3, #21
 80016aa:	4013      	ands	r3, r2
 80016ac:	d110      	bne.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	0549      	lsls	r1, r1, #21
 80016b8:	430a      	orrs	r2, r1
 80016ba:	61da      	str	r2, [r3, #28]
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	055b      	lsls	r3, r3, #21
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	183b      	adds	r3, r7, r0
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	d11a      	bne.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016dc:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0049      	lsls	r1, r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f911 	bl	8000910 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	e008      	b.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7ff f90c 	bl	8000910 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e077      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4013      	ands	r3, r2
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001712:	4b3b      	ldr	r3, [pc, #236]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001714:	6a1a      	ldr	r2, [r3, #32]
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4013      	ands	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d034      	beq.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	23c0      	movs	r3, #192	; 0xc0
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4013      	ands	r3, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d02c      	beq.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a33      	ldr	r2, [pc, #204]	; (8001808 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0249      	lsls	r1, r1, #9
 8001748:	430a      	orrs	r2, r1
 800174a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800174e:	6a1a      	ldr	r2, [r3, #32]
 8001750:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001752:	492e      	ldr	r1, [pc, #184]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001754:	400a      	ands	r2, r1
 8001756:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff f8d3 	bl	8000910 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	e009      	b.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff f8ce 	bl	8000910 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	4a25      	ldr	r2, [pc, #148]	; (8001810 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e038      	b.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	2202      	movs	r2, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d0f0      	beq.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001794:	4013      	ands	r3, r2
 8001796:	0019      	movs	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017a2:	2317      	movs	r3, #23
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017b2:	4918      	ldr	r1, [pc, #96]	; (8001814 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	d009      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	2203      	movs	r2, #3
 80017c8:	4393      	bics	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2220      	movs	r2, #32
 80017dc:	4013      	ands	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	2210      	movs	r2, #16
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b006      	add	sp, #24
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000
 8001804:	40007000 	.word	0x40007000
 8001808:	fffffcff 	.word	0xfffffcff
 800180c:	fffeffff 	.word	0xfffeffff
 8001810:	00001388 	.word	0x00001388
 8001814:	efffffff 	.word	0xefffffff

08001818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e042      	b.n	80018b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	223d      	movs	r2, #61	; 0x3d
 800182e:	5c9b      	ldrb	r3, [r3, r2]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d107      	bne.n	8001846 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	223c      	movs	r2, #60	; 0x3c
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f7fe fee5 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	223d      	movs	r2, #61	; 0x3d
 800184a:	2102      	movs	r1, #2
 800184c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	0019      	movs	r1, r3
 8001858:	0010      	movs	r0, r2
 800185a:	f000 fab7 	bl	8001dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2246      	movs	r2, #70	; 0x46
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223e      	movs	r2, #62	; 0x3e
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	223f      	movs	r2, #63	; 0x3f
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2240      	movs	r2, #64	; 0x40
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2241      	movs	r2, #65	; 0x41
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2242      	movs	r2, #66	; 0x42
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2243      	movs	r2, #67	; 0x43
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2244      	movs	r2, #68	; 0x44
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2245      	movs	r2, #69	; 0x45
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	223d      	movs	r2, #61	; 0x3d
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e042      	b.n	8001950 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223d      	movs	r2, #61	; 0x3d
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	223c      	movs	r2, #60	; 0x3c
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f839 	bl	8001958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223d      	movs	r2, #61	; 0x3d
 80018ea:	2102      	movs	r1, #2
 80018ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f000 fa67 	bl	8001dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2246      	movs	r2, #70	; 0x46
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	223e      	movs	r2, #62	; 0x3e
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223f      	movs	r2, #63	; 0x3f
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2241      	movs	r2, #65	; 0x41
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2242      	movs	r2, #66	; 0x42
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2243      	movs	r2, #67	; 0x43
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2244      	movs	r2, #68	; 0x44
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2245      	movs	r2, #69	; 0x45
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	223d      	movs	r2, #61	; 0x3d
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d108      	bne.n	800198a <HAL_TIM_PWM_Start+0x22>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	223e      	movs	r2, #62	; 0x3e
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	4193      	sbcs	r3, r2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	e01f      	b.n	80019ca <HAL_TIM_PWM_Start+0x62>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d108      	bne.n	80019a2 <HAL_TIM_PWM_Start+0x3a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	223f      	movs	r2, #63	; 0x3f
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	4193      	sbcs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	e013      	b.n	80019ca <HAL_TIM_PWM_Start+0x62>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d108      	bne.n	80019ba <HAL_TIM_PWM_Start+0x52>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	5c9b      	ldrb	r3, [r3, r2]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	4193      	sbcs	r3, r2
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	e007      	b.n	80019ca <HAL_TIM_PWM_Start+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2241      	movs	r2, #65	; 0x41
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	4193      	sbcs	r3, r2
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06a      	b.n	8001aa8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d104      	bne.n	80019e2 <HAL_TIM_PWM_Start+0x7a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	223e      	movs	r2, #62	; 0x3e
 80019dc:	2102      	movs	r1, #2
 80019de:	5499      	strb	r1, [r3, r2]
 80019e0:	e013      	b.n	8001a0a <HAL_TIM_PWM_Start+0xa2>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d104      	bne.n	80019f2 <HAL_TIM_PWM_Start+0x8a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	223f      	movs	r2, #63	; 0x3f
 80019ec:	2102      	movs	r1, #2
 80019ee:	5499      	strb	r1, [r3, r2]
 80019f0:	e00b      	b.n	8001a0a <HAL_TIM_PWM_Start+0xa2>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d104      	bne.n	8001a02 <HAL_TIM_PWM_Start+0x9a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	2102      	movs	r1, #2
 80019fe:	5499      	strb	r1, [r3, r2]
 8001a00:	e003      	b.n	8001a0a <HAL_TIM_PWM_Start+0xa2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2241      	movs	r2, #65	; 0x41
 8001a06:	2102      	movs	r1, #2
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 fcca 	bl	80023ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_TIM_PWM_Start+0x148>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d009      	beq.n	8001a36 <HAL_TIM_PWM_Start+0xce>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_TIM_PWM_Start+0x14c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d004      	beq.n	8001a36 <HAL_TIM_PWM_Start+0xce>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_TIM_PWM_Start+0x150>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_TIM_PWM_Start+0xd2>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_TIM_PWM_Start+0xd4>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0209      	lsls	r1, r1, #8
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_TIM_PWM_Start+0x148>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00a      	beq.n	8001a72 <HAL_TIM_PWM_Start+0x10a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d004      	beq.n	8001a72 <HAL_TIM_PWM_Start+0x10a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_TIM_PWM_Start+0x154>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d111      	bne.n	8001a96 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2207      	movs	r2, #7
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b06      	cmp	r3, #6
 8001a82:	d010      	beq.n	8001aa6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	e007      	b.n	8001aa6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40014400 	.word	0x40014400
 8001ab8:	40014800 	.word	0x40014800
 8001abc:	40000400 	.word	0x40000400

08001ac0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	223c      	movs	r2, #60	; 0x3c
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e0a7      	b.n	8001c2a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	223c      	movs	r2, #60	; 0x3c
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d100      	bne.n	8001aea <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001ae8:	e076      	b.n	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d900      	bls.n	8001af2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001af0:	e095      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d04e      	beq.n	8001b96 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d900      	bls.n	8001b00 <HAL_TIM_PWM_ConfigChannel+0x40>
 8001afe:	e08e      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d021      	beq.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001b0c:	e087      	b.n	8001c1e <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f9ce 	bl	8001eb8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2108      	movs	r1, #8
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2104      	movs	r1, #4
 8001b38:	438a      	bics	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6999      	ldr	r1, [r3, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	619a      	str	r2, [r3, #24]
      break;
 8001b4e:	e067      	b.n	8001c20 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 fa2b 	bl	8001fb4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0109      	lsls	r1, r1, #4
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	492e      	ldr	r1, [pc, #184]	; (8001c34 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6999      	ldr	r1, [r3, #24]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	021a      	lsls	r2, r3, #8
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	619a      	str	r2, [r3, #24]
      break;
 8001b94:	e044      	b.n	8001c20 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f000 fa86 	bl	80020b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2108      	movs	r1, #8
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69d9      	ldr	r1, [r3, #28]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
      break;
 8001bd6:	e023      	b.n	8001c20 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fae5 	bl	80021b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	0109      	lsls	r1, r1, #4
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69da      	ldr	r2, [r3, #28]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	490c      	ldr	r1, [pc, #48]	; (8001c34 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	69d9      	ldr	r1, [r3, #28]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	021a      	lsls	r2, r3, #8
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	61da      	str	r2, [r3, #28]
      break;
 8001c1c:	e000      	b.n	8001c20 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001c1e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	223c      	movs	r2, #60	; 0x3c
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b004      	add	sp, #16
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	fffffbff 	.word	0xfffffbff

08001c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223c      	movs	r2, #60	; 0x3c
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_TIM_ConfigClockSource+0x18>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0b7      	b.n	8001dc0 <HAL_TIM_ConfigClockSource+0x188>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	223c      	movs	r2, #60	; 0x3c
 8001c54:	2101      	movs	r1, #1
 8001c56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	223d      	movs	r2, #61	; 0x3d
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2277      	movs	r2, #119	; 0x77
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <HAL_TIM_ConfigClockSource+0x190>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	0192      	lsls	r2, r2, #6
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d040      	beq.n	8001d0e <HAL_TIM_ConfigClockSource+0xd6>
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0192      	lsls	r2, r2, #6
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d900      	bls.n	8001c96 <HAL_TIM_ConfigClockSource+0x5e>
 8001c94:	e088      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0152      	lsls	r2, r2, #5
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d100      	bne.n	8001ca0 <HAL_TIM_ConfigClockSource+0x68>
 8001c9e:	e085      	b.n	8001dac <HAL_TIM_ConfigClockSource+0x174>
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0152      	lsls	r2, r2, #5
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d900      	bls.n	8001caa <HAL_TIM_ConfigClockSource+0x72>
 8001ca8:	e07e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001caa:	2b70      	cmp	r3, #112	; 0x70
 8001cac:	d018      	beq.n	8001ce0 <HAL_TIM_ConfigClockSource+0xa8>
 8001cae:	d900      	bls.n	8001cb2 <HAL_TIM_ConfigClockSource+0x7a>
 8001cb0:	e07a      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cb2:	2b60      	cmp	r3, #96	; 0x60
 8001cb4:	d04f      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0x11e>
 8001cb6:	d900      	bls.n	8001cba <HAL_TIM_ConfigClockSource+0x82>
 8001cb8:	e076      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cba:	2b50      	cmp	r3, #80	; 0x50
 8001cbc:	d03b      	beq.n	8001d36 <HAL_TIM_ConfigClockSource+0xfe>
 8001cbe:	d900      	bls.n	8001cc2 <HAL_TIM_ConfigClockSource+0x8a>
 8001cc0:	e072      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d057      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0x13e>
 8001cc6:	d900      	bls.n	8001cca <HAL_TIM_ConfigClockSource+0x92>
 8001cc8:	e06e      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cca:	2b30      	cmp	r3, #48	; 0x30
 8001ccc:	d063      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x15e>
 8001cce:	d86b      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d060      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x15e>
 8001cd4:	d868      	bhi.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d05d      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x15e>
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d05b      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001cde:	e063      	b.n	8001da8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f000 fb3c 	bl	800236c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2277      	movs	r2, #119	; 0x77
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]
      break;
 8001d0c:	e04f      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f000 fb25 	bl	800236c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	01c9      	lsls	r1, r1, #7
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
      break;
 8001d34:	e03b      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	001a      	movs	r2, r3
 8001d44:	f000 fa98 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2150      	movs	r1, #80	; 0x50
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 faf2 	bl	8002338 <TIM_ITRx_SetConfig>
      break;
 8001d54:	e02b      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	001a      	movs	r2, r3
 8001d64:	f000 fab6 	bl	80022d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2160      	movs	r1, #96	; 0x60
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fae2 	bl	8002338 <TIM_ITRx_SetConfig>
      break;
 8001d74:	e01b      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	001a      	movs	r2, r3
 8001d84:	f000 fa78 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2140      	movs	r1, #64	; 0x40
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 fad2 	bl	8002338 <TIM_ITRx_SetConfig>
      break;
 8001d94:	e00b      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0019      	movs	r1, r3
 8001da0:	0010      	movs	r0, r2
 8001da2:	f000 fac9 	bl	8002338 <TIM_ITRx_SetConfig>
        break;
 8001da6:	e002      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	e000      	b.n	8001dae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001dac:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223d      	movs	r2, #61	; 0x3d
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223c      	movs	r2, #60	; 0x3c
 8001dba:	2100      	movs	r1, #0
 8001dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	ffff00ff 	.word	0xffff00ff

08001dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <TIM_Base_SetConfig+0xd4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d008      	beq.n	8001df6 <TIM_Base_SetConfig+0x2a>
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	05db      	lsls	r3, r3, #23
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0x2a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a2c      	ldr	r2, [pc, #176]	; (8001ea4 <TIM_Base_SetConfig+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d108      	bne.n	8001e08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2270      	movs	r2, #112	; 0x70
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <TIM_Base_SetConfig+0xd4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d014      	beq.n	8001e3a <TIM_Base_SetConfig+0x6e>
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	05db      	lsls	r3, r3, #23
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x6e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <TIM_Base_SetConfig+0xd8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x6e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <TIM_Base_SetConfig+0xdc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x6e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <TIM_Base_SetConfig+0xe0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x6e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <TIM_Base_SetConfig+0xe4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <TIM_Base_SetConfig+0xe8>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	4393      	bics	r3, r2
 8001e52:	001a      	movs	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <TIM_Base_SetConfig+0xd4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0xbe>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <TIM_Base_SetConfig+0xe0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0xbe>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <TIM_Base_SetConfig+0xe4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d103      	bne.n	8001e92 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	615a      	str	r2, [r3, #20]
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40002000 	.word	0x40002000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800
 8001eb4:	fffffcff 	.word	0xfffffcff

08001eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4393      	bics	r3, r2
 8001eca:	001a      	movs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2270      	movs	r2, #112	; 0x70
 8001ee6:	4393      	bics	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2203      	movs	r2, #3
 8001eee:	4393      	bics	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2202      	movs	r2, #2
 8001f00:	4393      	bics	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <TIM_OC1_SetConfig+0xe8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_OC1_SetConfig+0x6e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <TIM_OC1_SetConfig+0xec>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_OC1_SetConfig+0x6e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <TIM_OC1_SetConfig+0xf0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10c      	bne.n	8001f40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <TIM_OC1_SetConfig+0xe8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <TIM_OC1_SetConfig+0xa0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <TIM_OC1_SetConfig+0xec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_OC1_SetConfig+0xa0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <TIM_OC1_SetConfig+0xf0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <TIM_OC1_SetConfig+0xf4>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <TIM_OC1_SetConfig+0xf8>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	621a      	str	r2, [r3, #32]
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b006      	add	sp, #24
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800
 8001fac:	fffffeff 	.word	0xfffffeff
 8001fb0:	fffffdff 	.word	0xfffffdff

08001fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <TIM_OC2_SetConfig+0xe0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <TIM_OC2_SetConfig+0xe4>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	4393      	bics	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <TIM_OC2_SetConfig+0xe8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10d      	bne.n	8002032 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	4393      	bics	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	4393      	bics	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <TIM_OC2_SetConfig+0xe8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <TIM_OC2_SetConfig+0x96>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <TIM_OC2_SetConfig+0xec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <TIM_OC2_SetConfig+0x96>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a17      	ldr	r2, [pc, #92]	; (80020a4 <TIM_OC2_SetConfig+0xf0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d113      	bne.n	8002072 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <TIM_OC2_SetConfig+0xf4>)
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <TIM_OC2_SetConfig+0xf8>)
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	621a      	str	r2, [r3, #32]
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b006      	add	sp, #24
 8002092:	bd80      	pop	{r7, pc}
 8002094:	ffff8fff 	.word	0xffff8fff
 8002098:	fffffcff 	.word	0xfffffcff
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40014800 	.word	0x40014800
 80020a8:	fffffbff 	.word	0xfffffbff
 80020ac:	fffff7ff 	.word	0xfffff7ff

080020b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <TIM_OC3_SetConfig+0xdc>)
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2270      	movs	r2, #112	; 0x70
 80020dc:	4393      	bics	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2203      	movs	r2, #3
 80020e4:	4393      	bics	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <TIM_OC3_SetConfig+0xe0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <TIM_OC3_SetConfig+0xe4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10d      	bne.n	800212a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <TIM_OC3_SetConfig+0xe8>)
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <TIM_OC3_SetConfig+0xec>)
 8002126:	4013      	ands	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <TIM_OC3_SetConfig+0xe4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_OC3_SetConfig+0x92>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <TIM_OC3_SetConfig+0xf0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_OC3_SetConfig+0x92>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <TIM_OC3_SetConfig+0xf4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <TIM_OC3_SetConfig+0xf8>)
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <TIM_OC3_SetConfig+0xfc>)
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	621a      	str	r2, [r3, #32]
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}
 800218c:	fffffeff 	.word	0xfffffeff
 8002190:	fffffdff 	.word	0xfffffdff
 8002194:	40012c00 	.word	0x40012c00
 8002198:	fffff7ff 	.word	0xfffff7ff
 800219c:	fffffbff 	.word	0xfffffbff
 80021a0:	40014400 	.word	0x40014400
 80021a4:	40014800 	.word	0x40014800
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	ffffdfff 	.word	0xffffdfff

080021b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <TIM_OC4_SetConfig+0xa8>)
 80021c0:	401a      	ands	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <TIM_OC4_SetConfig+0xac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <TIM_OC4_SetConfig+0xb0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <TIM_OC4_SetConfig+0xb4>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	031b      	lsls	r3, r3, #12
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <TIM_OC4_SetConfig+0xb8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <TIM_OC4_SetConfig+0x70>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <TIM_OC4_SetConfig+0xbc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <TIM_OC4_SetConfig+0x70>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <TIM_OC4_SetConfig+0xc0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d109      	bne.n	8002234 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <TIM_OC4_SetConfig+0xc4>)
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	621a      	str	r2, [r3, #32]
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b006      	add	sp, #24
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	ffffefff 	.word	0xffffefff
 800225c:	ffff8fff 	.word	0xffff8fff
 8002260:	fffffcff 	.word	0xfffffcff
 8002264:	ffffdfff 	.word	0xffffdfff
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800
 8002274:	ffffbfff 	.word	0xffffbfff

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2201      	movs	r2, #1
 8002290:	4393      	bics	r3, r2
 8002292:	001a      	movs	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	22f0      	movs	r2, #240	; 0xf0
 80022a2:	4393      	bics	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	220a      	movs	r2, #10
 80022b4:	4393      	bics	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	2210      	movs	r2, #16
 80022e6:	4393      	bics	r3, r2
 80022e8:	001a      	movs	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <TIM_TI2_ConfigInputStage+0x60>)
 80022fe:	4013      	ands	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	031b      	lsls	r3, r3, #12
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	22a0      	movs	r2, #160	; 0xa0
 8002310:	4393      	bics	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b006      	add	sp, #24
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	ffff0fff 	.word	0xffff0fff

08002338 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2270      	movs	r2, #112	; 0x70
 800234c:	4393      	bics	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	2207      	movs	r2, #7
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b004      	add	sp, #16
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <TIM_ETR_SetConfig+0x3c>)
 8002384:	4013      	ands	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	431a      	orrs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	ffff00ff 	.word	0xffff00ff

080023ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	221f      	movs	r2, #31
 80023bc:	4013      	ands	r3, r2
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	43d2      	mvns	r2, r2
 80023ce:	401a      	ands	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	211f      	movs	r1, #31
 80023dc:	400b      	ands	r3, r1
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4099      	lsls	r1, r3
 80023e2:	000b      	movs	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b006      	add	sp, #24
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223c      	movs	r2, #60	; 0x3c
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002408:	2302      	movs	r3, #2
 800240a:	e042      	b.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	223c      	movs	r2, #60	; 0x3c
 8002410:	2101      	movs	r1, #1
 8002412:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	223d      	movs	r2, #61	; 0x3d
 8002418:	2102      	movs	r1, #2
 800241a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2270      	movs	r2, #112	; 0x70
 8002430:	4393      	bics	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a14      	ldr	r2, [pc, #80]	; (800249c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00a      	beq.n	8002466 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	05db      	lsls	r3, r3, #23
 8002458:	429a      	cmp	r2, r3
 800245a:	d004      	beq.n	8002466 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10c      	bne.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	4393      	bics	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4313      	orrs	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	223d      	movs	r2, #61	; 0x3d
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223c      	movs	r2, #60	; 0x3c
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400

080024a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e044      	b.n	8002540 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d107      	bne.n	80024ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2274      	movs	r2, #116	; 0x74
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe f8fb 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2224      	movs	r2, #36	; 0x24
 80024d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	438a      	bics	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f8da 	bl	80026a0 <UART_SetConfig>
 80024ec:	0003      	movs	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e024      	b.n	8002540 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f9f7 	bl	80028f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	490d      	ldr	r1, [pc, #52]	; (8002548 <HAL_UART_Init+0xa4>)
 8002512:	400a      	ands	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	212a      	movs	r1, #42	; 0x2a
 8002522:	438a      	bics	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fa8f 	bl	8002a5c <UART_CheckIdleState>
 800253e:	0003      	movs	r3, r0
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}
 8002548:	ffffb7ff 	.word	0xffffb7ff

0800254c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	1dbb      	adds	r3, r7, #6
 800255a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002560:	2b20      	cmp	r3, #32
 8002562:	d000      	beq.n	8002566 <HAL_UART_Transmit+0x1a>
 8002564:	e096      	b.n	8002694 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_UART_Transmit+0x28>
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e08e      	b.n	8002696 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	015b      	lsls	r3, r3, #5
 8002580:	429a      	cmp	r2, r3
 8002582:	d109      	bne.n	8002598 <HAL_UART_Transmit+0x4c>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e07e      	b.n	8002696 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2274      	movs	r2, #116	; 0x74
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Transmit+0x5a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e077      	b.n	8002696 <HAL_UART_Transmit+0x14a>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2274      	movs	r2, #116	; 0x74
 80025aa:	2101      	movs	r1, #1
 80025ac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	2100      	movs	r1, #0
 80025b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025bc:	f7fe f9a8 	bl	8000910 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1dba      	adds	r2, r7, #6
 80025c8:	2150      	movs	r1, #80	; 0x50
 80025ca:	8812      	ldrh	r2, [r2, #0]
 80025cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1dba      	adds	r2, r7, #6
 80025d2:	2152      	movs	r1, #82	; 0x52
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	015b      	lsls	r3, r3, #5
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d108      	bne.n	80025f6 <HAL_UART_Transmit+0xaa>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e003      	b.n	80025fe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2274      	movs	r2, #116	; 0x74
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002606:	e02d      	b.n	8002664 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	0013      	movs	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	f000 fa69 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e039      	b.n	8002696 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	05d2      	lsls	r2, r2, #23
 8002632:	0dd2      	lsrs	r2, r2, #23
 8002634:	b292      	uxth	r2, r2
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	3302      	adds	r3, #2
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e008      	b.n	8002652 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b292      	uxth	r2, r2
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3301      	adds	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2252      	movs	r2, #82	; 0x52
 8002656:	5a9b      	ldrh	r3, [r3, r2]
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b299      	uxth	r1, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2252      	movs	r2, #82	; 0x52
 8002662:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2252      	movs	r2, #82	; 0x52
 8002668:	5a9b      	ldrh	r3, [r3, r2]
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1cb      	bne.n	8002608 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	0013      	movs	r3, r2
 800267a:	2200      	movs	r2, #0
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	f000 fa35 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e005      	b.n	8002696 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b008      	add	sp, #32
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026a8:	231e      	movs	r3, #30
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a84      	ldr	r2, [pc, #528]	; (80028e0 <UART_SetConfig+0x240>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a7f      	ldr	r2, [pc, #508]	; (80028e4 <UART_SetConfig+0x244>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a76      	ldr	r2, [pc, #472]	; (80028e8 <UART_SetConfig+0x248>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800271c:	4b73      	ldr	r3, [pc, #460]	; (80028ec <UART_SetConfig+0x24c>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	2203      	movs	r2, #3
 8002722:	4013      	ands	r3, r2
 8002724:	2b03      	cmp	r3, #3
 8002726:	d00d      	beq.n	8002744 <UART_SetConfig+0xa4>
 8002728:	d81b      	bhi.n	8002762 <UART_SetConfig+0xc2>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d014      	beq.n	8002758 <UART_SetConfig+0xb8>
 800272e:	d818      	bhi.n	8002762 <UART_SetConfig+0xc2>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <UART_SetConfig+0x9a>
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00a      	beq.n	800274e <UART_SetConfig+0xae>
 8002738:	e013      	b.n	8002762 <UART_SetConfig+0xc2>
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e012      	b.n	800276a <UART_SetConfig+0xca>
 8002744:	231f      	movs	r3, #31
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e00d      	b.n	800276a <UART_SetConfig+0xca>
 800274e:	231f      	movs	r3, #31
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	2204      	movs	r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e008      	b.n	800276a <UART_SetConfig+0xca>
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2208      	movs	r2, #8
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e003      	b.n	800276a <UART_SetConfig+0xca>
 8002762:	231f      	movs	r3, #31
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2210      	movs	r2, #16
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	429a      	cmp	r2, r3
 8002776:	d15d      	bne.n	8002834 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002778:	231f      	movs	r3, #31
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d015      	beq.n	80027ae <UART_SetConfig+0x10e>
 8002782:	dc18      	bgt.n	80027b6 <UART_SetConfig+0x116>
 8002784:	2b04      	cmp	r3, #4
 8002786:	d00d      	beq.n	80027a4 <UART_SetConfig+0x104>
 8002788:	dc15      	bgt.n	80027b6 <UART_SetConfig+0x116>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <UART_SetConfig+0xf4>
 800278e:	2b02      	cmp	r3, #2
 8002790:	d005      	beq.n	800279e <UART_SetConfig+0xfe>
 8002792:	e010      	b.n	80027b6 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002794:	f7fe ff5c 	bl	8001650 <HAL_RCC_GetPCLK1Freq>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        break;
 800279c:	e012      	b.n	80027c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <UART_SetConfig+0x250>)
 80027a0:	61bb      	str	r3, [r7, #24]
        break;
 80027a2:	e00f      	b.n	80027c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a4:	f7fe fee6 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 80027a8:	0003      	movs	r3, r0
 80027aa:	61bb      	str	r3, [r7, #24]
        break;
 80027ac:	e00a      	b.n	80027c4 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	61bb      	str	r3, [r7, #24]
        break;
 80027b4:	e006      	b.n	80027c4 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027ba:	231e      	movs	r3, #30
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
        break;
 80027c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d100      	bne.n	80027cc <UART_SetConfig+0x12c>
 80027ca:	e07b      	b.n	80028c4 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	005a      	lsls	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	18d2      	adds	r2, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0019      	movs	r1, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	f7fd fc9c 	bl	800011c <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d91c      	bls.n	800282a <UART_SetConfig+0x18a>
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d217      	bcs.n	800282a <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	200e      	movs	r0, #14
 8002800:	183b      	adds	r3, r7, r0
 8002802:	210f      	movs	r1, #15
 8002804:	438a      	bics	r2, r1
 8002806:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	b29b      	uxth	r3, r3
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	b299      	uxth	r1, r3
 8002814:	183b      	adds	r3, r7, r0
 8002816:	183a      	adds	r2, r7, r0
 8002818:	8812      	ldrh	r2, [r2, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	183a      	adds	r2, r7, r0
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	e04c      	b.n	80028c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800282a:	231e      	movs	r3, #30
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e047      	b.n	80028c4 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002834:	231f      	movs	r3, #31
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d015      	beq.n	800286a <UART_SetConfig+0x1ca>
 800283e:	dc18      	bgt.n	8002872 <UART_SetConfig+0x1d2>
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00d      	beq.n	8002860 <UART_SetConfig+0x1c0>
 8002844:	dc15      	bgt.n	8002872 <UART_SetConfig+0x1d2>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <UART_SetConfig+0x1b0>
 800284a:	2b02      	cmp	r3, #2
 800284c:	d005      	beq.n	800285a <UART_SetConfig+0x1ba>
 800284e:	e010      	b.n	8002872 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002850:	f7fe fefe 	bl	8001650 <HAL_RCC_GetPCLK1Freq>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
        break;
 8002858:	e012      	b.n	8002880 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <UART_SetConfig+0x250>)
 800285c:	61bb      	str	r3, [r7, #24]
        break;
 800285e:	e00f      	b.n	8002880 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002860:	f7fe fe88 	bl	8001574 <HAL_RCC_GetSysClockFreq>
 8002864:	0003      	movs	r3, r0
 8002866:	61bb      	str	r3, [r7, #24]
        break;
 8002868:	e00a      	b.n	8002880 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	61bb      	str	r3, [r7, #24]
        break;
 8002870:	e006      	b.n	8002880 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002876:	231e      	movs	r3, #30
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
        break;
 800287e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01e      	beq.n	80028c4 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	085a      	lsrs	r2, r3, #1
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	18d2      	adds	r2, r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0019      	movs	r1, r3
 8002896:	0010      	movs	r0, r2
 8002898:	f7fd fc40 	bl	800011c <__udivsi3>
 800289c:	0003      	movs	r3, r0
 800289e:	b29b      	uxth	r3, r3
 80028a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d909      	bls.n	80028bc <UART_SetConfig+0x21c>
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d204      	bcs.n	80028bc <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	e003      	b.n	80028c4 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80028bc:	231e      	movs	r3, #30
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80028d0:	231e      	movs	r3, #30
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b008      	add	sp, #32
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	ffff69f3 	.word	0xffff69f3
 80028e4:	ffffcfff 	.word	0xffffcfff
 80028e8:	fffff4ff 	.word	0xfffff4ff
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200

080028f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	d00b      	beq.n	800291e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a4a      	ldr	r2, [pc, #296]	; (8002a38 <UART_AdvFeatureConfig+0x144>)
 800290e:	4013      	ands	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2202      	movs	r2, #2
 8002924:	4013      	ands	r3, r2
 8002926:	d00b      	beq.n	8002940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <UART_AdvFeatureConfig+0x148>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d00b      	beq.n	8002962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <UART_AdvFeatureConfig+0x14c>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2208      	movs	r2, #8
 8002968:	4013      	ands	r3, r2
 800296a:	d00b      	beq.n	8002984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <UART_AdvFeatureConfig+0x150>)
 8002974:	4013      	ands	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2210      	movs	r2, #16
 800298a:	4013      	ands	r3, r2
 800298c:	d00b      	beq.n	80029a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a2c      	ldr	r2, [pc, #176]	; (8002a48 <UART_AdvFeatureConfig+0x154>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2220      	movs	r2, #32
 80029ac:	4013      	ands	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <UART_AdvFeatureConfig+0x158>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	4013      	ands	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <UART_AdvFeatureConfig+0x15c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	035b      	lsls	r3, r3, #13
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10b      	bne.n	8002a0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <UART_AdvFeatureConfig+0x160>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	4013      	ands	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <UART_AdvFeatureConfig+0x164>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  }
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fffdffff 	.word	0xfffdffff
 8002a3c:	fffeffff 	.word	0xfffeffff
 8002a40:	fffbffff 	.word	0xfffbffff
 8002a44:	ffff7fff 	.word	0xffff7fff
 8002a48:	ffffefff 	.word	0xffffefff
 8002a4c:	ffffdfff 	.word	0xffffdfff
 8002a50:	ffefffff 	.word	0xffefffff
 8002a54:	ff9fffff 	.word	0xff9fffff
 8002a58:	fff7ffff 	.word	0xfff7ffff

08002a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a6c:	f7fd ff50 	bl	8000910 <HAL_GetTick>
 8002a70:	0003      	movs	r3, r0
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d10c      	bne.n	8002a9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	0391      	lsls	r1, r2, #14
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <UART_CheckIdleState+0x8c>)
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f000 f82c 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d001      	beq.n	8002a9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e021      	b.n	8002ae0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d10c      	bne.n	8002ac4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	03d1      	lsls	r1, r2, #15
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <UART_CheckIdleState+0x8c>)
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f000 f818 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d001      	beq.n	8002ac4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e00d      	b.n	8002ae0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2274      	movs	r2, #116	; 0x74
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	01ffffff 	.word	0x01ffffff

08002aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afc:	e05e      	b.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	d05b      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7fd ff04 	bl	8000910 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11b      	bne.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	492f      	ldr	r1, [pc, #188]	; (8002be4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	438a      	bics	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2274      	movs	r2, #116	; 0x74
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e044      	b.n	8002bdc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d02e      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	401a      	ands	r2, r3
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d124      	bne.n	8002bbc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2280      	movs	r2, #128	; 0x80
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4917      	ldr	r1, [pc, #92]	; (8002be4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	2120      	movs	r1, #32
 8002bae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2274      	movs	r2, #116	; 0x74
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e00f      	b.n	8002bdc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	425a      	negs	r2, r3
 8002bcc:	4153      	adcs	r3, r2
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d091      	beq.n	8002afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	fffffe5f 	.word	0xfffffe5f

08002be8 <__errno>:
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <__errno+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	4d0c      	ldr	r5, [pc, #48]	; (8002c2c <__libc_init_array+0x38>)
 8002bfa:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfc:	1b64      	subs	r4, r4, r5
 8002bfe:	10a4      	asrs	r4, r4, #2
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	2600      	movs	r6, #0
 8002c06:	f000 fc47 	bl	8003498 <_init>
 8002c0a:	4d0a      	ldr	r5, [pc, #40]	; (8002c34 <__libc_init_array+0x40>)
 8002c0c:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <__libc_init_array+0x44>)
 8002c0e:	1b64      	subs	r4, r4, r5
 8002c10:	10a4      	asrs	r4, r4, #2
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	00b3      	lsls	r3, r6, #2
 8002c1a:	58eb      	ldr	r3, [r5, r3]
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	00b3      	lsls	r3, r6, #2
 8002c24:	58eb      	ldr	r3, [r5, r3]
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08003558 	.word	0x08003558
 8002c30:	08003558 	.word	0x08003558
 8002c34:	08003558 	.word	0x08003558
 8002c38:	0800355c 	.word	0x0800355c

08002c3c <memset>:
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	1882      	adds	r2, r0, r2
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	7019      	strb	r1, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <siprintf>:
 8002c4c:	b40e      	push	{r1, r2, r3}
 8002c4e:	b500      	push	{lr}
 8002c50:	490b      	ldr	r1, [pc, #44]	; (8002c80 <siprintf+0x34>)
 8002c52:	b09c      	sub	sp, #112	; 0x70
 8002c54:	ab1d      	add	r3, sp, #116	; 0x74
 8002c56:	9002      	str	r0, [sp, #8]
 8002c58:	9006      	str	r0, [sp, #24]
 8002c5a:	9107      	str	r1, [sp, #28]
 8002c5c:	9104      	str	r1, [sp, #16]
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <siprintf+0x38>)
 8002c60:	4909      	ldr	r1, [pc, #36]	; (8002c88 <siprintf+0x3c>)
 8002c62:	cb04      	ldmia	r3!, {r2}
 8002c64:	9105      	str	r1, [sp, #20]
 8002c66:	6800      	ldr	r0, [r0, #0]
 8002c68:	a902      	add	r1, sp, #8
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	f000 f870 	bl	8002d50 <_svfiprintf_r>
 8002c70:	2300      	movs	r3, #0
 8002c72:	9a02      	ldr	r2, [sp, #8]
 8002c74:	7013      	strb	r3, [r2, #0]
 8002c76:	b01c      	add	sp, #112	; 0x70
 8002c78:	bc08      	pop	{r3}
 8002c7a:	b003      	add	sp, #12
 8002c7c:	4718      	bx	r3
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	7fffffff 	.word	0x7fffffff
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	ffff0208 	.word	0xffff0208

08002c8c <__ssputs_r>:
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	688e      	ldr	r6, [r1, #8]
 8002c90:	b085      	sub	sp, #20
 8002c92:	0007      	movs	r7, r0
 8002c94:	000c      	movs	r4, r1
 8002c96:	9203      	str	r2, [sp, #12]
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	429e      	cmp	r6, r3
 8002c9c:	d83c      	bhi.n	8002d18 <__ssputs_r+0x8c>
 8002c9e:	2390      	movs	r3, #144	; 0x90
 8002ca0:	898a      	ldrh	r2, [r1, #12]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	421a      	tst	r2, r3
 8002ca6:	d034      	beq.n	8002d12 <__ssputs_r+0x86>
 8002ca8:	2503      	movs	r5, #3
 8002caa:	6909      	ldr	r1, [r1, #16]
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	1a5b      	subs	r3, r3, r1
 8002cb0:	9302      	str	r3, [sp, #8]
 8002cb2:	6963      	ldr	r3, [r4, #20]
 8002cb4:	9802      	ldr	r0, [sp, #8]
 8002cb6:	435d      	muls	r5, r3
 8002cb8:	0feb      	lsrs	r3, r5, #31
 8002cba:	195d      	adds	r5, r3, r5
 8002cbc:	9b01      	ldr	r3, [sp, #4]
 8002cbe:	106d      	asrs	r5, r5, #1
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	181b      	adds	r3, r3, r0
 8002cc4:	42ab      	cmp	r3, r5
 8002cc6:	d900      	bls.n	8002cca <__ssputs_r+0x3e>
 8002cc8:	001d      	movs	r5, r3
 8002cca:	0553      	lsls	r3, r2, #21
 8002ccc:	d532      	bpl.n	8002d34 <__ssputs_r+0xa8>
 8002cce:	0029      	movs	r1, r5
 8002cd0:	0038      	movs	r0, r7
 8002cd2:	f000 fb31 	bl	8003338 <_malloc_r>
 8002cd6:	1e06      	subs	r6, r0, #0
 8002cd8:	d109      	bne.n	8002cee <__ssputs_r+0x62>
 8002cda:	230c      	movs	r3, #12
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	89a2      	ldrh	r2, [r4, #12]
 8002ce4:	4240      	negs	r0, r0
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	b005      	add	sp, #20
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cee:	9a02      	ldr	r2, [sp, #8]
 8002cf0:	6921      	ldr	r1, [r4, #16]
 8002cf2:	f000 faba 	bl	800326a <memcpy>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <__ssputs_r+0xc0>)
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	81a3      	strh	r3, [r4, #12]
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	6126      	str	r6, [r4, #16]
 8002d06:	18f6      	adds	r6, r6, r3
 8002d08:	6026      	str	r6, [r4, #0]
 8002d0a:	6165      	str	r5, [r4, #20]
 8002d0c:	9e01      	ldr	r6, [sp, #4]
 8002d0e:	1aed      	subs	r5, r5, r3
 8002d10:	60a5      	str	r5, [r4, #8]
 8002d12:	9b01      	ldr	r3, [sp, #4]
 8002d14:	429e      	cmp	r6, r3
 8002d16:	d900      	bls.n	8002d1a <__ssputs_r+0x8e>
 8002d18:	9e01      	ldr	r6, [sp, #4]
 8002d1a:	0032      	movs	r2, r6
 8002d1c:	9903      	ldr	r1, [sp, #12]
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	f000 faac 	bl	800327c <memmove>
 8002d24:	68a3      	ldr	r3, [r4, #8]
 8002d26:	2000      	movs	r0, #0
 8002d28:	1b9b      	subs	r3, r3, r6
 8002d2a:	60a3      	str	r3, [r4, #8]
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	199e      	adds	r6, r3, r6
 8002d30:	6026      	str	r6, [r4, #0]
 8002d32:	e7da      	b.n	8002cea <__ssputs_r+0x5e>
 8002d34:	002a      	movs	r2, r5
 8002d36:	0038      	movs	r0, r7
 8002d38:	f000 fb5c 	bl	80033f4 <_realloc_r>
 8002d3c:	1e06      	subs	r6, r0, #0
 8002d3e:	d1e0      	bne.n	8002d02 <__ssputs_r+0x76>
 8002d40:	0038      	movs	r0, r7
 8002d42:	6921      	ldr	r1, [r4, #16]
 8002d44:	f000 faae 	bl	80032a4 <_free_r>
 8002d48:	e7c7      	b.n	8002cda <__ssputs_r+0x4e>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fffffb7f 	.word	0xfffffb7f

08002d50 <_svfiprintf_r>:
 8002d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d52:	b0a1      	sub	sp, #132	; 0x84
 8002d54:	9003      	str	r0, [sp, #12]
 8002d56:	001d      	movs	r5, r3
 8002d58:	898b      	ldrh	r3, [r1, #12]
 8002d5a:	000f      	movs	r7, r1
 8002d5c:	0016      	movs	r6, r2
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	d511      	bpl.n	8002d86 <_svfiprintf_r+0x36>
 8002d62:	690b      	ldr	r3, [r1, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10e      	bne.n	8002d86 <_svfiprintf_r+0x36>
 8002d68:	2140      	movs	r1, #64	; 0x40
 8002d6a:	f000 fae5 	bl	8003338 <_malloc_r>
 8002d6e:	6038      	str	r0, [r7, #0]
 8002d70:	6138      	str	r0, [r7, #16]
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d105      	bne.n	8002d82 <_svfiprintf_r+0x32>
 8002d76:	230c      	movs	r3, #12
 8002d78:	9a03      	ldr	r2, [sp, #12]
 8002d7a:	3801      	subs	r0, #1
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	b021      	add	sp, #132	; 0x84
 8002d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d82:	2340      	movs	r3, #64	; 0x40
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	2300      	movs	r3, #0
 8002d88:	ac08      	add	r4, sp, #32
 8002d8a:	6163      	str	r3, [r4, #20]
 8002d8c:	3320      	adds	r3, #32
 8002d8e:	7663      	strb	r3, [r4, #25]
 8002d90:	3310      	adds	r3, #16
 8002d92:	76a3      	strb	r3, [r4, #26]
 8002d94:	9507      	str	r5, [sp, #28]
 8002d96:	0035      	movs	r5, r6
 8002d98:	782b      	ldrb	r3, [r5, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <_svfiprintf_r+0x52>
 8002d9e:	2b25      	cmp	r3, #37	; 0x25
 8002da0:	d147      	bne.n	8002e32 <_svfiprintf_r+0xe2>
 8002da2:	1bab      	subs	r3, r5, r6
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	42b5      	cmp	r5, r6
 8002da8:	d00c      	beq.n	8002dc4 <_svfiprintf_r+0x74>
 8002daa:	0032      	movs	r2, r6
 8002dac:	0039      	movs	r1, r7
 8002dae:	9803      	ldr	r0, [sp, #12]
 8002db0:	f7ff ff6c 	bl	8002c8c <__ssputs_r>
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	d100      	bne.n	8002dba <_svfiprintf_r+0x6a>
 8002db8:	e0ae      	b.n	8002f18 <_svfiprintf_r+0x1c8>
 8002dba:	6962      	ldr	r2, [r4, #20]
 8002dbc:	9b05      	ldr	r3, [sp, #20]
 8002dbe:	4694      	mov	ip, r2
 8002dc0:	4463      	add	r3, ip
 8002dc2:	6163      	str	r3, [r4, #20]
 8002dc4:	782b      	ldrb	r3, [r5, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <_svfiprintf_r+0x7c>
 8002dca:	e0a5      	b.n	8002f18 <_svfiprintf_r+0x1c8>
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2300      	movs	r3, #0
 8002dd0:	4252      	negs	r2, r2
 8002dd2:	6062      	str	r2, [r4, #4]
 8002dd4:	a904      	add	r1, sp, #16
 8002dd6:	3254      	adds	r2, #84	; 0x54
 8002dd8:	1852      	adds	r2, r2, r1
 8002dda:	1c6e      	adds	r6, r5, #1
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	60e3      	str	r3, [r4, #12]
 8002de0:	60a3      	str	r3, [r4, #8]
 8002de2:	7013      	strb	r3, [r2, #0]
 8002de4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002de6:	2205      	movs	r2, #5
 8002de8:	7831      	ldrb	r1, [r6, #0]
 8002dea:	4854      	ldr	r0, [pc, #336]	; (8002f3c <_svfiprintf_r+0x1ec>)
 8002dec:	f000 fa32 	bl	8003254 <memchr>
 8002df0:	1c75      	adds	r5, r6, #1
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d11f      	bne.n	8002e36 <_svfiprintf_r+0xe6>
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	06d3      	lsls	r3, r2, #27
 8002dfa:	d504      	bpl.n	8002e06 <_svfiprintf_r+0xb6>
 8002dfc:	2353      	movs	r3, #83	; 0x53
 8002dfe:	a904      	add	r1, sp, #16
 8002e00:	185b      	adds	r3, r3, r1
 8002e02:	2120      	movs	r1, #32
 8002e04:	7019      	strb	r1, [r3, #0]
 8002e06:	0713      	lsls	r3, r2, #28
 8002e08:	d504      	bpl.n	8002e14 <_svfiprintf_r+0xc4>
 8002e0a:	2353      	movs	r3, #83	; 0x53
 8002e0c:	a904      	add	r1, sp, #16
 8002e0e:	185b      	adds	r3, r3, r1
 8002e10:	212b      	movs	r1, #43	; 0x2b
 8002e12:	7019      	strb	r1, [r3, #0]
 8002e14:	7833      	ldrb	r3, [r6, #0]
 8002e16:	2b2a      	cmp	r3, #42	; 0x2a
 8002e18:	d016      	beq.n	8002e48 <_svfiprintf_r+0xf8>
 8002e1a:	0035      	movs	r5, r6
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	200a      	movs	r0, #10
 8002e20:	68e3      	ldr	r3, [r4, #12]
 8002e22:	782a      	ldrb	r2, [r5, #0]
 8002e24:	1c6e      	adds	r6, r5, #1
 8002e26:	3a30      	subs	r2, #48	; 0x30
 8002e28:	2a09      	cmp	r2, #9
 8002e2a:	d94e      	bls.n	8002eca <_svfiprintf_r+0x17a>
 8002e2c:	2900      	cmp	r1, #0
 8002e2e:	d111      	bne.n	8002e54 <_svfiprintf_r+0x104>
 8002e30:	e017      	b.n	8002e62 <_svfiprintf_r+0x112>
 8002e32:	3501      	adds	r5, #1
 8002e34:	e7b0      	b.n	8002d98 <_svfiprintf_r+0x48>
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <_svfiprintf_r+0x1ec>)
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	1ac0      	subs	r0, r0, r3
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	4083      	lsls	r3, r0
 8002e40:	4313      	orrs	r3, r2
 8002e42:	002e      	movs	r6, r5
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	e7ce      	b.n	8002de6 <_svfiprintf_r+0x96>
 8002e48:	9b07      	ldr	r3, [sp, #28]
 8002e4a:	1d19      	adds	r1, r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	9107      	str	r1, [sp, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db01      	blt.n	8002e58 <_svfiprintf_r+0x108>
 8002e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e56:	e004      	b.n	8002e62 <_svfiprintf_r+0x112>
 8002e58:	425b      	negs	r3, r3
 8002e5a:	60e3      	str	r3, [r4, #12]
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	782b      	ldrb	r3, [r5, #0]
 8002e64:	2b2e      	cmp	r3, #46	; 0x2e
 8002e66:	d10a      	bne.n	8002e7e <_svfiprintf_r+0x12e>
 8002e68:	786b      	ldrb	r3, [r5, #1]
 8002e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6c:	d135      	bne.n	8002eda <_svfiprintf_r+0x18a>
 8002e6e:	9b07      	ldr	r3, [sp, #28]
 8002e70:	3502      	adds	r5, #2
 8002e72:	1d1a      	adds	r2, r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	9207      	str	r2, [sp, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db2b      	blt.n	8002ed4 <_svfiprintf_r+0x184>
 8002e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e7e:	4e30      	ldr	r6, [pc, #192]	; (8002f40 <_svfiprintf_r+0x1f0>)
 8002e80:	2203      	movs	r2, #3
 8002e82:	0030      	movs	r0, r6
 8002e84:	7829      	ldrb	r1, [r5, #0]
 8002e86:	f000 f9e5 	bl	8003254 <memchr>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d006      	beq.n	8002e9c <_svfiprintf_r+0x14c>
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	1b80      	subs	r0, r0, r6
 8002e92:	4083      	lsls	r3, r0
 8002e94:	6822      	ldr	r2, [r4, #0]
 8002e96:	3501      	adds	r5, #1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	6023      	str	r3, [r4, #0]
 8002e9c:	7829      	ldrb	r1, [r5, #0]
 8002e9e:	2206      	movs	r2, #6
 8002ea0:	4828      	ldr	r0, [pc, #160]	; (8002f44 <_svfiprintf_r+0x1f4>)
 8002ea2:	1c6e      	adds	r6, r5, #1
 8002ea4:	7621      	strb	r1, [r4, #24]
 8002ea6:	f000 f9d5 	bl	8003254 <memchr>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d03c      	beq.n	8002f28 <_svfiprintf_r+0x1d8>
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <_svfiprintf_r+0x1f8>)
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d125      	bne.n	8002f00 <_svfiprintf_r+0x1b0>
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	9b07      	ldr	r3, [sp, #28]
 8002eb8:	3307      	adds	r3, #7
 8002eba:	4393      	bics	r3, r2
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	9307      	str	r3, [sp, #28]
 8002ec0:	6963      	ldr	r3, [r4, #20]
 8002ec2:	9a04      	ldr	r2, [sp, #16]
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	6163      	str	r3, [r4, #20]
 8002ec8:	e765      	b.n	8002d96 <_svfiprintf_r+0x46>
 8002eca:	4343      	muls	r3, r0
 8002ecc:	0035      	movs	r5, r6
 8002ece:	2101      	movs	r1, #1
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	e7a6      	b.n	8002e22 <_svfiprintf_r+0xd2>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	e7d0      	b.n	8002e7c <_svfiprintf_r+0x12c>
 8002eda:	2300      	movs	r3, #0
 8002edc:	200a      	movs	r0, #10
 8002ede:	001a      	movs	r2, r3
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	6063      	str	r3, [r4, #4]
 8002ee4:	7829      	ldrb	r1, [r5, #0]
 8002ee6:	1c6e      	adds	r6, r5, #1
 8002ee8:	3930      	subs	r1, #48	; 0x30
 8002eea:	2909      	cmp	r1, #9
 8002eec:	d903      	bls.n	8002ef6 <_svfiprintf_r+0x1a6>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0c5      	beq.n	8002e7e <_svfiprintf_r+0x12e>
 8002ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ef4:	e7c3      	b.n	8002e7e <_svfiprintf_r+0x12e>
 8002ef6:	4342      	muls	r2, r0
 8002ef8:	0035      	movs	r5, r6
 8002efa:	2301      	movs	r3, #1
 8002efc:	1852      	adds	r2, r2, r1
 8002efe:	e7f1      	b.n	8002ee4 <_svfiprintf_r+0x194>
 8002f00:	ab07      	add	r3, sp, #28
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	003a      	movs	r2, r7
 8002f06:	0021      	movs	r1, r4
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <_svfiprintf_r+0x1fc>)
 8002f0a:	9803      	ldr	r0, [sp, #12]
 8002f0c:	e000      	b.n	8002f10 <_svfiprintf_r+0x1c0>
 8002f0e:	bf00      	nop
 8002f10:	9004      	str	r0, [sp, #16]
 8002f12:	9b04      	ldr	r3, [sp, #16]
 8002f14:	3301      	adds	r3, #1
 8002f16:	d1d3      	bne.n	8002ec0 <_svfiprintf_r+0x170>
 8002f18:	89bb      	ldrh	r3, [r7, #12]
 8002f1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f1c:	065b      	lsls	r3, r3, #25
 8002f1e:	d400      	bmi.n	8002f22 <_svfiprintf_r+0x1d2>
 8002f20:	e72d      	b.n	8002d7e <_svfiprintf_r+0x2e>
 8002f22:	2001      	movs	r0, #1
 8002f24:	4240      	negs	r0, r0
 8002f26:	e72a      	b.n	8002d7e <_svfiprintf_r+0x2e>
 8002f28:	ab07      	add	r3, sp, #28
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	003a      	movs	r2, r7
 8002f2e:	0021      	movs	r1, r4
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <_svfiprintf_r+0x1fc>)
 8002f32:	9803      	ldr	r0, [sp, #12]
 8002f34:	f000 f87c 	bl	8003030 <_printf_i>
 8002f38:	e7ea      	b.n	8002f10 <_svfiprintf_r+0x1c0>
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	08003524 	.word	0x08003524
 8002f40:	0800352a 	.word	0x0800352a
 8002f44:	0800352e 	.word	0x0800352e
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	08002c8d 	.word	0x08002c8d

08002f50 <_printf_common>:
 8002f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f52:	0015      	movs	r5, r2
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	688a      	ldr	r2, [r1, #8]
 8002f58:	690b      	ldr	r3, [r1, #16]
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	9000      	str	r0, [sp, #0]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	da00      	bge.n	8002f64 <_printf_common+0x14>
 8002f62:	0013      	movs	r3, r2
 8002f64:	0022      	movs	r2, r4
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	3243      	adds	r2, #67	; 0x43
 8002f6a:	7812      	ldrb	r2, [r2, #0]
 8002f6c:	2a00      	cmp	r2, #0
 8002f6e:	d001      	beq.n	8002f74 <_printf_common+0x24>
 8002f70:	3301      	adds	r3, #1
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	069b      	lsls	r3, r3, #26
 8002f78:	d502      	bpl.n	8002f80 <_printf_common+0x30>
 8002f7a:	682b      	ldr	r3, [r5, #0]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	2306      	movs	r3, #6
 8002f84:	0017      	movs	r7, r2
 8002f86:	401f      	ands	r7, r3
 8002f88:	421a      	tst	r2, r3
 8002f8a:	d027      	beq.n	8002fdc <_printf_common+0x8c>
 8002f8c:	0023      	movs	r3, r4
 8002f8e:	3343      	adds	r3, #67	; 0x43
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	4193      	sbcs	r3, r2
 8002f96:	6822      	ldr	r2, [r4, #0]
 8002f98:	0692      	lsls	r2, r2, #26
 8002f9a:	d430      	bmi.n	8002ffe <_printf_common+0xae>
 8002f9c:	0022      	movs	r2, r4
 8002f9e:	9901      	ldr	r1, [sp, #4]
 8002fa0:	9800      	ldr	r0, [sp, #0]
 8002fa2:	9e08      	ldr	r6, [sp, #32]
 8002fa4:	3243      	adds	r2, #67	; 0x43
 8002fa6:	47b0      	blx	r6
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d025      	beq.n	8002ff8 <_printf_common+0xa8>
 8002fac:	2306      	movs	r3, #6
 8002fae:	6820      	ldr	r0, [r4, #0]
 8002fb0:	682a      	ldr	r2, [r5, #0]
 8002fb2:	68e1      	ldr	r1, [r4, #12]
 8002fb4:	2500      	movs	r5, #0
 8002fb6:	4003      	ands	r3, r0
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d103      	bne.n	8002fc4 <_printf_common+0x74>
 8002fbc:	1a8d      	subs	r5, r1, r2
 8002fbe:	43eb      	mvns	r3, r5
 8002fc0:	17db      	asrs	r3, r3, #31
 8002fc2:	401d      	ands	r5, r3
 8002fc4:	68a3      	ldr	r3, [r4, #8]
 8002fc6:	6922      	ldr	r2, [r4, #16]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	dd01      	ble.n	8002fd0 <_printf_common+0x80>
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	18ed      	adds	r5, r5, r3
 8002fd0:	2700      	movs	r7, #0
 8002fd2:	42bd      	cmp	r5, r7
 8002fd4:	d120      	bne.n	8003018 <_printf_common+0xc8>
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e010      	b.n	8002ffc <_printf_common+0xac>
 8002fda:	3701      	adds	r7, #1
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	682a      	ldr	r2, [r5, #0]
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	42bb      	cmp	r3, r7
 8002fe4:	ddd2      	ble.n	8002f8c <_printf_common+0x3c>
 8002fe6:	0022      	movs	r2, r4
 8002fe8:	2301      	movs	r3, #1
 8002fea:	9901      	ldr	r1, [sp, #4]
 8002fec:	9800      	ldr	r0, [sp, #0]
 8002fee:	9e08      	ldr	r6, [sp, #32]
 8002ff0:	3219      	adds	r2, #25
 8002ff2:	47b0      	blx	r6
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d1f0      	bne.n	8002fda <_printf_common+0x8a>
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	4240      	negs	r0, r0
 8002ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ffe:	2030      	movs	r0, #48	; 0x30
 8003000:	18e1      	adds	r1, r4, r3
 8003002:	3143      	adds	r1, #67	; 0x43
 8003004:	7008      	strb	r0, [r1, #0]
 8003006:	0021      	movs	r1, r4
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	3145      	adds	r1, #69	; 0x45
 800300c:	7809      	ldrb	r1, [r1, #0]
 800300e:	18a2      	adds	r2, r4, r2
 8003010:	3243      	adds	r2, #67	; 0x43
 8003012:	3302      	adds	r3, #2
 8003014:	7011      	strb	r1, [r2, #0]
 8003016:	e7c1      	b.n	8002f9c <_printf_common+0x4c>
 8003018:	0022      	movs	r2, r4
 800301a:	2301      	movs	r3, #1
 800301c:	9901      	ldr	r1, [sp, #4]
 800301e:	9800      	ldr	r0, [sp, #0]
 8003020:	9e08      	ldr	r6, [sp, #32]
 8003022:	321a      	adds	r2, #26
 8003024:	47b0      	blx	r6
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d0e6      	beq.n	8002ff8 <_printf_common+0xa8>
 800302a:	3701      	adds	r7, #1
 800302c:	e7d1      	b.n	8002fd2 <_printf_common+0x82>
	...

08003030 <_printf_i>:
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	b08b      	sub	sp, #44	; 0x2c
 8003034:	9206      	str	r2, [sp, #24]
 8003036:	000a      	movs	r2, r1
 8003038:	3243      	adds	r2, #67	; 0x43
 800303a:	9307      	str	r3, [sp, #28]
 800303c:	9005      	str	r0, [sp, #20]
 800303e:	9204      	str	r2, [sp, #16]
 8003040:	7e0a      	ldrb	r2, [r1, #24]
 8003042:	000c      	movs	r4, r1
 8003044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003046:	2a78      	cmp	r2, #120	; 0x78
 8003048:	d806      	bhi.n	8003058 <_printf_i+0x28>
 800304a:	2a62      	cmp	r2, #98	; 0x62
 800304c:	d808      	bhi.n	8003060 <_printf_i+0x30>
 800304e:	2a00      	cmp	r2, #0
 8003050:	d100      	bne.n	8003054 <_printf_i+0x24>
 8003052:	e0c0      	b.n	80031d6 <_printf_i+0x1a6>
 8003054:	2a58      	cmp	r2, #88	; 0x58
 8003056:	d052      	beq.n	80030fe <_printf_i+0xce>
 8003058:	0026      	movs	r6, r4
 800305a:	3642      	adds	r6, #66	; 0x42
 800305c:	7032      	strb	r2, [r6, #0]
 800305e:	e022      	b.n	80030a6 <_printf_i+0x76>
 8003060:	0010      	movs	r0, r2
 8003062:	3863      	subs	r0, #99	; 0x63
 8003064:	2815      	cmp	r0, #21
 8003066:	d8f7      	bhi.n	8003058 <_printf_i+0x28>
 8003068:	f7fd f84e 	bl	8000108 <__gnu_thumb1_case_shi>
 800306c:	001f0016 	.word	0x001f0016
 8003070:	fff6fff6 	.word	0xfff6fff6
 8003074:	fff6fff6 	.word	0xfff6fff6
 8003078:	fff6001f 	.word	0xfff6001f
 800307c:	fff6fff6 	.word	0xfff6fff6
 8003080:	00a8fff6 	.word	0x00a8fff6
 8003084:	009a0036 	.word	0x009a0036
 8003088:	fff6fff6 	.word	0xfff6fff6
 800308c:	fff600b9 	.word	0xfff600b9
 8003090:	fff60036 	.word	0xfff60036
 8003094:	009efff6 	.word	0x009efff6
 8003098:	0026      	movs	r6, r4
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	3642      	adds	r6, #66	; 0x42
 800309e:	1d11      	adds	r1, r2, #4
 80030a0:	6019      	str	r1, [r3, #0]
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	7033      	strb	r3, [r6, #0]
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0a7      	b.n	80031fa <_printf_i+0x1ca>
 80030aa:	6808      	ldr	r0, [r1, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	1d0a      	adds	r2, r1, #4
 80030b0:	0605      	lsls	r5, r0, #24
 80030b2:	d50b      	bpl.n	80030cc <_printf_i+0x9c>
 80030b4:	680d      	ldr	r5, [r1, #0]
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	da03      	bge.n	80030c4 <_printf_i+0x94>
 80030bc:	232d      	movs	r3, #45	; 0x2d
 80030be:	9a04      	ldr	r2, [sp, #16]
 80030c0:	426d      	negs	r5, r5
 80030c2:	7013      	strb	r3, [r2, #0]
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <_printf_i+0x21c>)
 80030c6:	270a      	movs	r7, #10
 80030c8:	9303      	str	r3, [sp, #12]
 80030ca:	e032      	b.n	8003132 <_printf_i+0x102>
 80030cc:	680d      	ldr	r5, [r1, #0]
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	0641      	lsls	r1, r0, #25
 80030d2:	d5f1      	bpl.n	80030b8 <_printf_i+0x88>
 80030d4:	b22d      	sxth	r5, r5
 80030d6:	e7ef      	b.n	80030b8 <_printf_i+0x88>
 80030d8:	680d      	ldr	r5, [r1, #0]
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	1d08      	adds	r0, r1, #4
 80030de:	6018      	str	r0, [r3, #0]
 80030e0:	062e      	lsls	r6, r5, #24
 80030e2:	d501      	bpl.n	80030e8 <_printf_i+0xb8>
 80030e4:	680d      	ldr	r5, [r1, #0]
 80030e6:	e003      	b.n	80030f0 <_printf_i+0xc0>
 80030e8:	066d      	lsls	r5, r5, #25
 80030ea:	d5fb      	bpl.n	80030e4 <_printf_i+0xb4>
 80030ec:	680d      	ldr	r5, [r1, #0]
 80030ee:	b2ad      	uxth	r5, r5
 80030f0:	4b56      	ldr	r3, [pc, #344]	; (800324c <_printf_i+0x21c>)
 80030f2:	270a      	movs	r7, #10
 80030f4:	9303      	str	r3, [sp, #12]
 80030f6:	2a6f      	cmp	r2, #111	; 0x6f
 80030f8:	d117      	bne.n	800312a <_printf_i+0xfa>
 80030fa:	2708      	movs	r7, #8
 80030fc:	e015      	b.n	800312a <_printf_i+0xfa>
 80030fe:	3145      	adds	r1, #69	; 0x45
 8003100:	700a      	strb	r2, [r1, #0]
 8003102:	4a52      	ldr	r2, [pc, #328]	; (800324c <_printf_i+0x21c>)
 8003104:	9203      	str	r2, [sp, #12]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	6821      	ldr	r1, [r4, #0]
 800310a:	ca20      	ldmia	r2!, {r5}
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	0608      	lsls	r0, r1, #24
 8003110:	d550      	bpl.n	80031b4 <_printf_i+0x184>
 8003112:	07cb      	lsls	r3, r1, #31
 8003114:	d502      	bpl.n	800311c <_printf_i+0xec>
 8003116:	2320      	movs	r3, #32
 8003118:	4319      	orrs	r1, r3
 800311a:	6021      	str	r1, [r4, #0]
 800311c:	2710      	movs	r7, #16
 800311e:	2d00      	cmp	r5, #0
 8003120:	d103      	bne.n	800312a <_printf_i+0xfa>
 8003122:	2320      	movs	r3, #32
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	439a      	bics	r2, r3
 8003128:	6022      	str	r2, [r4, #0]
 800312a:	0023      	movs	r3, r4
 800312c:	2200      	movs	r2, #0
 800312e:	3343      	adds	r3, #67	; 0x43
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db03      	blt.n	8003142 <_printf_i+0x112>
 800313a:	2204      	movs	r2, #4
 800313c:	6821      	ldr	r1, [r4, #0]
 800313e:	4391      	bics	r1, r2
 8003140:	6021      	str	r1, [r4, #0]
 8003142:	2d00      	cmp	r5, #0
 8003144:	d102      	bne.n	800314c <_printf_i+0x11c>
 8003146:	9e04      	ldr	r6, [sp, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <_printf_i+0x136>
 800314c:	9e04      	ldr	r6, [sp, #16]
 800314e:	0028      	movs	r0, r5
 8003150:	0039      	movs	r1, r7
 8003152:	f7fd f869 	bl	8000228 <__aeabi_uidivmod>
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	3e01      	subs	r6, #1
 800315a:	5c5b      	ldrb	r3, [r3, r1]
 800315c:	7033      	strb	r3, [r6, #0]
 800315e:	002b      	movs	r3, r5
 8003160:	0005      	movs	r5, r0
 8003162:	429f      	cmp	r7, r3
 8003164:	d9f3      	bls.n	800314e <_printf_i+0x11e>
 8003166:	2f08      	cmp	r7, #8
 8003168:	d109      	bne.n	800317e <_printf_i+0x14e>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	07db      	lsls	r3, r3, #31
 800316e:	d506      	bpl.n	800317e <_printf_i+0x14e>
 8003170:	6863      	ldr	r3, [r4, #4]
 8003172:	6922      	ldr	r2, [r4, #16]
 8003174:	4293      	cmp	r3, r2
 8003176:	dc02      	bgt.n	800317e <_printf_i+0x14e>
 8003178:	2330      	movs	r3, #48	; 0x30
 800317a:	3e01      	subs	r6, #1
 800317c:	7033      	strb	r3, [r6, #0]
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	1b9b      	subs	r3, r3, r6
 8003182:	6123      	str	r3, [r4, #16]
 8003184:	9b07      	ldr	r3, [sp, #28]
 8003186:	0021      	movs	r1, r4
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	9805      	ldr	r0, [sp, #20]
 800318c:	9b06      	ldr	r3, [sp, #24]
 800318e:	aa09      	add	r2, sp, #36	; 0x24
 8003190:	f7ff fede 	bl	8002f50 <_printf_common>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d135      	bne.n	8003204 <_printf_i+0x1d4>
 8003198:	2001      	movs	r0, #1
 800319a:	4240      	negs	r0, r0
 800319c:	b00b      	add	sp, #44	; 0x2c
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	2220      	movs	r2, #32
 80031a2:	6809      	ldr	r1, [r1, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	6022      	str	r2, [r4, #0]
 80031a8:	0022      	movs	r2, r4
 80031aa:	2178      	movs	r1, #120	; 0x78
 80031ac:	3245      	adds	r2, #69	; 0x45
 80031ae:	7011      	strb	r1, [r2, #0]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <_printf_i+0x220>)
 80031b2:	e7a7      	b.n	8003104 <_printf_i+0xd4>
 80031b4:	0648      	lsls	r0, r1, #25
 80031b6:	d5ac      	bpl.n	8003112 <_printf_i+0xe2>
 80031b8:	b2ad      	uxth	r5, r5
 80031ba:	e7aa      	b.n	8003112 <_printf_i+0xe2>
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	680d      	ldr	r5, [r1, #0]
 80031c0:	1d10      	adds	r0, r2, #4
 80031c2:	6949      	ldr	r1, [r1, #20]
 80031c4:	6018      	str	r0, [r3, #0]
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	062e      	lsls	r6, r5, #24
 80031ca:	d501      	bpl.n	80031d0 <_printf_i+0x1a0>
 80031cc:	6019      	str	r1, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <_printf_i+0x1a6>
 80031d0:	066d      	lsls	r5, r5, #25
 80031d2:	d5fb      	bpl.n	80031cc <_printf_i+0x19c>
 80031d4:	8019      	strh	r1, [r3, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9e04      	ldr	r6, [sp, #16]
 80031da:	6123      	str	r3, [r4, #16]
 80031dc:	e7d2      	b.n	8003184 <_printf_i+0x154>
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	1d11      	adds	r1, r2, #4
 80031e2:	6019      	str	r1, [r3, #0]
 80031e4:	6816      	ldr	r6, [r2, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	0030      	movs	r0, r6
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	f000 f832 	bl	8003254 <memchr>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d001      	beq.n	80031f8 <_printf_i+0x1c8>
 80031f4:	1b80      	subs	r0, r0, r6
 80031f6:	6060      	str	r0, [r4, #4]
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	6123      	str	r3, [r4, #16]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9a04      	ldr	r2, [sp, #16]
 8003200:	7013      	strb	r3, [r2, #0]
 8003202:	e7bf      	b.n	8003184 <_printf_i+0x154>
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	0032      	movs	r2, r6
 8003208:	9906      	ldr	r1, [sp, #24]
 800320a:	9805      	ldr	r0, [sp, #20]
 800320c:	9d07      	ldr	r5, [sp, #28]
 800320e:	47a8      	blx	r5
 8003210:	1c43      	adds	r3, r0, #1
 8003212:	d0c1      	beq.n	8003198 <_printf_i+0x168>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	079b      	lsls	r3, r3, #30
 8003218:	d415      	bmi.n	8003246 <_printf_i+0x216>
 800321a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800321c:	68e0      	ldr	r0, [r4, #12]
 800321e:	4298      	cmp	r0, r3
 8003220:	dabc      	bge.n	800319c <_printf_i+0x16c>
 8003222:	0018      	movs	r0, r3
 8003224:	e7ba      	b.n	800319c <_printf_i+0x16c>
 8003226:	0022      	movs	r2, r4
 8003228:	2301      	movs	r3, #1
 800322a:	9906      	ldr	r1, [sp, #24]
 800322c:	9805      	ldr	r0, [sp, #20]
 800322e:	9e07      	ldr	r6, [sp, #28]
 8003230:	3219      	adds	r2, #25
 8003232:	47b0      	blx	r6
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d0af      	beq.n	8003198 <_printf_i+0x168>
 8003238:	3501      	adds	r5, #1
 800323a:	68e3      	ldr	r3, [r4, #12]
 800323c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	42ab      	cmp	r3, r5
 8003242:	dcf0      	bgt.n	8003226 <_printf_i+0x1f6>
 8003244:	e7e9      	b.n	800321a <_printf_i+0x1ea>
 8003246:	2500      	movs	r5, #0
 8003248:	e7f7      	b.n	800323a <_printf_i+0x20a>
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	08003535 	.word	0x08003535
 8003250:	08003546 	.word	0x08003546

08003254 <memchr>:
 8003254:	b2c9      	uxtb	r1, r1
 8003256:	1882      	adds	r2, r0, r2
 8003258:	4290      	cmp	r0, r2
 800325a:	d101      	bne.n	8003260 <memchr+0xc>
 800325c:	2000      	movs	r0, #0
 800325e:	4770      	bx	lr
 8003260:	7803      	ldrb	r3, [r0, #0]
 8003262:	428b      	cmp	r3, r1
 8003264:	d0fb      	beq.n	800325e <memchr+0xa>
 8003266:	3001      	adds	r0, #1
 8003268:	e7f6      	b.n	8003258 <memchr+0x4>

0800326a <memcpy>:
 800326a:	2300      	movs	r3, #0
 800326c:	b510      	push	{r4, lr}
 800326e:	429a      	cmp	r2, r3
 8003270:	d100      	bne.n	8003274 <memcpy+0xa>
 8003272:	bd10      	pop	{r4, pc}
 8003274:	5ccc      	ldrb	r4, [r1, r3]
 8003276:	54c4      	strb	r4, [r0, r3]
 8003278:	3301      	adds	r3, #1
 800327a:	e7f8      	b.n	800326e <memcpy+0x4>

0800327c <memmove>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4288      	cmp	r0, r1
 8003280:	d902      	bls.n	8003288 <memmove+0xc>
 8003282:	188b      	adds	r3, r1, r2
 8003284:	4298      	cmp	r0, r3
 8003286:	d303      	bcc.n	8003290 <memmove+0x14>
 8003288:	2300      	movs	r3, #0
 800328a:	e007      	b.n	800329c <memmove+0x20>
 800328c:	5c8b      	ldrb	r3, [r1, r2]
 800328e:	5483      	strb	r3, [r0, r2]
 8003290:	3a01      	subs	r2, #1
 8003292:	d2fb      	bcs.n	800328c <memmove+0x10>
 8003294:	bd10      	pop	{r4, pc}
 8003296:	5ccc      	ldrb	r4, [r1, r3]
 8003298:	54c4      	strb	r4, [r0, r3]
 800329a:	3301      	adds	r3, #1
 800329c:	429a      	cmp	r2, r3
 800329e:	d1fa      	bne.n	8003296 <memmove+0x1a>
 80032a0:	e7f8      	b.n	8003294 <memmove+0x18>
	...

080032a4 <_free_r>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	0005      	movs	r5, r0
 80032a8:	2900      	cmp	r1, #0
 80032aa:	d010      	beq.n	80032ce <_free_r+0x2a>
 80032ac:	1f0c      	subs	r4, r1, #4
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da00      	bge.n	80032b6 <_free_r+0x12>
 80032b4:	18e4      	adds	r4, r4, r3
 80032b6:	0028      	movs	r0, r5
 80032b8:	f000 f8d4 	bl	8003464 <__malloc_lock>
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <_free_r+0x90>)
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <_free_r+0x2c>
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	6014      	str	r4, [r2, #0]
 80032c8:	0028      	movs	r0, r5
 80032ca:	f000 f8d3 	bl	8003474 <__malloc_unlock>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d908      	bls.n	80032e6 <_free_r+0x42>
 80032d4:	6821      	ldr	r1, [r4, #0]
 80032d6:	1860      	adds	r0, r4, r1
 80032d8:	4283      	cmp	r3, r0
 80032da:	d1f3      	bne.n	80032c4 <_free_r+0x20>
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	1841      	adds	r1, r0, r1
 80032e2:	6021      	str	r1, [r4, #0]
 80032e4:	e7ee      	b.n	80032c4 <_free_r+0x20>
 80032e6:	001a      	movs	r2, r3
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <_free_r+0x4e>
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	d9f9      	bls.n	80032e6 <_free_r+0x42>
 80032f2:	6811      	ldr	r1, [r2, #0]
 80032f4:	1850      	adds	r0, r2, r1
 80032f6:	42a0      	cmp	r0, r4
 80032f8:	d10b      	bne.n	8003312 <_free_r+0x6e>
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	1809      	adds	r1, r1, r0
 80032fe:	1850      	adds	r0, r2, r1
 8003300:	6011      	str	r1, [r2, #0]
 8003302:	4283      	cmp	r3, r0
 8003304:	d1e0      	bne.n	80032c8 <_free_r+0x24>
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	1841      	adds	r1, r0, r1
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	6053      	str	r3, [r2, #4]
 8003310:	e7da      	b.n	80032c8 <_free_r+0x24>
 8003312:	42a0      	cmp	r0, r4
 8003314:	d902      	bls.n	800331c <_free_r+0x78>
 8003316:	230c      	movs	r3, #12
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	e7d5      	b.n	80032c8 <_free_r+0x24>
 800331c:	6821      	ldr	r1, [r4, #0]
 800331e:	1860      	adds	r0, r4, r1
 8003320:	4283      	cmp	r3, r0
 8003322:	d103      	bne.n	800332c <_free_r+0x88>
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	1841      	adds	r1, r0, r1
 800332a:	6021      	str	r1, [r4, #0]
 800332c:	6063      	str	r3, [r4, #4]
 800332e:	6054      	str	r4, [r2, #4]
 8003330:	e7ca      	b.n	80032c8 <_free_r+0x24>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	20000090 	.word	0x20000090

08003338 <_malloc_r>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	2303      	movs	r3, #3
 800333c:	1ccd      	adds	r5, r1, #3
 800333e:	439d      	bics	r5, r3
 8003340:	3508      	adds	r5, #8
 8003342:	0006      	movs	r6, r0
 8003344:	2d0c      	cmp	r5, #12
 8003346:	d21f      	bcs.n	8003388 <_malloc_r+0x50>
 8003348:	250c      	movs	r5, #12
 800334a:	42a9      	cmp	r1, r5
 800334c:	d81e      	bhi.n	800338c <_malloc_r+0x54>
 800334e:	0030      	movs	r0, r6
 8003350:	f000 f888 	bl	8003464 <__malloc_lock>
 8003354:	4925      	ldr	r1, [pc, #148]	; (80033ec <_malloc_r+0xb4>)
 8003356:	680a      	ldr	r2, [r1, #0]
 8003358:	0014      	movs	r4, r2
 800335a:	2c00      	cmp	r4, #0
 800335c:	d11a      	bne.n	8003394 <_malloc_r+0x5c>
 800335e:	4f24      	ldr	r7, [pc, #144]	; (80033f0 <_malloc_r+0xb8>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <_malloc_r+0x38>
 8003366:	0021      	movs	r1, r4
 8003368:	0030      	movs	r0, r6
 800336a:	f000 f869 	bl	8003440 <_sbrk_r>
 800336e:	6038      	str	r0, [r7, #0]
 8003370:	0029      	movs	r1, r5
 8003372:	0030      	movs	r0, r6
 8003374:	f000 f864 	bl	8003440 <_sbrk_r>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d12b      	bne.n	80033d4 <_malloc_r+0x9c>
 800337c:	230c      	movs	r3, #12
 800337e:	0030      	movs	r0, r6
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	f000 f877 	bl	8003474 <__malloc_unlock>
 8003386:	e003      	b.n	8003390 <_malloc_r+0x58>
 8003388:	2d00      	cmp	r5, #0
 800338a:	dade      	bge.n	800334a <_malloc_r+0x12>
 800338c:	230c      	movs	r3, #12
 800338e:	6033      	str	r3, [r6, #0]
 8003390:	2000      	movs	r0, #0
 8003392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	1b5b      	subs	r3, r3, r5
 8003398:	d419      	bmi.n	80033ce <_malloc_r+0x96>
 800339a:	2b0b      	cmp	r3, #11
 800339c:	d903      	bls.n	80033a6 <_malloc_r+0x6e>
 800339e:	6023      	str	r3, [r4, #0]
 80033a0:	18e4      	adds	r4, r4, r3
 80033a2:	6025      	str	r5, [r4, #0]
 80033a4:	e003      	b.n	80033ae <_malloc_r+0x76>
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	42a2      	cmp	r2, r4
 80033aa:	d10e      	bne.n	80033ca <_malloc_r+0x92>
 80033ac:	600b      	str	r3, [r1, #0]
 80033ae:	0030      	movs	r0, r6
 80033b0:	f000 f860 	bl	8003474 <__malloc_unlock>
 80033b4:	0020      	movs	r0, r4
 80033b6:	2207      	movs	r2, #7
 80033b8:	300b      	adds	r0, #11
 80033ba:	1d23      	adds	r3, r4, #4
 80033bc:	4390      	bics	r0, r2
 80033be:	1ac2      	subs	r2, r0, r3
 80033c0:	4298      	cmp	r0, r3
 80033c2:	d0e6      	beq.n	8003392 <_malloc_r+0x5a>
 80033c4:	1a1b      	subs	r3, r3, r0
 80033c6:	50a3      	str	r3, [r4, r2]
 80033c8:	e7e3      	b.n	8003392 <_malloc_r+0x5a>
 80033ca:	6053      	str	r3, [r2, #4]
 80033cc:	e7ef      	b.n	80033ae <_malloc_r+0x76>
 80033ce:	0022      	movs	r2, r4
 80033d0:	6864      	ldr	r4, [r4, #4]
 80033d2:	e7c2      	b.n	800335a <_malloc_r+0x22>
 80033d4:	2303      	movs	r3, #3
 80033d6:	1cc4      	adds	r4, r0, #3
 80033d8:	439c      	bics	r4, r3
 80033da:	42a0      	cmp	r0, r4
 80033dc:	d0e1      	beq.n	80033a2 <_malloc_r+0x6a>
 80033de:	1a21      	subs	r1, r4, r0
 80033e0:	0030      	movs	r0, r6
 80033e2:	f000 f82d 	bl	8003440 <_sbrk_r>
 80033e6:	1c43      	adds	r3, r0, #1
 80033e8:	d1db      	bne.n	80033a2 <_malloc_r+0x6a>
 80033ea:	e7c7      	b.n	800337c <_malloc_r+0x44>
 80033ec:	20000090 	.word	0x20000090
 80033f0:	20000094 	.word	0x20000094

080033f4 <_realloc_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	0007      	movs	r7, r0
 80033f8:	000d      	movs	r5, r1
 80033fa:	0016      	movs	r6, r2
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d105      	bne.n	800340c <_realloc_r+0x18>
 8003400:	0011      	movs	r1, r2
 8003402:	f7ff ff99 	bl	8003338 <_malloc_r>
 8003406:	0004      	movs	r4, r0
 8003408:	0020      	movs	r0, r4
 800340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340c:	2a00      	cmp	r2, #0
 800340e:	d103      	bne.n	8003418 <_realloc_r+0x24>
 8003410:	f7ff ff48 	bl	80032a4 <_free_r>
 8003414:	0034      	movs	r4, r6
 8003416:	e7f7      	b.n	8003408 <_realloc_r+0x14>
 8003418:	f000 f834 	bl	8003484 <_malloc_usable_size_r>
 800341c:	002c      	movs	r4, r5
 800341e:	42b0      	cmp	r0, r6
 8003420:	d2f2      	bcs.n	8003408 <_realloc_r+0x14>
 8003422:	0031      	movs	r1, r6
 8003424:	0038      	movs	r0, r7
 8003426:	f7ff ff87 	bl	8003338 <_malloc_r>
 800342a:	1e04      	subs	r4, r0, #0
 800342c:	d0ec      	beq.n	8003408 <_realloc_r+0x14>
 800342e:	0029      	movs	r1, r5
 8003430:	0032      	movs	r2, r6
 8003432:	f7ff ff1a 	bl	800326a <memcpy>
 8003436:	0029      	movs	r1, r5
 8003438:	0038      	movs	r0, r7
 800343a:	f7ff ff33 	bl	80032a4 <_free_r>
 800343e:	e7e3      	b.n	8003408 <_realloc_r+0x14>

08003440 <_sbrk_r>:
 8003440:	2300      	movs	r3, #0
 8003442:	b570      	push	{r4, r5, r6, lr}
 8003444:	4d06      	ldr	r5, [pc, #24]	; (8003460 <_sbrk_r+0x20>)
 8003446:	0004      	movs	r4, r0
 8003448:	0008      	movs	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd f9a0 	bl	8000790 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d103      	bne.n	800345c <_sbrk_r+0x1c>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d000      	beq.n	800345c <_sbrk_r+0x1c>
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	bd70      	pop	{r4, r5, r6, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	20000168 	.word	0x20000168

08003464 <__malloc_lock>:
 8003464:	b510      	push	{r4, lr}
 8003466:	4802      	ldr	r0, [pc, #8]	; (8003470 <__malloc_lock+0xc>)
 8003468:	f000 f814 	bl	8003494 <__retarget_lock_acquire_recursive>
 800346c:	bd10      	pop	{r4, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	20000170 	.word	0x20000170

08003474 <__malloc_unlock>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4802      	ldr	r0, [pc, #8]	; (8003480 <__malloc_unlock+0xc>)
 8003478:	f000 f80d 	bl	8003496 <__retarget_lock_release_recursive>
 800347c:	bd10      	pop	{r4, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000170 	.word	0x20000170

08003484 <_malloc_usable_size_r>:
 8003484:	1f0b      	subs	r3, r1, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1f18      	subs	r0, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	da01      	bge.n	8003492 <_malloc_usable_size_r+0xe>
 800348e:	580b      	ldr	r3, [r1, r0]
 8003490:	18c0      	adds	r0, r0, r3
 8003492:	4770      	bx	lr

08003494 <__retarget_lock_acquire_recursive>:
 8003494:	4770      	bx	lr

08003496 <__retarget_lock_release_recursive>:
 8003496:	4770      	bx	lr

08003498 <_init>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr

080034a4 <_fini>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr
