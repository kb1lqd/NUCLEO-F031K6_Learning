
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800388c  0800388c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800388c  0800388c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800388c  0800388c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003904  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003904  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af65  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acd  00000000  00000000  0002affd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ce7  00000000  00000000  0002e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c99d  00000000  00000000  0003eddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066f43  00000000  00000000  0004b77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b26bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  000b2714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037d0 	.word	0x080037d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080037d0 	.word	0x080037d0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08e      	sub	sp, #56	; 0x38
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fc85 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f82d 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f931 	bl	80004b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000256:	f000 f8ff 	bl	8000458 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800025a:	f000 f87f 	bl	800035c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM for LCD Contrast
  LcdContrast(15); // Percentage from 255 max duty cycle
 800025e:	200f      	movs	r0, #15
 8000260:	f000 f99c 	bl	800059c <LcdContrast>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <main+0x58>)
 8000266:	2100      	movs	r1, #0
 8000268:	0018      	movs	r0, r3
 800026a:	f001 fd19 	bl	8001ca0 <HAL_TIM_PWM_Start>

  //Initialize LCD
  LcdInit();
 800026e:	f000 f9a7 	bl	80005c0 <LcdInit>
  LcdPrintString("testing strings.");
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x5c>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fafa 	bl	800086e <LcdPrintString>
   * - 16 bit count
   */


  // Say hello
  uart_buf_len = sprintf(uart_buf, "LCD driver test program started!\r\n");
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <main+0x60>)
 800027c:	003b      	movs	r3, r7
 800027e:	0011      	movs	r1, r2
 8000280:	0018      	movs	r0, r3
 8000282:	f002 fe7f 	bl	8002f84 <siprintf>
 8000286:	0003      	movs	r3, r0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 800028a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800028c:	b29a      	uxth	r2, r3
 800028e:	0039      	movs	r1, r7
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <main+0x64>)
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	f002 faf6 	bl	8002884 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x54>
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	080037e8 	.word	0x080037e8
 80002a4:	080037fc 	.word	0x080037fc
 80002a8:	20000098 	.word	0x20000098

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b095      	sub	sp, #84	; 0x54
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2420      	movs	r4, #32
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2330      	movs	r3, #48	; 0x30
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 fe59 	bl	8002f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	2310      	movs	r3, #16
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	0018      	movs	r0, r3
 80002c8:	2310      	movs	r3, #16
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f002 fe51 	bl	8002f74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2310      	movs	r3, #16
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f002 fe4a 	bl	8002f74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	0021      	movs	r1, r4
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2201      	movs	r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2210      	movs	r2, #16
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 feed 	bl	80010dc <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000306:	f000 fad8 	bl	80008ba <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	2110      	movs	r1, #16
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2100      	movs	r1, #0
 8000328:	0018      	movs	r0, r3
 800032a:	f001 f9f1 	bl	8001710 <HAL_RCC_ClockConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000332:	f000 fac2 	bl	80008ba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000336:	003b      	movs	r3, r7
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	f001 fb35 	bl	80019b4 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800034e:	f000 fab4 	bl	80008ba <Error_Handler>
  }
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b015      	add	sp, #84	; 0x54
 8000358:	bd90      	pop	{r4, r7, pc}
	...

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08e      	sub	sp, #56	; 0x38
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	2328      	movs	r3, #40	; 0x28
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	0018      	movs	r0, r3
 8000368:	2310      	movs	r3, #16
 800036a:	001a      	movs	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fe01 	bl	8002f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000372:	2320      	movs	r3, #32
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	0018      	movs	r0, r3
 8000378:	2308      	movs	r3, #8
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 fdf9 	bl	8002f74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	0018      	movs	r0, r3
 8000386:	231c      	movs	r3, #28
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 fdf2 	bl	8002f74 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <MX_TIM2_Init+0xf8>)
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	05d2      	lsls	r2, r2, #23
 8000396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <MX_TIM2_Init+0xf8>)
 800039a:	2207      	movs	r2, #7
 800039c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039e:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80003a4:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003a6:	22ff      	movs	r2, #255	; 0xff
 80003a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003aa:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b6:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fbc9 	bl	8001b50 <HAL_TIM_Base_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003c2:	f000 fa7a 	bl	80008ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c6:	2128      	movs	r1, #40	; 0x28
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2280      	movs	r2, #128	; 0x80
 80003cc:	0152      	lsls	r2, r2, #5
 80003ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003d0:	187a      	adds	r2, r7, r1
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003d4:	0011      	movs	r1, r2
 80003d6:	0018      	movs	r0, r3
 80003d8:	f001 fdca 	bl	8001f70 <HAL_TIM_ConfigClockSource>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003e0:	f000 fa6b 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_TIM2_Init+0xf8>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 fc02 	bl	8001bf0 <HAL_TIM_PWM_Init>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003f0:	f000 fa63 	bl	80008ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2120      	movs	r1, #32
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000402:	187a      	adds	r2, r7, r1
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_TIM2_Init+0xf8>)
 8000406:	0011      	movs	r1, r2
 8000408:	0018      	movs	r0, r3
 800040a:	f002 f98f 	bl	800272c <HAL_TIMEx_MasterConfigSynchronization>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000412:	f000 fa52 	bl	80008ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2260      	movs	r2, #96	; 0x60
 800041a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 128;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042e:	1d39      	adds	r1, r7, #4
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MX_TIM2_Init+0xf8>)
 8000432:	2200      	movs	r2, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fcdf 	bl	8001df8 <HAL_TIM_PWM_ConfigChannel>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 800043e:	f000 fa3c 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <MX_TIM2_Init+0xf8>)
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fa7d 	bl	8000944 <HAL_TIM_MspPostInit>

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b00e      	add	sp, #56	; 0x38
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	2000011c 	.word	0x2000011c

08000458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 800045e:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <MX_USART1_UART_Init+0x5c>)
 8000460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000464:	2296      	movs	r2, #150	; 0x96
 8000466:	0212      	lsls	r2, r2, #8
 8000468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_USART1_UART_Init+0x58>)
 800049c:	0018      	movs	r0, r3
 800049e:	f002 f99d 	bl	80027dc <HAL_UART_Init>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004a6:	f000 fa08 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000098 	.word	0x20000098
 80004b4:	40013800 	.word	0x40013800

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b089      	sub	sp, #36	; 0x24
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	240c      	movs	r4, #12
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2314      	movs	r3, #20
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 fd53 	bl	8002f74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b30      	ldr	r3, [pc, #192]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	03c9      	lsls	r1, r1, #15
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	03db      	lsls	r3, r3, #15
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xd8>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xd8>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MX_GPIO_Init+0xd8>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	02c9      	lsls	r1, r1, #11
 8000510:	430a      	orrs	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_GPIO_Init+0xd8>)
 8000516:	695a      	ldr	r2, [r3, #20]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	02db      	lsls	r3, r3, #11
 800051c:	4013      	ands	r3, r2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8000522:	491c      	ldr	r1, [pc, #112]	; (8000594 <MX_GPIO_Init+0xdc>)
 8000524:	2390      	movs	r3, #144	; 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2200      	movs	r2, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fdb8 	bl	80010a0 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_GPIO_Init+0xe0>)
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fdb2 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_DB4_Pin LCD_DB5_Pin
                           LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 800053c:	193b      	adds	r3, r7, r4
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <MX_GPIO_Init+0xdc>)
 8000540:	601a      	str	r2, [r3, #0]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2201      	movs	r2, #1
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	193a      	adds	r2, r7, r4
 8000556:	2390      	movs	r3, #144	; 0x90
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fc37 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000562:	0021      	movs	r1, r4
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2208      	movs	r2, #8
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2201      	movs	r2, #1
 800056e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800057c:	187b      	adds	r3, r7, r1
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <MX_GPIO_Init+0xe0>)
 8000580:	0019      	movs	r1, r3
 8000582:	0010      	movs	r0, r2
 8000584:	f000 fc24 	bl	8000dd0 <HAL_GPIO_Init>

}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b009      	add	sp, #36	; 0x24
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	0000089b 	.word	0x0000089b
 8000598:	48000400 	.word	0x48000400

0800059c <LcdContrast>:

/* USER CODE BEGIN 4 */

void LcdContrast(unsigned char contrast_percent)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	0002      	movs	r2, r0
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	701a      	strb	r2, [r3, #0]
	//TO-DO: This should be upgraded to a percentage input using fixed point math
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,contrast_percent);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LcdContrast+0x20>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1dfa      	adds	r2, r7, #7
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	2000011c 	.word	0x2000011c

080005c0 <LcdInit>:

void LcdInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af04      	add	r7, sp, #16
	 */

	//
	// Clear Display
	//
	LcdWriteCmd(0,0,0,0,0,0,0,1);
 80005c6:	2301      	movs	r3, #1
 80005c8:	9303      	str	r3, [sp, #12]
 80005ca:	2300      	movs	r3, #0
 80005cc:	9302      	str	r3, [sp, #8]
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2300      	movs	r3, #0
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 f825 	bl	800062c <LcdWriteCmd>

	//
	// Return cursor to HOME
	//
	LcdWriteCmd(0,0,0,0,0,0,1,0);
 80005e2:	2300      	movs	r3, #0
 80005e4:	9303      	str	r3, [sp, #12]
 80005e6:	2301      	movs	r3, #1
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2300      	movs	r3, #0
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 f817 	bl	800062c <LcdWriteCmd>

	//Delay
	HAL_Delay(50); //50ms Delay
 80005fe:	2032      	movs	r0, #50	; 0x32
 8000600:	f000 fb0e 	bl	8000c20 <HAL_Delay>

	//
	// Set cursor to blinking
	//
	LcdWriteCmd(0,0,0,0,1,1,1,1);
 8000604:	2301      	movs	r3, #1
 8000606:	9303      	str	r3, [sp, #12]
 8000608:	2301      	movs	r3, #1
 800060a:	9302      	str	r3, [sp, #8]
 800060c:	2301      	movs	r3, #1
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2301      	movs	r3, #1
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f806 	bl	800062c <LcdWriteCmd>

	//Delay
	HAL_Delay(50); //50ms Delay
 8000620:	2032      	movs	r0, #50	; 0x32
 8000622:	f000 fafd 	bl	8000c20 <HAL_Delay>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LcdWriteCmd>:

void LcdWriteCmd(unsigned char DB7, unsigned char DB6, unsigned char DB5, unsigned char DB4, unsigned char DB3, unsigned char DB2, unsigned char DB1, unsigned char DB0)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	0005      	movs	r5, r0
 8000634:	000c      	movs	r4, r1
 8000636:	0010      	movs	r0, r2
 8000638:	0019      	movs	r1, r3
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	1c2a      	adds	r2, r5, #0
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	1c22      	adds	r2, r4, #0
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	1d7b      	adds	r3, r7, #5
 8000648:	1c02      	adds	r2, r0, #0
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	1c0a      	adds	r2, r1, #0
 8000650:	701a      	strb	r2, [r3, #0]
	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2201      	movs	r2, #1
 8000658:	2102      	movs	r1, #2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fd20 	bl	80010a0 <HAL_GPIO_WritePin>

	//Set DBx data 4-MSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB7);
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	0119      	lsls	r1, r3, #4
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fd17 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB6);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	2390      	movs	r3, #144	; 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fd0f 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB5);
 8000682:	1d7b      	adds	r3, r7, #5
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2110      	movs	r1, #16
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fd07 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB4);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	781a      	ldrb	r2, [r3, #0]
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2108      	movs	r1, #8
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fcff 	bl	80010a0 <HAL_GPIO_WritePin>

	//Enable LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fcf8 	bl	80010a0 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 80006b0:	2005      	movs	r0, #5
 80006b2:	f000 fab5 	bl	8000c20 <HAL_Delay>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2201      	movs	r2, #1
 80006bc:	2102      	movs	r1, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fcee 	bl	80010a0 <HAL_GPIO_WritePin>

	//Set DBx data 4-LSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB3);
 80006c4:	2318      	movs	r3, #24
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	0119      	lsls	r1, r3, #4
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 fce4 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB2);
 80006d8:	231c      	movs	r3, #28
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	2390      	movs	r3, #144	; 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fcdb 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB1);
 80006ea:	2320      	movs	r3, #32
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	781a      	ldrb	r2, [r3, #0]
 80006f0:	2390      	movs	r3, #144	; 0x90
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2110      	movs	r1, #16
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fcd2 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB0);
 80006fc:	2324      	movs	r3, #36	; 0x24
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	2390      	movs	r3, #144	; 0x90
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2108      	movs	r1, #8
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fcc9 	bl	80010a0 <HAL_GPIO_WritePin>

	//Enabled LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2200      	movs	r2, #0
 8000714:	2102      	movs	r1, #2
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fcc2 	bl	80010a0 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 800071c:	2005      	movs	r0, #5
 800071e:	f000 fa7f 	bl	8000c20 <HAL_Delay>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bdb0      	pop	{r4, r5, r7, pc}

0800072a <LcdWriteDataChar>:
	HAL_Delay(5); //5ms Delay

}

void LcdWriteDataChar(uint8_t byte)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	0002      	movs	r2, r0
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	701a      	strb	r2, [r3, #0]

	//RS HIGH
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 1);
 8000736:	2390      	movs	r3, #144	; 0x90
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2201      	movs	r2, #1
 800073c:	2101      	movs	r1, #1
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fcae 	bl	80010a0 <HAL_GPIO_WritePin>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	2201      	movs	r2, #1
 800074a:	2102      	movs	r1, #2
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fca7 	bl	80010a0 <HAL_GPIO_WritePin>

	//Set DBx data 4-MSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, ((BIT7&byte)>>7));
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	09db      	lsrs	r3, r3, #7
 8000758:	b2da      	uxtb	r2, r3
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	0119      	lsls	r1, r3, #4
 800075e:	2390      	movs	r3, #144	; 0x90
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fc9c 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, ((BIT6&byte)>>6));
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	099b      	lsrs	r3, r3, #6
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	2390      	movs	r3, #144	; 0x90
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fc8f 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, ((BIT5&byte)>>5));
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	2390      	movs	r3, #144	; 0x90
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2110      	movs	r1, #16
 8000796:	0018      	movs	r0, r3
 8000798:	f000 fc82 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, ((BIT4&byte)>>4));
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2201      	movs	r2, #1
 80007a6:	4013      	ands	r3, r2
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2108      	movs	r1, #8
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fc75 	bl	80010a0 <HAL_GPIO_WritePin>

	//Enable LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fc6e 	bl	80010a0 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 80007c4:	2005      	movs	r0, #5
 80007c6:	f000 fa2b 	bl	8000c20 <HAL_Delay>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 80007ca:	2390      	movs	r3, #144	; 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fc64 	bl	80010a0 <HAL_GPIO_WritePin>

	//Set DBx data 4-LSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, ((BIT3&byte)>>3));
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	0119      	lsls	r1, r3, #4
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fc56 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, ((BIT2&byte)>>2));
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2201      	movs	r2, #1
 80007fe:	4013      	ands	r3, r2
 8000800:	b2da      	uxtb	r2, r3
 8000802:	2390      	movs	r3, #144	; 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fc49 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, ((BIT1&byte)>>1));
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	085b      	lsrs	r3, r3, #1
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	b2da      	uxtb	r2, r3
 800081c:	2390      	movs	r3, #144	; 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2110      	movs	r1, #16
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fc3c 	bl	80010a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, ((BIT0&byte)>>0));
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	4013      	ands	r3, r2
 8000830:	b2da      	uxtb	r2, r3
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2108      	movs	r1, #8
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fc31 	bl	80010a0 <HAL_GPIO_WritePin>

	//Enabled LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2200      	movs	r2, #0
 8000844:	2102      	movs	r1, #2
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fc2a 	bl	80010a0 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 800084c:	2005      	movs	r0, #5
 800084e:	f000 f9e7 	bl	8000c20 <HAL_Delay>

	//RS LOW
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 8000852:	2390      	movs	r3, #144	; 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fc20 	bl	80010a0 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 8000860:	2005      	movs	r0, #5
 8000862:	f000 f9dd 	bl	8000c20 <HAL_Delay>

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}

0800086e <LcdPrintString>:

void LcdPrintString(char string[])
{
 800086e:	b590      	push	{r4, r7, lr}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	unsigned char i;
	for(i=0; i<strlen(string); i++)
 8000876:	230f      	movs	r3, #15
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e00d      	b.n	800089c <LcdPrintString+0x2e>
	{
		LcdWriteDataChar(string[i]);
 8000880:	240f      	movs	r4, #15
 8000882:	193b      	adds	r3, r7, r4
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff ff4c 	bl	800072a <LcdWriteDataChar>
	for(i=0; i<strlen(string); i++)
 8000892:	193b      	adds	r3, r7, r4
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	193b      	adds	r3, r7, r4
 8000898:	3201      	adds	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	230f      	movs	r3, #15
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	781c      	ldrb	r4, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff fc2f 	bl	8000108 <strlen>
 80008aa:	0003      	movs	r3, r0
 80008ac:	429c      	cmp	r4, r3
 80008ae:	d3e7      	bcc.n	8000880 <LcdPrintString+0x12>
	}
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b005      	add	sp, #20
 80008b8:	bd90      	pop	{r4, r7, pc}

080008ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008be:	b672      	cpsid	i
}
 80008c0:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <HAL_MspInit+0x44>)
 80008cc:	699a      	ldr	r2, [r3, #24]
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_MspInit+0x44>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	619a      	str	r2, [r3, #24]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_MspInit+0x44>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x44>)
 80008e4:	69da      	ldr	r2, [r3, #28]
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_MspInit+0x44>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0549      	lsls	r1, r1, #21
 80008ec:	430a      	orrs	r2, r1
 80008ee:	61da      	str	r2, [r3, #28]
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_MspInit+0x44>)
 80008f2:	69da      	ldr	r2, [r3, #28]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	055b      	lsls	r3, r3, #21
 80008f8:	4013      	ands	r3, r2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	05db      	lsls	r3, r3, #23
 800091c:	429a      	cmp	r2, r3
 800091e:	d10b      	bne.n	8000938 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_TIM_Base_MspInit+0x34>)
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_TIM_Base_MspInit+0x34>)
 8000926:	2101      	movs	r1, #1
 8000928:	430a      	orrs	r2, r1
 800092a:	61da      	str	r2, [r3, #28]
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_TIM_Base_MspInit+0x34>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	2201      	movs	r2, #1
 8000932:	4013      	ands	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b004      	add	sp, #16
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	240c      	movs	r4, #12
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fb0c 	bl	8002f74 <memset>
  if(htim->Instance==TIM2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	429a      	cmp	r2, r3
 8000966:	d124      	bne.n	80009b2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_TIM_MspPostInit+0x78>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_TIM_MspPostInit+0x78>)
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	0289      	lsls	r1, r1, #10
 8000972:	430a      	orrs	r2, r1
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_TIM_MspPostInit+0x78>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	029b      	lsls	r3, r3, #10
 800097e:	4013      	ands	r3, r2
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_CONTRAST_PWM_Pin;
 8000984:	0021      	movs	r1, r4
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2220      	movs	r2, #32
 800098a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2202      	movs	r2, #2
 8000990:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LCD_CONTRAST_PWM_GPIO_Port, &GPIO_InitStruct);
 80009a4:	187a      	adds	r2, r7, r1
 80009a6:	2390      	movs	r3, #144	; 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fa0f 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b009      	add	sp, #36	; 0x24
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	2414      	movs	r4, #20
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2314      	movs	r3, #20
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f002 face 	bl	8002f74 <memset>
  if(huart->Instance==USART1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0x90>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d132      	bne.n	8000a48 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_UART_MspInit+0x94>)
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_UART_MspInit+0x94>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	01c9      	lsls	r1, r1, #7
 80009ec:	430a      	orrs	r2, r1
 80009ee:	619a      	str	r2, [r3, #24]
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x94>)
 80009f2:	699a      	ldr	r2, [r3, #24]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	01db      	lsls	r3, r3, #7
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x94>)
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_UART_MspInit+0x94>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0289      	lsls	r1, r1, #10
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x94>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	029b      	lsls	r3, r3, #10
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_UART_MspInit+0x98>)
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2202      	movs	r2, #2
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2203      	movs	r2, #3
 8000a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2201      	movs	r2, #1
 8000a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	2390      	movs	r3, #144	; 0x90
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f9c4 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b00b      	add	sp, #44	; 0x2c
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	00008004 	.word	0x00008004

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8b2 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f002 fa30 	bl	8002f20 <__errno>
 8000ac0:	0003      	movs	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	18d2      	adds	r2, r2, r3
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <_sbrk+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b006      	add	sp, #24
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20001000 	.word	0x20001000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	20000178 	.word	0x20000178

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b2e:	f7ff ffe3 	bl	8000af8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b32:	f002 f9fb 	bl	8002f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fb85 	bl	8000244 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b48:	08003894 	.word	0x08003894
  ldr r2, =_sbss
 8000b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b50:	20000178 	.word	0x20000178

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>
	...

08000b58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_Init+0x24>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_Init+0x24>)
 8000b62:	2110      	movs	r1, #16
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f809 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6e:	f7ff fea9 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x5c>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_InitTick+0x60>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	0019      	movs	r1, r3
 8000b92:	23fa      	movs	r3, #250	; 0xfa
 8000b94:	0098      	lsls	r0, r3, #2
 8000b96:	f7ff fac9 	bl	800012c <__udivsi3>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f7ff fac4 	bl	800012c <__udivsi3>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f905 	bl	8000db6 <HAL_SYSTICK_Config>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e00f      	b.n	8000bd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d80b      	bhi.n	8000bd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	425b      	negs	r3, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8e2 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_InitTick+0x64>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	18d2      	adds	r2, r2, r3
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_IncTick+0x20>)
 8000bfa:	601a      	str	r2, [r3, #0]
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000164 	.word	0x20000164

08000c0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <HAL_GetTick+0x10>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000164 	.word	0x20000164

08000c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c28:	f7ff fff0 	bl	8000c0c <HAL_GetTick>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	d005      	beq.n	8000c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_Delay+0x44>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	001a      	movs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	189b      	adds	r3, r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	f7ff ffe0 	bl	8000c0c <HAL_GetTick>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f7      	bhi.n	8000c48 <HAL_Delay+0x28>
  {
  }
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d828      	bhi.n	8000cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000c80:	1dfb      	adds	r3, r7, #7
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	589b      	ldr	r3, [r3, r2]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	; 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	; 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <__NVIC_SetPriority+0xd4>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	33c0      	adds	r3, #192	; 0xc0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cce:	e031      	b.n	8000d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	400b      	ands	r3, r1
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	; 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	; 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	4809      	ldr	r0, [pc, #36]	; (8000d40 <__NVIC_SetPriority+0xd8>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	001c      	movs	r4, r3
 8000d20:	230f      	movs	r3, #15
 8000d22:	4023      	ands	r3, r4
 8000d24:	3b08      	subs	r3, #8
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	3306      	adds	r3, #6
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	18c3      	adds	r3, r0, r3
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	045b      	lsls	r3, r3, #17
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d301      	bcc.n	8000d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e010      	b.n	8000d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <SysTick_Config+0x44>)
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	3a01      	subs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d64:	2301      	movs	r3, #1
 8000d66:	425b      	negs	r3, r3
 8000d68:	2103      	movs	r1, #3
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff ff7c 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x44>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x44>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	210f      	movs	r1, #15
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	1c02      	adds	r2, r0, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffbf 	bl	8000d44 <SysTick_Config>
 8000dc6:	0003      	movs	r3, r0
}
 8000dc8:	0018      	movs	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e149      	b.n	8001074 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x28>
 8000df6:	e13a      	b.n	800106e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d00b      	beq.n	8000e18 <HAL_GPIO_Init+0x48>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d007      	beq.n	8000e18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0c:	2b11      	cmp	r3, #17
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	d130      	bne.n	8000e7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	2201      	movs	r2, #1
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0xea>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2207      	movs	r2, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	055b      	lsls	r3, r3, #21
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x174>
 8000f42:	e094      	b.n	800106e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b51      	ldr	r3, [pc, #324]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	4b50      	ldr	r3, [pc, #320]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	4b4e      	ldr	r3, [pc, #312]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_GPIO_Init+0x2c0>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	589b      	ldr	r3, [r3, r2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2390      	movs	r3, #144	; 0x90
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a41      	ldr	r2, [pc, #260]	; (8001094 <HAL_GPIO_Init+0x2c4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x1d2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a40      	ldr	r2, [pc, #256]	; (8001098 <HAL_GPIO_Init+0x2c8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x1ce>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x1d8>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x1d8>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x1d8>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	2103      	movs	r1, #3
 8000fac:	400a      	ands	r2, r1
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb8:	4935      	ldr	r1, [pc, #212]	; (8001090 <HAL_GPIO_Init+0x2c0>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	025b      	lsls	r3, r3, #9
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_GPIO_Init+0x2cc>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43da      	mvns	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	035b      	lsls	r3, r3, #13
 8001032:	4013      	ands	r3, r2
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_GPIO_Init+0x2cc>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	039b      	lsls	r3, r3, #14
 800105c:	4013      	ands	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_GPIO_Init+0x2cc>)
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	40da      	lsrs	r2, r3
 800107c:	1e13      	subs	r3, r2, #0
 800107e:	d000      	beq.n	8001082 <HAL_GPIO_Init+0x2b2>
 8001080:	e6ae      	b.n	8000de0 <HAL_GPIO_Init+0x10>
  } 
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b006      	add	sp, #24
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40010000 	.word	0x40010000
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	0008      	movs	r0, r1
 80010aa:	0011      	movs	r1, r2
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	1c7b      	adds	r3, r7, #1
 80010b4:	1c0a      	adds	r2, r1, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e301      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4013      	ands	r3, r2
 80010f6:	d100      	bne.n	80010fa <HAL_RCC_OscConfig+0x1e>
 80010f8:	e08d      	b.n	8001216 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010fa:	4bc3      	ldr	r3, [pc, #780]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	220c      	movs	r2, #12
 8001100:	4013      	ands	r3, r2
 8001102:	2b04      	cmp	r3, #4
 8001104:	d00e      	beq.n	8001124 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001106:	4bc0      	ldr	r3, [pc, #768]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	220c      	movs	r2, #12
 800110c:	4013      	ands	r3, r2
 800110e:	2b08      	cmp	r3, #8
 8001110:	d116      	bne.n	8001140 <HAL_RCC_OscConfig+0x64>
 8001112:	4bbd      	ldr	r3, [pc, #756]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	401a      	ands	r2, r3
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	025b      	lsls	r3, r3, #9
 8001120:	429a      	cmp	r2, r3
 8001122:	d10d      	bne.n	8001140 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	4bb8      	ldr	r3, [pc, #736]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x56>
 8001130:	e070      	b.n	8001214 <HAL_RCC_OscConfig+0x138>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d000      	beq.n	800113c <HAL_RCC_OscConfig+0x60>
 800113a:	e06b      	b.n	8001214 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e2d8      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d107      	bne.n	8001158 <HAL_RCC_OscConfig+0x7c>
 8001148:	4baf      	ldr	r3, [pc, #700]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4bae      	ldr	r3, [pc, #696]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0249      	lsls	r1, r1, #9
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e02f      	b.n	80011b8 <HAL_RCC_OscConfig+0xdc>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10c      	bne.n	800117a <HAL_RCC_OscConfig+0x9e>
 8001160:	4ba9      	ldr	r3, [pc, #676]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4ba8      	ldr	r3, [pc, #672]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001166:	49a9      	ldr	r1, [pc, #676]	; (800140c <HAL_RCC_OscConfig+0x330>)
 8001168:	400a      	ands	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	4ba6      	ldr	r3, [pc, #664]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4ba5      	ldr	r3, [pc, #660]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001172:	49a7      	ldr	r1, [pc, #668]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 8001174:	400a      	ands	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e01e      	b.n	80011b8 <HAL_RCC_OscConfig+0xdc>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0xc4>
 8001182:	4ba1      	ldr	r3, [pc, #644]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4ba0      	ldr	r3, [pc, #640]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	02c9      	lsls	r1, r1, #11
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4b9d      	ldr	r3, [pc, #628]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b9c      	ldr	r3, [pc, #624]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0249      	lsls	r1, r1, #9
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xdc>
 80011a0:	4b99      	ldr	r3, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b98      	ldr	r3, [pc, #608]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	4999      	ldr	r1, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x330>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b95      	ldr	r3, [pc, #596]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	4997      	ldr	r1, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d014      	beq.n	80011ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fd24 	bl	8000c0c <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fd1f 	bl	8000c0c <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e28a      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011dc:	4b8a      	ldr	r3, [pc, #552]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	4013      	ands	r3, r2
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0xee>
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fd0f 	bl	8000c0c <HAL_GetTick>
 80011ee:	0003      	movs	r3, r0
 80011f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fd0a 	bl	8000c0c <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e275      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	4b80      	ldr	r3, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x118>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d100      	bne.n	8001222 <HAL_RCC_OscConfig+0x146>
 8001220:	e069      	b.n	80012f6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001222:	4b79      	ldr	r3, [pc, #484]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	220c      	movs	r2, #12
 8001228:	4013      	ands	r3, r2
 800122a:	d00b      	beq.n	8001244 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800122c:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	220c      	movs	r2, #12
 8001232:	4013      	ands	r3, r2
 8001234:	2b08      	cmp	r3, #8
 8001236:	d11c      	bne.n	8001272 <HAL_RCC_OscConfig+0x196>
 8001238:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	025b      	lsls	r3, r3, #9
 8001240:	4013      	ands	r3, r2
 8001242:	d116      	bne.n	8001272 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b70      	ldr	r3, [pc, #448]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x17e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e24b      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	22f8      	movs	r2, #248	; 0xf8
 8001260:	4393      	bics	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00da      	lsls	r2, r3, #3
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001270:	e041      	b.n	80012f6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4b62      	ldr	r3, [pc, #392]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fcc1 	bl	8000c0c <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fcbc 	bl	8000c0c <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e227      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f1      	beq.n	8001290 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b56      	ldr	r3, [pc, #344]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	22f8      	movs	r2, #248	; 0xf8
 80012b2:	4393      	bics	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00da      	lsls	r2, r3, #3
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e018      	b.n	80012f6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	2101      	movs	r1, #1
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc9c 	bl	8000c0c <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff fc97 	bl	8000c0c <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e202      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2202      	movs	r2, #2
 80012f2:	4013      	ands	r3, r2
 80012f4:	d1f1      	bne.n	80012da <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2208      	movs	r2, #8
 80012fc:	4013      	ands	r3, r2
 80012fe:	d036      	beq.n	800136e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d019      	beq.n	800133c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fc7a 	bl	8000c0c <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc75 	bl	8000c0c <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1e0      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d0f1      	beq.n	800131e <HAL_RCC_OscConfig+0x242>
 800133a:	e018      	b.n	800136e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001342:	2101      	movs	r1, #1
 8001344:	438a      	bics	r2, r1
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fc60 	bl	8000c0c <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fc5b 	bl	8000c0c <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1c6      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d1f1      	bne.n	8001352 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2204      	movs	r2, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x29e>
 8001378:	e0b4      	b.n	80014e4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137a:	201f      	movs	r0, #31
 800137c:	183b      	adds	r3, r7, r0
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	055b      	lsls	r3, r3, #21
 800138a:	4013      	ands	r3, r2
 800138c:	d110      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0549      	lsls	r1, r1, #21
 8001398:	430a      	orrs	r2, r1
 800139a:	61da      	str	r2, [r3, #28]
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	055b      	lsls	r3, r3, #21
 80013a4:	4013      	ands	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4013      	ands	r3, r2
 80013ba:	d11a      	bne.n	80013f2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0049      	lsls	r1, r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ca:	f7ff fc1f 	bl	8000c0c <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d4:	f7ff fc1a 	bl	8000c0c <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e185      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d10e      	bne.n	8001418 <HAL_RCC_OscConfig+0x33c>
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4b02      	ldr	r3, [pc, #8]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001400:	2101      	movs	r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	e035      	b.n	8001474 <HAL_RCC_OscConfig+0x398>
 8001408:	40021000 	.word	0x40021000
 800140c:	fffeffff 	.word	0xfffeffff
 8001410:	fffbffff 	.word	0xfffbffff
 8001414:	40007000 	.word	0x40007000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <HAL_RCC_OscConfig+0x35e>
 8001420:	4bb6      	ldr	r3, [pc, #728]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001422:	6a1a      	ldr	r2, [r3, #32]
 8001424:	4bb5      	ldr	r3, [pc, #724]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	621a      	str	r2, [r3, #32]
 800142c:	4bb3      	ldr	r3, [pc, #716]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bb2      	ldr	r3, [pc, #712]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001432:	2104      	movs	r1, #4
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x398>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x380>
 8001442:	4bae      	ldr	r3, [pc, #696]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4bad      	ldr	r3, [pc, #692]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001448:	2104      	movs	r1, #4
 800144a:	430a      	orrs	r2, r1
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	4bab      	ldr	r3, [pc, #684]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4baa      	ldr	r3, [pc, #680]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x398>
 800145c:	4ba7      	ldr	r3, [pc, #668]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	4ba6      	ldr	r3, [pc, #664]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001462:	2101      	movs	r1, #1
 8001464:	438a      	bics	r2, r1
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	4ba4      	ldr	r3, [pc, #656]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4ba3      	ldr	r3, [pc, #652]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800146e:	2104      	movs	r1, #4
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d014      	beq.n	80014a6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fbc6 	bl	8000c0c <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e009      	b.n	800149a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fbc1 	bl	8000c0c <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a9b      	ldr	r2, [pc, #620]	; (8001700 <HAL_RCC_OscConfig+0x624>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e12b      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b98      	ldr	r3, [pc, #608]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x3aa>
 80014a4:	e013      	b.n	80014ce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fbb1 	bl	8000c0c <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e009      	b.n	80014c4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fbac 	bl	8000c0c <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a91      	ldr	r2, [pc, #580]	; (8001700 <HAL_RCC_OscConfig+0x624>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e116      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	4b8d      	ldr	r3, [pc, #564]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014ce:	231f      	movs	r3, #31
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b88      	ldr	r3, [pc, #544]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	4b87      	ldr	r3, [pc, #540]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80014de:	4989      	ldr	r1, [pc, #548]	; (8001704 <HAL_RCC_OscConfig+0x628>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2210      	movs	r2, #16
 80014ea:	4013      	ands	r3, r2
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12a      	bne.n	800154c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014f6:	4b81      	ldr	r3, [pc, #516]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b80      	ldr	r3, [pc, #512]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001502:	4b7e      	ldr	r3, [pc, #504]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	4b7d      	ldr	r3, [pc, #500]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fb7d 	bl	8000c0c <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001518:	f7ff fb78 	bl	8000c0c <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0e3      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800152a:	4b74      	ldr	r3, [pc, #464]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d0f1      	beq.n	8001518 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001534:	4b71      	ldr	r3, [pc, #452]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4393      	bics	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	00da      	lsls	r2, r3, #3
 8001544:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001546:	430a      	orrs	r2, r1
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
 800154a:	e034      	b.n	80015b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	3305      	adds	r3, #5
 8001552:	d111      	bne.n	8001578 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001554:	4b69      	ldr	r3, [pc, #420]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	22f8      	movs	r2, #248	; 0xf8
 8001566:	4393      	bics	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	4b62      	ldr	r3, [pc, #392]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001572:	430a      	orrs	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
 8001576:	e01e      	b.n	80015b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800157e:	2104      	movs	r1, #4
 8001580:	430a      	orrs	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001588:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fb3c 	bl	8000c0c <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159a:	f7ff fb37 	bl	8000c0c <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0a2      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80015ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4e4>
 80015be:	e097      	b.n	80016f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	220c      	movs	r2, #12
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d100      	bne.n	80015ce <HAL_RCC_OscConfig+0x4f2>
 80015cc:	e06b      	b.n	80016a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d14c      	bne.n	8001670 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b48      	ldr	r3, [pc, #288]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80015dc:	494a      	ldr	r1, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x62c>)
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb13 	bl	8000c0c <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb0e 	bl	8000c0c <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e079      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	049b      	lsls	r3, r3, #18
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	220f      	movs	r2, #15
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_RCC_OscConfig+0x630>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	431a      	orrs	r2, r3
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001634:	430a      	orrs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	0449      	lsls	r1, r1, #17
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fae1 	bl	8000c0c <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fadc 	bl	8000c0c <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e047      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	049b      	lsls	r3, r3, #18
 800166a:	4013      	ands	r3, r2
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x574>
 800166e:	e03f      	b.n	80016f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 8001676:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x62c>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fac6 	bl	8000c0c <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fac1 	bl	8000c0c <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e02c      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	049b      	lsls	r3, r3, #18
 80016a0:	4013      	ands	r3, r2
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x5aa>
 80016a4:	e024      	b.n	80016f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e01f      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x620>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10e      	bne.n	80016ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	220f      	movs	r2, #15
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d107      	bne.n	80016ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	23f0      	movs	r3, #240	; 0xf0
 80016e0:	039b      	lsls	r3, r3, #14
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b008      	add	sp, #32
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000
 8001700:	00001388 	.word	0x00001388
 8001704:	efffffff 	.word	0xefffffff
 8001708:	feffffff 	.word	0xfeffffff
 800170c:	ffc2ffff 	.word	0xffc2ffff

08001710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b3      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d911      	bls.n	8001756 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b58      	ldr	r3, [pc, #352]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e09a      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d015      	beq.n	800178c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d006      	beq.n	8001778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800176a:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001770:	21e0      	movs	r1, #224	; 0xe0
 8001772:	00c9      	lsls	r1, r1, #3
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	22f0      	movs	r2, #240	; 0xf0
 800177e:	4393      	bics	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	d040      	beq.n	8001818 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	029b      	lsls	r3, r3, #10
 80017a6:	4013      	ands	r3, r2
 80017a8:	d114      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06e      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	049b      	lsls	r3, r3, #18
 80017be:	4013      	ands	r3, r2
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e062      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e05b      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa10 	bl	8000c0c <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	e009      	b.n	8001806 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff fa0b 	bl	8000c0c <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_RCC_ClockConfig+0x18c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e042      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	220c      	movs	r2, #12
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1ec      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d211      	bcs.n	800184a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_RCC_ClockConfig+0x184>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e020      	b.n	800188c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d009      	beq.n	8001868 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_RCC_ClockConfig+0x190>)
 800185a:	4013      	ands	r3, r2
 800185c:	0019      	movs	r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001868:	f000 f820 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186c:	0001      	movs	r1, r0
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x188>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	220f      	movs	r2, #15
 8001876:	4013      	ands	r3, r2
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x194>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	000a      	movs	r2, r1
 800187e:	40da      	lsrs	r2, r3
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x198>)
 8001882:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff f97b 	bl	8000b80 <HAL_InitTick>
  
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b004      	add	sp, #16
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	00001388 	.word	0x00001388
 80018a0:	fffff8ff 	.word	0xfffff8ff
 80018a4:	08003840 	.word	0x08003840
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08f      	sub	sp, #60	; 0x3c
 80018b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018b2:	2314      	movs	r3, #20
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ba:	c313      	stmia	r3!, {r0, r1, r4}
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018c6:	c313      	stmia	r3!, {r0, r1, r4}
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_GetSysClockFreq+0xc0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	220c      	movs	r2, #12
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d002      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d003      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x50>
 80018f4:	e02d      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fa:	e02d      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fe:	0c9b      	lsrs	r3, r3, #18
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	2214      	movs	r2, #20
 8001906:	18ba      	adds	r2, r7, r2
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_RCC_GetSysClockFreq+0xc0>)
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	220f      	movs	r2, #15
 8001912:	4013      	ands	r3, r2
 8001914:	1d3a      	adds	r2, r7, #4
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800191a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	4013      	ands	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001926:	4812      	ldr	r0, [pc, #72]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001928:	f7fe fc00 	bl	800012c <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	001a      	movs	r2, r3
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	4353      	muls	r3, r2
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
 8001936:	e009      	b.n	800194c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193a:	000a      	movs	r2, r1
 800193c:	0152      	lsls	r2, r2, #5
 800193e:	1a52      	subs	r2, r2, r1
 8001940:	0193      	lsls	r3, r2, #6
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	185b      	adds	r3, r3, r1
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001956:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b00f      	add	sp, #60	; 0x3c
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	08003820 	.word	0x08003820
 8001968:	08003830 	.word	0x08003830
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_RCC_GetHCLKFreq+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800198c:	f7ff fff2 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001990:	0001      	movs	r1, r0
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	2207      	movs	r2, #7
 800199a:	4013      	ands	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	000b      	movs	r3, r1
}    
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	08003850 	.word	0x08003850

080019b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	4013      	ands	r3, r2
 80019ce:	d100      	bne.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019d0:	e08e      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2017      	movs	r0, #23
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	055b      	lsls	r3, r3, #21
 80019e2:	4013      	ands	r3, r2
 80019e4:	d110      	bne.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0549      	lsls	r1, r1, #21
 80019f0:	430a      	orrs	r2, r1
 80019f2:	61da      	str	r2, [r3, #28]
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	055b      	lsls	r3, r3, #21
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4013      	ands	r3, r2
 8001a12:	d11a      	bne.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a14:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	0049      	lsls	r1, r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a22:	f7ff f8f3 	bl	8000c0c <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	e008      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7ff f8ee 	bl	8000c0c <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e077      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d034      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	23c0      	movs	r3, #192	; 0xc0
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d02c      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a33      	ldr	r2, [pc, #204]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	0249      	lsls	r1, r1, #9
 8001a80:	430a      	orrs	r2, r1
 8001a82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a8a:	492e      	ldr	r1, [pc, #184]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f8b5 	bl	8000c0c <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa6:	e009      	b.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f8b0 	bl	8000c0c <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e038      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ada:	2317      	movs	r3, #23
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aea:	4918      	ldr	r1, [pc, #96]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	2203      	movs	r2, #3
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2220      	movs	r2, #32
 8001b14:	4013      	ands	r3, r2
 8001b16:	d009      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b006      	add	sp, #24
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	fffffcff 	.word	0xfffffcff
 8001b44:	fffeffff 	.word	0xfffeffff
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	efffffff 	.word	0xefffffff

08001b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e042      	b.n	8001be8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	223d      	movs	r2, #61	; 0x3d
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d107      	bne.n	8001b7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	223c      	movs	r2, #60	; 0x3c
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe fec7 	bl	800090c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223d      	movs	r2, #61	; 0x3d
 8001b82:	2102      	movs	r1, #2
 8001b84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	0019      	movs	r1, r3
 8001b90:	0010      	movs	r0, r2
 8001b92:	f000 fab7 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2246      	movs	r2, #70	; 0x46
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	223e      	movs	r2, #62	; 0x3e
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	223f      	movs	r2, #63	; 0x3f
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2240      	movs	r2, #64	; 0x40
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2241      	movs	r2, #65	; 0x41
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2242      	movs	r2, #66	; 0x42
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2243      	movs	r2, #67	; 0x43
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2244      	movs	r2, #68	; 0x44
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2245      	movs	r2, #69	; 0x45
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223d      	movs	r2, #61	; 0x3d
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e042      	b.n	8001c88 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223d      	movs	r2, #61	; 0x3d
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	223c      	movs	r2, #60	; 0x3c
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f839 	bl	8001c90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	223d      	movs	r2, #61	; 0x3d
 8001c22:	2102      	movs	r1, #2
 8001c24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f000 fa67 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2246      	movs	r2, #70	; 0x46
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	223e      	movs	r2, #62	; 0x3e
 8001c42:	2101      	movs	r1, #1
 8001c44:	5499      	strb	r1, [r3, r2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	223f      	movs	r2, #63	; 0x3f
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	5499      	strb	r1, [r3, r2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2241      	movs	r2, #65	; 0x41
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2242      	movs	r2, #66	; 0x42
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2243      	movs	r2, #67	; 0x43
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	5499      	strb	r1, [r3, r2]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2244      	movs	r2, #68	; 0x44
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2245      	movs	r2, #69	; 0x45
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	223d      	movs	r2, #61	; 0x3d
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_TIM_PWM_Start+0x22>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	223e      	movs	r2, #62	; 0x3e
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	4193      	sbcs	r3, r2
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	e01f      	b.n	8001d02 <HAL_TIM_PWM_Start+0x62>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d108      	bne.n	8001cda <HAL_TIM_PWM_Start+0x3a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	223f      	movs	r2, #63	; 0x3f
 8001ccc:	5c9b      	ldrb	r3, [r3, r2]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	4193      	sbcs	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e013      	b.n	8001d02 <HAL_TIM_PWM_Start+0x62>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d108      	bne.n	8001cf2 <HAL_TIM_PWM_Start+0x52>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2240      	movs	r2, #64	; 0x40
 8001ce4:	5c9b      	ldrb	r3, [r3, r2]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	4193      	sbcs	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e007      	b.n	8001d02 <HAL_TIM_PWM_Start+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2241      	movs	r2, #65	; 0x41
 8001cf6:	5c9b      	ldrb	r3, [r3, r2]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	1e5a      	subs	r2, r3, #1
 8001cfe:	4193      	sbcs	r3, r2
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06a      	b.n	8001de0 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start+0x7a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	223e      	movs	r2, #62	; 0x3e
 8001d14:	2102      	movs	r1, #2
 8001d16:	5499      	strb	r1, [r3, r2]
 8001d18:	e013      	b.n	8001d42 <HAL_TIM_PWM_Start+0xa2>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_PWM_Start+0x8a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	223f      	movs	r2, #63	; 0x3f
 8001d24:	2102      	movs	r1, #2
 8001d26:	5499      	strb	r1, [r3, r2]
 8001d28:	e00b      	b.n	8001d42 <HAL_TIM_PWM_Start+0xa2>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d104      	bne.n	8001d3a <HAL_TIM_PWM_Start+0x9a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	2102      	movs	r1, #2
 8001d36:	5499      	strb	r1, [r3, r2]
 8001d38:	e003      	b.n	8001d42 <HAL_TIM_PWM_Start+0xa2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2241      	movs	r2, #65	; 0x41
 8001d3e:	2102      	movs	r1, #2
 8001d40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6839      	ldr	r1, [r7, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 fcca 	bl	80026e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_TIM_PWM_Start+0x148>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_TIM_PWM_Start+0xce>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a23      	ldr	r2, [pc, #140]	; (8001dec <HAL_TIM_PWM_Start+0x14c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d004      	beq.n	8001d6e <HAL_TIM_PWM_Start+0xce>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_TIM_PWM_Start+0x150>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xd2>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_TIM_PWM_Start+0xd4>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0209      	lsls	r1, r1, #8
 8001d86:	430a      	orrs	r2, r1
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_TIM_PWM_Start+0x148>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00a      	beq.n	8001daa <HAL_TIM_PWM_Start+0x10a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	05db      	lsls	r3, r3, #23
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d004      	beq.n	8001daa <HAL_TIM_PWM_Start+0x10a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_TIM_PWM_Start+0x154>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d010      	beq.n	8001dde <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dcc:	e007      	b.n	8001dde <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40012c00 	.word	0x40012c00
 8001dec:	40014400 	.word	0x40014400
 8001df0:	40014800 	.word	0x40014800
 8001df4:	40000400 	.word	0x40000400

08001df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	223c      	movs	r2, #60	; 0x3c
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0a7      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	223c      	movs	r2, #60	; 0x3c
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d100      	bne.n	8001e22 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001e20:	e076      	b.n	8001f10 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d900      	bls.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001e28:	e095      	b.n	8001f56 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d04e      	beq.n	8001ece <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d900      	bls.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0x40>
 8001e36:	e08e      	b.n	8001f56 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d021      	beq.n	8001e88 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001e44:	e087      	b.n	8001f56 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	0011      	movs	r1, r2
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f9ce 	bl	80021f0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2108      	movs	r1, #8
 8001e60:	430a      	orrs	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2104      	movs	r1, #4
 8001e70:	438a      	bics	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6999      	ldr	r1, [r3, #24]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	619a      	str	r2, [r3, #24]
      break;
 8001e86:	e067      	b.n	8001f58 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	0011      	movs	r1, r2
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 fa2b 	bl	80022ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	0109      	lsls	r1, r1, #4
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	492e      	ldr	r1, [pc, #184]	; (8001f6c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6999      	ldr	r1, [r3, #24]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	021a      	lsls	r2, r3, #8
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	619a      	str	r2, [r3, #24]
      break;
 8001ecc:	e044      	b.n	8001f58 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fa86 	bl	80023e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	438a      	bics	r2, r1
 8001efa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69d9      	ldr	r1, [r3, #28]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	61da      	str	r2, [r3, #28]
      break;
 8001f0e:	e023      	b.n	8001f58 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 fae5 	bl	80024e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0109      	lsls	r1, r1, #4
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	490c      	ldr	r1, [pc, #48]	; (8001f6c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69d9      	ldr	r1, [r3, #28]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	021a      	lsls	r2, r3, #8
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	61da      	str	r2, [r3, #28]
      break;
 8001f54:	e000      	b.n	8001f58 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001f56:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	223c      	movs	r2, #60	; 0x3c
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	fffffbff 	.word	0xfffffbff

08001f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	223c      	movs	r2, #60	; 0x3c
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_TIM_ConfigClockSource+0x18>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e0b7      	b.n	80020f8 <HAL_TIM_ConfigClockSource+0x188>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	223c      	movs	r2, #60	; 0x3c
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	223d      	movs	r2, #61	; 0x3d
 8001f94:	2102      	movs	r1, #2
 8001f96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2277      	movs	r2, #119	; 0x77
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_TIM_ConfigClockSource+0x190>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0192      	lsls	r2, r2, #6
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0xd6>
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	0192      	lsls	r2, r2, #6
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d900      	bls.n	8001fce <HAL_TIM_ConfigClockSource+0x5e>
 8001fcc:	e088      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	0152      	lsls	r2, r2, #5
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d100      	bne.n	8001fd8 <HAL_TIM_ConfigClockSource+0x68>
 8001fd6:	e085      	b.n	80020e4 <HAL_TIM_ConfigClockSource+0x174>
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	0152      	lsls	r2, r2, #5
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d900      	bls.n	8001fe2 <HAL_TIM_ConfigClockSource+0x72>
 8001fe0:	e07e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8001fe2:	2b70      	cmp	r3, #112	; 0x70
 8001fe4:	d018      	beq.n	8002018 <HAL_TIM_ConfigClockSource+0xa8>
 8001fe6:	d900      	bls.n	8001fea <HAL_TIM_ConfigClockSource+0x7a>
 8001fe8:	e07a      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8001fea:	2b60      	cmp	r3, #96	; 0x60
 8001fec:	d04f      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x11e>
 8001fee:	d900      	bls.n	8001ff2 <HAL_TIM_ConfigClockSource+0x82>
 8001ff0:	e076      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8001ff2:	2b50      	cmp	r3, #80	; 0x50
 8001ff4:	d03b      	beq.n	800206e <HAL_TIM_ConfigClockSource+0xfe>
 8001ff6:	d900      	bls.n	8001ffa <HAL_TIM_ConfigClockSource+0x8a>
 8001ff8:	e072      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8001ffa:	2b40      	cmp	r3, #64	; 0x40
 8001ffc:	d057      	beq.n	80020ae <HAL_TIM_ConfigClockSource+0x13e>
 8001ffe:	d900      	bls.n	8002002 <HAL_TIM_ConfigClockSource+0x92>
 8002000:	e06e      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8002002:	2b30      	cmp	r3, #48	; 0x30
 8002004:	d063      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15e>
 8002006:	d86b      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d060      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15e>
 800200c:	d868      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
 800200e:	2b00      	cmp	r3, #0
 8002010:	d05d      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15e>
 8002012:	2b10      	cmp	r3, #16
 8002014:	d05b      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002016:	e063      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f000 fb3c 	bl	80026a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2277      	movs	r2, #119	; 0x77
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]
      break;
 8002044:	e04f      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6899      	ldr	r1, [r3, #8]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f000 fb25 	bl	80026a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	01c9      	lsls	r1, r1, #7
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
      break;
 800206c:	e03b      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6859      	ldr	r1, [r3, #4]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	001a      	movs	r2, r3
 800207c:	f000 fa98 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2150      	movs	r1, #80	; 0x50
 8002086:	0018      	movs	r0, r3
 8002088:	f000 faf2 	bl	8002670 <TIM_ITRx_SetConfig>
      break;
 800208c:	e02b      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	001a      	movs	r2, r3
 800209c:	f000 fab6 	bl	800260c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2160      	movs	r1, #96	; 0x60
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 fae2 	bl	8002670 <TIM_ITRx_SetConfig>
      break;
 80020ac:	e01b      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	001a      	movs	r2, r3
 80020bc:	f000 fa78 	bl	80025b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2140      	movs	r1, #64	; 0x40
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 fad2 	bl	8002670 <TIM_ITRx_SetConfig>
      break;
 80020cc:	e00b      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0019      	movs	r1, r3
 80020d8:	0010      	movs	r0, r2
 80020da:	f000 fac9 	bl	8002670 <TIM_ITRx_SetConfig>
        break;
 80020de:	e002      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	e000      	b.n	80020e6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80020e4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223d      	movs	r2, #61	; 0x3d
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	223c      	movs	r2, #60	; 0x3c
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	ffff00ff 	.word	0xffff00ff

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <TIM_Base_SetConfig+0xd4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d008      	beq.n	800212e <TIM_Base_SetConfig+0x2a>
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	05db      	lsls	r3, r3, #23
 8002122:	429a      	cmp	r2, r3
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0x2a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2c      	ldr	r2, [pc, #176]	; (80021dc <TIM_Base_SetConfig+0xd8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2270      	movs	r2, #112	; 0x70
 8002132:	4393      	bics	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a25      	ldr	r2, [pc, #148]	; (80021d8 <TIM_Base_SetConfig+0xd4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d014      	beq.n	8002172 <TIM_Base_SetConfig+0x6e>
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	05db      	lsls	r3, r3, #23
 800214e:	429a      	cmp	r2, r3
 8002150:	d00f      	beq.n	8002172 <TIM_Base_SetConfig+0x6e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <TIM_Base_SetConfig+0xd8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0x6e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <TIM_Base_SetConfig+0xdc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0x6e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <TIM_Base_SetConfig+0xe0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0x6e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d108      	bne.n	8002184 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2280      	movs	r2, #128	; 0x80
 8002188:	4393      	bics	r3, r2
 800218a:	001a      	movs	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <TIM_Base_SetConfig+0xd4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <TIM_Base_SetConfig+0xbe>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <TIM_Base_SetConfig+0xe0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <TIM_Base_SetConfig+0xbe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d103      	bne.n	80021ca <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	615a      	str	r2, [r3, #20]
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40002000 	.word	0x40002000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	fffffcff 	.word	0xfffffcff

080021f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2201      	movs	r2, #1
 8002200:	4393      	bics	r3, r2
 8002202:	001a      	movs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2270      	movs	r2, #112	; 0x70
 800221e:	4393      	bics	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2203      	movs	r2, #3
 8002226:	4393      	bics	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2202      	movs	r2, #2
 8002238:	4393      	bics	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a23      	ldr	r2, [pc, #140]	; (80022d8 <TIM_OC1_SetConfig+0xe8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <TIM_OC1_SetConfig+0x6e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <TIM_OC1_SetConfig+0xec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d003      	beq.n	800225e <TIM_OC1_SetConfig+0x6e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <TIM_OC1_SetConfig+0xf0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10c      	bne.n	8002278 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2208      	movs	r2, #8
 8002262:	4393      	bics	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2204      	movs	r2, #4
 8002274:	4393      	bics	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <TIM_OC1_SetConfig+0xe8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <TIM_OC1_SetConfig+0xa0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <TIM_OC1_SetConfig+0xec>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <TIM_OC1_SetConfig+0xa0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <TIM_OC1_SetConfig+0xf0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <TIM_OC1_SetConfig+0xf4>)
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <TIM_OC1_SetConfig+0xf8>)
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	621a      	str	r2, [r3, #32]
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800
 80022e4:	fffffeff 	.word	0xfffffeff
 80022e8:	fffffdff 	.word	0xfffffdff

080022ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	2210      	movs	r2, #16
 80022fc:	4393      	bics	r3, r2
 80022fe:	001a      	movs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a2c      	ldr	r2, [pc, #176]	; (80023cc <TIM_OC2_SetConfig+0xe0>)
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <TIM_OC2_SetConfig+0xe4>)
 8002322:	4013      	ands	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2220      	movs	r2, #32
 8002336:	4393      	bics	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <TIM_OC2_SetConfig+0xe8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10d      	bne.n	800236a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	4393      	bics	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	4393      	bics	r3, r2
 8002368:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a19      	ldr	r2, [pc, #100]	; (80023d4 <TIM_OC2_SetConfig+0xe8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_OC2_SetConfig+0x96>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <TIM_OC2_SetConfig+0xec>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_OC2_SetConfig+0x96>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <TIM_OC2_SetConfig+0xf0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d113      	bne.n	80023aa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <TIM_OC2_SetConfig+0xf4>)
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <TIM_OC2_SetConfig+0xf8>)
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	621a      	str	r2, [r3, #32]
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b006      	add	sp, #24
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	ffff8fff 	.word	0xffff8fff
 80023d0:	fffffcff 	.word	0xfffffcff
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40014400 	.word	0x40014400
 80023dc:	40014800 	.word	0x40014800
 80023e0:	fffffbff 	.word	0xfffffbff
 80023e4:	fffff7ff 	.word	0xfffff7ff

080023e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <TIM_OC3_SetConfig+0xdc>)
 80023f8:	401a      	ands	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2270      	movs	r2, #112	; 0x70
 8002414:	4393      	bics	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2203      	movs	r2, #3
 800241c:	4393      	bics	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <TIM_OC3_SetConfig+0xe0>)
 800242e:	4013      	ands	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <TIM_OC3_SetConfig+0xe4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10d      	bne.n	8002462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <TIM_OC3_SetConfig+0xe8>)
 800244a:	4013      	ands	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <TIM_OC3_SetConfig+0xec>)
 800245e:	4013      	ands	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <TIM_OC3_SetConfig+0xe4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <TIM_OC3_SetConfig+0x92>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <TIM_OC3_SetConfig+0xf0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d003      	beq.n	800247a <TIM_OC3_SetConfig+0x92>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <TIM_OC3_SetConfig+0xf4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d113      	bne.n	80024a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <TIM_OC3_SetConfig+0xf8>)
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <TIM_OC3_SetConfig+0xfc>)
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	621a      	str	r2, [r3, #32]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b006      	add	sp, #24
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	fffffeff 	.word	0xfffffeff
 80024c8:	fffffdff 	.word	0xfffffdff
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	fffff7ff 	.word	0xfffff7ff
 80024d4:	fffffbff 	.word	0xfffffbff
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800
 80024e0:	ffffefff 	.word	0xffffefff
 80024e4:	ffffdfff 	.word	0xffffdfff

080024e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <TIM_OC4_SetConfig+0xa8>)
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a20      	ldr	r2, [pc, #128]	; (8002594 <TIM_OC4_SetConfig+0xac>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <TIM_OC4_SetConfig+0xb0>)
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <TIM_OC4_SetConfig+0xb4>)
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	031b      	lsls	r3, r3, #12
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <TIM_OC4_SetConfig+0xb8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d007      	beq.n	8002558 <TIM_OC4_SetConfig+0x70>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <TIM_OC4_SetConfig+0xbc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_OC4_SetConfig+0x70>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <TIM_OC4_SetConfig+0xc0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d109      	bne.n	800256c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <TIM_OC4_SetConfig+0xc4>)
 800255c:	4013      	ands	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	019b      	lsls	r3, r3, #6
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b006      	add	sp, #24
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	ffffefff 	.word	0xffffefff
 8002594:	ffff8fff 	.word	0xffff8fff
 8002598:	fffffcff 	.word	0xfffffcff
 800259c:	ffffdfff 	.word	0xffffdfff
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40014400 	.word	0x40014400
 80025a8:	40014800 	.word	0x40014800
 80025ac:	ffffbfff 	.word	0xffffbfff

080025b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4393      	bics	r3, r2
 80025ca:	001a      	movs	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	22f0      	movs	r2, #240	; 0xf0
 80025da:	4393      	bics	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	220a      	movs	r2, #10
 80025ec:	4393      	bics	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b006      	add	sp, #24
 800260a:	bd80      	pop	{r7, pc}

0800260c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	2210      	movs	r2, #16
 800261e:	4393      	bics	r3, r2
 8002620:	001a      	movs	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <TIM_TI2_ConfigInputStage+0x60>)
 8002636:	4013      	ands	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	031b      	lsls	r3, r3, #12
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	22a0      	movs	r2, #160	; 0xa0
 8002648:	4393      	bics	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b006      	add	sp, #24
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	ffff0fff 	.word	0xffff0fff

08002670 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2270      	movs	r2, #112	; 0x70
 8002684:	4393      	bics	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	2207      	movs	r2, #7
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b004      	add	sp, #16
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <TIM_ETR_SetConfig+0x3c>)
 80026bc:	4013      	ands	r3, r2
 80026be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	021a      	lsls	r2, r3, #8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b006      	add	sp, #24
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	ffff00ff 	.word	0xffff00ff

080026e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	221f      	movs	r2, #31
 80026f4:	4013      	ands	r3, r2
 80026f6:	2201      	movs	r2, #1
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	43d2      	mvns	r2, r2
 8002706:	401a      	ands	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1a      	ldr	r2, [r3, #32]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	211f      	movs	r1, #31
 8002714:	400b      	ands	r3, r1
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4099      	lsls	r1, r3
 800271a:	000b      	movs	r3, r1
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b006      	add	sp, #24
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223c      	movs	r2, #60	; 0x3c
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e042      	b.n	80027ca <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223c      	movs	r2, #60	; 0x3c
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	223d      	movs	r2, #61	; 0x3d
 8002750:	2102      	movs	r1, #2
 8002752:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2270      	movs	r2, #112	; 0x70
 8002768:	4393      	bics	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00a      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	05db      	lsls	r3, r3, #23
 8002790:	429a      	cmp	r2, r3
 8002792:	d004      	beq.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10c      	bne.n	80027b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	4393      	bics	r3, r2
 80027a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	223d      	movs	r2, #61	; 0x3d
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223c      	movs	r2, #60	; 0x3c
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e044      	b.n	8002878 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d107      	bne.n	8002806 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2274      	movs	r2, #116	; 0x74
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	0018      	movs	r0, r3
 8002802:	f7fe f8dd 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f000 f8da 	bl	80029d8 <UART_SetConfig>
 8002824:	0003      	movs	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e024      	b.n	8002878 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 f9f7 	bl	8002c2c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	490d      	ldr	r1, [pc, #52]	; (8002880 <HAL_UART_Init+0xa4>)
 800284a:	400a      	ands	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	212a      	movs	r1, #42	; 0x2a
 800285a:	438a      	bics	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fa8f 	bl	8002d94 <UART_CheckIdleState>
 8002876:	0003      	movs	r3, r0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffffb7ff 	.word	0xffffb7ff

08002884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002898:	2b20      	cmp	r3, #32
 800289a:	d000      	beq.n	800289e <HAL_UART_Transmit+0x1a>
 800289c:	e096      	b.n	80029cc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_UART_Transmit+0x28>
 80028a4:	1dbb      	adds	r3, r7, #6
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e08e      	b.n	80029ce <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	015b      	lsls	r3, r3, #5
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d109      	bne.n	80028d0 <HAL_UART_Transmit+0x4c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d001      	beq.n	80028d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e07e      	b.n	80029ce <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2274      	movs	r2, #116	; 0x74
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Transmit+0x5a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e077      	b.n	80029ce <HAL_UART_Transmit+0x14a>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2274      	movs	r2, #116	; 0x74
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	2100      	movs	r1, #0
 80028ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2221      	movs	r2, #33	; 0x21
 80028f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f4:	f7fe f98a 	bl	8000c0c <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1dba      	adds	r2, r7, #6
 8002900:	2150      	movs	r1, #80	; 0x50
 8002902:	8812      	ldrh	r2, [r2, #0]
 8002904:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1dba      	adds	r2, r7, #6
 800290a:	2152      	movs	r1, #82	; 0x52
 800290c:	8812      	ldrh	r2, [r2, #0]
 800290e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	429a      	cmp	r2, r3
 800291a:	d108      	bne.n	800292e <HAL_UART_Transmit+0xaa>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d104      	bne.n	800292e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	e003      	b.n	8002936 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2274      	movs	r2, #116	; 0x74
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800293e:	e02d      	b.n	800299c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0013      	movs	r3, r2
 800294a:	2200      	movs	r2, #0
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	f000 fa69 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e039      	b.n	80029ce <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	881a      	ldrh	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	05d2      	lsls	r2, r2, #23
 800296a:	0dd2      	lsrs	r2, r2, #23
 800296c:	b292      	uxth	r2, r2
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	3302      	adds	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e008      	b.n	800298a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b292      	uxth	r2, r2
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2252      	movs	r2, #82	; 0x52
 800298e:	5a9b      	ldrh	r3, [r3, r2]
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b299      	uxth	r1, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2252      	movs	r2, #82	; 0x52
 800299a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2252      	movs	r2, #82	; 0x52
 80029a0:	5a9b      	ldrh	r3, [r3, r2]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1cb      	bne.n	8002940 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	0013      	movs	r3, r2
 80029b2:	2200      	movs	r2, #0
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	f000 fa35 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e005      	b.n	80029ce <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b008      	add	sp, #32
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029e0:	231e      	movs	r3, #30
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a84      	ldr	r2, [pc, #528]	; (8002c18 <UART_SetConfig+0x240>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	; (8002c1c <UART_SetConfig+0x244>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <UART_SetConfig+0x248>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a54:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <UART_SetConfig+0x24c>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d00d      	beq.n	8002a7c <UART_SetConfig+0xa4>
 8002a60:	d81b      	bhi.n	8002a9a <UART_SetConfig+0xc2>
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d014      	beq.n	8002a90 <UART_SetConfig+0xb8>
 8002a66:	d818      	bhi.n	8002a9a <UART_SetConfig+0xc2>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <UART_SetConfig+0x9a>
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d00a      	beq.n	8002a86 <UART_SetConfig+0xae>
 8002a70:	e013      	b.n	8002a9a <UART_SetConfig+0xc2>
 8002a72:	231f      	movs	r3, #31
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e012      	b.n	8002aa2 <UART_SetConfig+0xca>
 8002a7c:	231f      	movs	r3, #31
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e00d      	b.n	8002aa2 <UART_SetConfig+0xca>
 8002a86:	231f      	movs	r3, #31
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e008      	b.n	8002aa2 <UART_SetConfig+0xca>
 8002a90:	231f      	movs	r3, #31
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2208      	movs	r2, #8
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e003      	b.n	8002aa2 <UART_SetConfig+0xca>
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d15d      	bne.n	8002b6c <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002ab0:	231f      	movs	r3, #31
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d015      	beq.n	8002ae6 <UART_SetConfig+0x10e>
 8002aba:	dc18      	bgt.n	8002aee <UART_SetConfig+0x116>
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d00d      	beq.n	8002adc <UART_SetConfig+0x104>
 8002ac0:	dc15      	bgt.n	8002aee <UART_SetConfig+0x116>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <UART_SetConfig+0xf4>
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d005      	beq.n	8002ad6 <UART_SetConfig+0xfe>
 8002aca:	e010      	b.n	8002aee <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7fe ff5c 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e012      	b.n	8002afc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad6:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <UART_SetConfig+0x250>)
 8002ad8:	61bb      	str	r3, [r7, #24]
        break;
 8002ada:	e00f      	b.n	8002afc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002adc:	f7fe fee6 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]
        break;
 8002ae4:	e00a      	b.n	8002afc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	61bb      	str	r3, [r7, #24]
        break;
 8002aec:	e006      	b.n	8002afc <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002af2:	231e      	movs	r3, #30
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
        break;
 8002afa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <UART_SetConfig+0x12c>
 8002b02:	e07b      	b.n	8002bfc <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	005a      	lsls	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	18d2      	adds	r2, r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f7fd fb08 	bl	800012c <__udivsi3>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d91c      	bls.n	8002b62 <UART_SetConfig+0x18a>
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	025b      	lsls	r3, r3, #9
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d217      	bcs.n	8002b62 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	200e      	movs	r0, #14
 8002b38:	183b      	adds	r3, r7, r0
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2207      	movs	r2, #7
 8002b48:	4013      	ands	r3, r2
 8002b4a:	b299      	uxth	r1, r3
 8002b4c:	183b      	adds	r3, r7, r0
 8002b4e:	183a      	adds	r2, r7, r0
 8002b50:	8812      	ldrh	r2, [r2, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	183a      	adds	r2, r7, r0
 8002b5c:	8812      	ldrh	r2, [r2, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e04c      	b.n	8002bfc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002b62:	231e      	movs	r3, #30
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e047      	b.n	8002bfc <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b6c:	231f      	movs	r3, #31
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d015      	beq.n	8002ba2 <UART_SetConfig+0x1ca>
 8002b76:	dc18      	bgt.n	8002baa <UART_SetConfig+0x1d2>
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00d      	beq.n	8002b98 <UART_SetConfig+0x1c0>
 8002b7c:	dc15      	bgt.n	8002baa <UART_SetConfig+0x1d2>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <UART_SetConfig+0x1b0>
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d005      	beq.n	8002b92 <UART_SetConfig+0x1ba>
 8002b86:	e010      	b.n	8002baa <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7fe fefe 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	61bb      	str	r3, [r7, #24]
        break;
 8002b90:	e012      	b.n	8002bb8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b92:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <UART_SetConfig+0x250>)
 8002b94:	61bb      	str	r3, [r7, #24]
        break;
 8002b96:	e00f      	b.n	8002bb8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b98:	f7fe fe88 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ba0:	e00a      	b.n	8002bb8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	61bb      	str	r3, [r7, #24]
        break;
 8002ba8:	e006      	b.n	8002bb8 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bae:	231e      	movs	r3, #30
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
        break;
 8002bb6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01e      	beq.n	8002bfc <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	085a      	lsrs	r2, r3, #1
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	18d2      	adds	r2, r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0019      	movs	r1, r3
 8002bce:	0010      	movs	r0, r2
 8002bd0:	f7fd faac 	bl	800012c <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d909      	bls.n	8002bf4 <UART_SetConfig+0x21c>
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d204      	bcs.n	8002bf4 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	e003      	b.n	8002bfc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf4:	231e      	movs	r3, #30
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c08:	231e      	movs	r3, #30
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	781b      	ldrb	r3, [r3, #0]
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b008      	add	sp, #32
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	ffff69f3 	.word	0xffff69f3
 8002c1c:	ffffcfff 	.word	0xffffcfff
 8002c20:	fffff4ff 	.word	0xfffff4ff
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <UART_AdvFeatureConfig+0x144>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a43      	ldr	r2, [pc, #268]	; (8002d74 <UART_AdvFeatureConfig+0x148>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <UART_AdvFeatureConfig+0x14c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <UART_AdvFeatureConfig+0x150>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a2c      	ldr	r2, [pc, #176]	; (8002d80 <UART_AdvFeatureConfig+0x154>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4a25      	ldr	r2, [pc, #148]	; (8002d84 <UART_AdvFeatureConfig+0x158>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2240      	movs	r2, #64	; 0x40
 8002d06:	4013      	ands	r3, r2
 8002d08:	d01d      	beq.n	8002d46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <UART_AdvFeatureConfig+0x15c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	035b      	lsls	r3, r3, #13
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d10b      	bne.n	8002d46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <UART_AdvFeatureConfig+0x160>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <UART_AdvFeatureConfig+0x164>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  }
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	fffdffff 	.word	0xfffdffff
 8002d74:	fffeffff 	.word	0xfffeffff
 8002d78:	fffbffff 	.word	0xfffbffff
 8002d7c:	ffff7fff 	.word	0xffff7fff
 8002d80:	ffffefff 	.word	0xffffefff
 8002d84:	ffffdfff 	.word	0xffffdfff
 8002d88:	ffefffff 	.word	0xffefffff
 8002d8c:	ff9fffff 	.word	0xff9fffff
 8002d90:	fff7ffff 	.word	0xfff7ffff

08002d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	2100      	movs	r1, #0
 8002da2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da4:	f7fd ff32 	bl	8000c0c <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2208      	movs	r2, #8
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d10c      	bne.n	8002dd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0391      	lsls	r1, r2, #14
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <UART_CheckIdleState+0x8c>)
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f000 f82c 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e021      	b.n	8002e18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d10c      	bne.n	8002dfc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	03d1      	lsls	r1, r2, #15
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4a0d      	ldr	r2, [pc, #52]	; (8002e20 <UART_CheckIdleState+0x8c>)
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f000 f818 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e00d      	b.n	8002e18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2274      	movs	r2, #116	; 0x74
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b004      	add	sp, #16
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	01ffffff 	.word	0x01ffffff

08002e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e34:	e05e      	b.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	d05b      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7fd fee6 	bl	8000c0c <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11b      	bne.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	492f      	ldr	r1, [pc, #188]	; (8002f1c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	438a      	bics	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2274      	movs	r2, #116	; 0x74
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e044      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2204      	movs	r2, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	d02e      	beq.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d124      	bne.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4917      	ldr	r1, [pc, #92]	; (8002f1c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2274      	movs	r2, #116	; 0x74
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	425a      	negs	r2, r3
 8002f04:	4153      	adcs	r3, r2
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d091      	beq.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	fffffe5f 	.word	0xfffffe5f

08002f20 <__errno>:
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <__errno+0x8>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4770      	bx	lr
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <__libc_init_array>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	2600      	movs	r6, #0
 8002f30:	4d0c      	ldr	r5, [pc, #48]	; (8002f64 <__libc_init_array+0x38>)
 8002f32:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <__libc_init_array+0x3c>)
 8002f34:	1b64      	subs	r4, r4, r5
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	42a6      	cmp	r6, r4
 8002f3a:	d109      	bne.n	8002f50 <__libc_init_array+0x24>
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	f000 fc47 	bl	80037d0 <_init>
 8002f42:	4d0a      	ldr	r5, [pc, #40]	; (8002f6c <__libc_init_array+0x40>)
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <__libc_init_array+0x44>)
 8002f46:	1b64      	subs	r4, r4, r5
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	42a6      	cmp	r6, r4
 8002f4c:	d105      	bne.n	8002f5a <__libc_init_array+0x2e>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	00b3      	lsls	r3, r6, #2
 8002f52:	58eb      	ldr	r3, [r5, r3]
 8002f54:	4798      	blx	r3
 8002f56:	3601      	adds	r6, #1
 8002f58:	e7ee      	b.n	8002f38 <__libc_init_array+0xc>
 8002f5a:	00b3      	lsls	r3, r6, #2
 8002f5c:	58eb      	ldr	r3, [r5, r3]
 8002f5e:	4798      	blx	r3
 8002f60:	3601      	adds	r6, #1
 8002f62:	e7f2      	b.n	8002f4a <__libc_init_array+0x1e>
 8002f64:	0800388c 	.word	0x0800388c
 8002f68:	0800388c 	.word	0x0800388c
 8002f6c:	0800388c 	.word	0x0800388c
 8002f70:	08003890 	.word	0x08003890

08002f74 <memset>:
 8002f74:	0003      	movs	r3, r0
 8002f76:	1882      	adds	r2, r0, r2
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	7019      	strb	r1, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <siprintf>:
 8002f84:	b40e      	push	{r1, r2, r3}
 8002f86:	b500      	push	{lr}
 8002f88:	490b      	ldr	r1, [pc, #44]	; (8002fb8 <siprintf+0x34>)
 8002f8a:	b09c      	sub	sp, #112	; 0x70
 8002f8c:	ab1d      	add	r3, sp, #116	; 0x74
 8002f8e:	9002      	str	r0, [sp, #8]
 8002f90:	9006      	str	r0, [sp, #24]
 8002f92:	9107      	str	r1, [sp, #28]
 8002f94:	9104      	str	r1, [sp, #16]
 8002f96:	4809      	ldr	r0, [pc, #36]	; (8002fbc <siprintf+0x38>)
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <siprintf+0x3c>)
 8002f9a:	cb04      	ldmia	r3!, {r2}
 8002f9c:	9105      	str	r1, [sp, #20]
 8002f9e:	6800      	ldr	r0, [r0, #0]
 8002fa0:	a902      	add	r1, sp, #8
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f000 f870 	bl	8003088 <_svfiprintf_r>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9a02      	ldr	r2, [sp, #8]
 8002fac:	7013      	strb	r3, [r2, #0]
 8002fae:	b01c      	add	sp, #112	; 0x70
 8002fb0:	bc08      	pop	{r3}
 8002fb2:	b003      	add	sp, #12
 8002fb4:	4718      	bx	r3
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	7fffffff 	.word	0x7fffffff
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	ffff0208 	.word	0xffff0208

08002fc4 <__ssputs_r>:
 8002fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc6:	688e      	ldr	r6, [r1, #8]
 8002fc8:	b085      	sub	sp, #20
 8002fca:	0007      	movs	r7, r0
 8002fcc:	000c      	movs	r4, r1
 8002fce:	9203      	str	r2, [sp, #12]
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	429e      	cmp	r6, r3
 8002fd4:	d83c      	bhi.n	8003050 <__ssputs_r+0x8c>
 8002fd6:	2390      	movs	r3, #144	; 0x90
 8002fd8:	898a      	ldrh	r2, [r1, #12]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	421a      	tst	r2, r3
 8002fde:	d034      	beq.n	800304a <__ssputs_r+0x86>
 8002fe0:	2503      	movs	r5, #3
 8002fe2:	6909      	ldr	r1, [r1, #16]
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	1a5b      	subs	r3, r3, r1
 8002fe8:	9302      	str	r3, [sp, #8]
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	9802      	ldr	r0, [sp, #8]
 8002fee:	435d      	muls	r5, r3
 8002ff0:	0feb      	lsrs	r3, r5, #31
 8002ff2:	195d      	adds	r5, r3, r5
 8002ff4:	9b01      	ldr	r3, [sp, #4]
 8002ff6:	106d      	asrs	r5, r5, #1
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	181b      	adds	r3, r3, r0
 8002ffc:	42ab      	cmp	r3, r5
 8002ffe:	d900      	bls.n	8003002 <__ssputs_r+0x3e>
 8003000:	001d      	movs	r5, r3
 8003002:	0553      	lsls	r3, r2, #21
 8003004:	d532      	bpl.n	800306c <__ssputs_r+0xa8>
 8003006:	0029      	movs	r1, r5
 8003008:	0038      	movs	r0, r7
 800300a:	f000 fb31 	bl	8003670 <_malloc_r>
 800300e:	1e06      	subs	r6, r0, #0
 8003010:	d109      	bne.n	8003026 <__ssputs_r+0x62>
 8003012:	230c      	movs	r3, #12
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	2001      	movs	r0, #1
 800301a:	89a2      	ldrh	r2, [r4, #12]
 800301c:	4240      	negs	r0, r0
 800301e:	4313      	orrs	r3, r2
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	b005      	add	sp, #20
 8003024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003026:	9a02      	ldr	r2, [sp, #8]
 8003028:	6921      	ldr	r1, [r4, #16]
 800302a:	f000 faba 	bl	80035a2 <memcpy>
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <__ssputs_r+0xc0>)
 8003032:	401a      	ands	r2, r3
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	4313      	orrs	r3, r2
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	9b02      	ldr	r3, [sp, #8]
 800303c:	6126      	str	r6, [r4, #16]
 800303e:	18f6      	adds	r6, r6, r3
 8003040:	6026      	str	r6, [r4, #0]
 8003042:	6165      	str	r5, [r4, #20]
 8003044:	9e01      	ldr	r6, [sp, #4]
 8003046:	1aed      	subs	r5, r5, r3
 8003048:	60a5      	str	r5, [r4, #8]
 800304a:	9b01      	ldr	r3, [sp, #4]
 800304c:	429e      	cmp	r6, r3
 800304e:	d900      	bls.n	8003052 <__ssputs_r+0x8e>
 8003050:	9e01      	ldr	r6, [sp, #4]
 8003052:	0032      	movs	r2, r6
 8003054:	9903      	ldr	r1, [sp, #12]
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	f000 faac 	bl	80035b4 <memmove>
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	2000      	movs	r0, #0
 8003060:	1b9b      	subs	r3, r3, r6
 8003062:	60a3      	str	r3, [r4, #8]
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	199e      	adds	r6, r3, r6
 8003068:	6026      	str	r6, [r4, #0]
 800306a:	e7da      	b.n	8003022 <__ssputs_r+0x5e>
 800306c:	002a      	movs	r2, r5
 800306e:	0038      	movs	r0, r7
 8003070:	f000 fb5c 	bl	800372c <_realloc_r>
 8003074:	1e06      	subs	r6, r0, #0
 8003076:	d1e0      	bne.n	800303a <__ssputs_r+0x76>
 8003078:	0038      	movs	r0, r7
 800307a:	6921      	ldr	r1, [r4, #16]
 800307c:	f000 faae 	bl	80035dc <_free_r>
 8003080:	e7c7      	b.n	8003012 <__ssputs_r+0x4e>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	fffffb7f 	.word	0xfffffb7f

08003088 <_svfiprintf_r>:
 8003088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308a:	b0a1      	sub	sp, #132	; 0x84
 800308c:	9003      	str	r0, [sp, #12]
 800308e:	001d      	movs	r5, r3
 8003090:	898b      	ldrh	r3, [r1, #12]
 8003092:	000f      	movs	r7, r1
 8003094:	0016      	movs	r6, r2
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	d511      	bpl.n	80030be <_svfiprintf_r+0x36>
 800309a:	690b      	ldr	r3, [r1, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10e      	bne.n	80030be <_svfiprintf_r+0x36>
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	f000 fae5 	bl	8003670 <_malloc_r>
 80030a6:	6038      	str	r0, [r7, #0]
 80030a8:	6138      	str	r0, [r7, #16]
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d105      	bne.n	80030ba <_svfiprintf_r+0x32>
 80030ae:	230c      	movs	r3, #12
 80030b0:	9a03      	ldr	r2, [sp, #12]
 80030b2:	3801      	subs	r0, #1
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	b021      	add	sp, #132	; 0x84
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	ac08      	add	r4, sp, #32
 80030c2:	6163      	str	r3, [r4, #20]
 80030c4:	3320      	adds	r3, #32
 80030c6:	7663      	strb	r3, [r4, #25]
 80030c8:	3310      	adds	r3, #16
 80030ca:	76a3      	strb	r3, [r4, #26]
 80030cc:	9507      	str	r5, [sp, #28]
 80030ce:	0035      	movs	r5, r6
 80030d0:	782b      	ldrb	r3, [r5, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <_svfiprintf_r+0x52>
 80030d6:	2b25      	cmp	r3, #37	; 0x25
 80030d8:	d147      	bne.n	800316a <_svfiprintf_r+0xe2>
 80030da:	1bab      	subs	r3, r5, r6
 80030dc:	9305      	str	r3, [sp, #20]
 80030de:	42b5      	cmp	r5, r6
 80030e0:	d00c      	beq.n	80030fc <_svfiprintf_r+0x74>
 80030e2:	0032      	movs	r2, r6
 80030e4:	0039      	movs	r1, r7
 80030e6:	9803      	ldr	r0, [sp, #12]
 80030e8:	f7ff ff6c 	bl	8002fc4 <__ssputs_r>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d100      	bne.n	80030f2 <_svfiprintf_r+0x6a>
 80030f0:	e0ae      	b.n	8003250 <_svfiprintf_r+0x1c8>
 80030f2:	6962      	ldr	r2, [r4, #20]
 80030f4:	9b05      	ldr	r3, [sp, #20]
 80030f6:	4694      	mov	ip, r2
 80030f8:	4463      	add	r3, ip
 80030fa:	6163      	str	r3, [r4, #20]
 80030fc:	782b      	ldrb	r3, [r5, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d100      	bne.n	8003104 <_svfiprintf_r+0x7c>
 8003102:	e0a5      	b.n	8003250 <_svfiprintf_r+0x1c8>
 8003104:	2201      	movs	r2, #1
 8003106:	2300      	movs	r3, #0
 8003108:	4252      	negs	r2, r2
 800310a:	6062      	str	r2, [r4, #4]
 800310c:	a904      	add	r1, sp, #16
 800310e:	3254      	adds	r2, #84	; 0x54
 8003110:	1852      	adds	r2, r2, r1
 8003112:	1c6e      	adds	r6, r5, #1
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	60e3      	str	r3, [r4, #12]
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	7013      	strb	r3, [r2, #0]
 800311c:	65a3      	str	r3, [r4, #88]	; 0x58
 800311e:	2205      	movs	r2, #5
 8003120:	7831      	ldrb	r1, [r6, #0]
 8003122:	4854      	ldr	r0, [pc, #336]	; (8003274 <_svfiprintf_r+0x1ec>)
 8003124:	f000 fa32 	bl	800358c <memchr>
 8003128:	1c75      	adds	r5, r6, #1
 800312a:	2800      	cmp	r0, #0
 800312c:	d11f      	bne.n	800316e <_svfiprintf_r+0xe6>
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	06d3      	lsls	r3, r2, #27
 8003132:	d504      	bpl.n	800313e <_svfiprintf_r+0xb6>
 8003134:	2353      	movs	r3, #83	; 0x53
 8003136:	a904      	add	r1, sp, #16
 8003138:	185b      	adds	r3, r3, r1
 800313a:	2120      	movs	r1, #32
 800313c:	7019      	strb	r1, [r3, #0]
 800313e:	0713      	lsls	r3, r2, #28
 8003140:	d504      	bpl.n	800314c <_svfiprintf_r+0xc4>
 8003142:	2353      	movs	r3, #83	; 0x53
 8003144:	a904      	add	r1, sp, #16
 8003146:	185b      	adds	r3, r3, r1
 8003148:	212b      	movs	r1, #43	; 0x2b
 800314a:	7019      	strb	r1, [r3, #0]
 800314c:	7833      	ldrb	r3, [r6, #0]
 800314e:	2b2a      	cmp	r3, #42	; 0x2a
 8003150:	d016      	beq.n	8003180 <_svfiprintf_r+0xf8>
 8003152:	0035      	movs	r5, r6
 8003154:	2100      	movs	r1, #0
 8003156:	200a      	movs	r0, #10
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	782a      	ldrb	r2, [r5, #0]
 800315c:	1c6e      	adds	r6, r5, #1
 800315e:	3a30      	subs	r2, #48	; 0x30
 8003160:	2a09      	cmp	r2, #9
 8003162:	d94e      	bls.n	8003202 <_svfiprintf_r+0x17a>
 8003164:	2900      	cmp	r1, #0
 8003166:	d111      	bne.n	800318c <_svfiprintf_r+0x104>
 8003168:	e017      	b.n	800319a <_svfiprintf_r+0x112>
 800316a:	3501      	adds	r5, #1
 800316c:	e7b0      	b.n	80030d0 <_svfiprintf_r+0x48>
 800316e:	4b41      	ldr	r3, [pc, #260]	; (8003274 <_svfiprintf_r+0x1ec>)
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	1ac0      	subs	r0, r0, r3
 8003174:	2301      	movs	r3, #1
 8003176:	4083      	lsls	r3, r0
 8003178:	4313      	orrs	r3, r2
 800317a:	002e      	movs	r6, r5
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	e7ce      	b.n	800311e <_svfiprintf_r+0x96>
 8003180:	9b07      	ldr	r3, [sp, #28]
 8003182:	1d19      	adds	r1, r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	9107      	str	r1, [sp, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db01      	blt.n	8003190 <_svfiprintf_r+0x108>
 800318c:	930b      	str	r3, [sp, #44]	; 0x2c
 800318e:	e004      	b.n	800319a <_svfiprintf_r+0x112>
 8003190:	425b      	negs	r3, r3
 8003192:	60e3      	str	r3, [r4, #12]
 8003194:	2302      	movs	r3, #2
 8003196:	4313      	orrs	r3, r2
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	782b      	ldrb	r3, [r5, #0]
 800319c:	2b2e      	cmp	r3, #46	; 0x2e
 800319e:	d10a      	bne.n	80031b6 <_svfiprintf_r+0x12e>
 80031a0:	786b      	ldrb	r3, [r5, #1]
 80031a2:	2b2a      	cmp	r3, #42	; 0x2a
 80031a4:	d135      	bne.n	8003212 <_svfiprintf_r+0x18a>
 80031a6:	9b07      	ldr	r3, [sp, #28]
 80031a8:	3502      	adds	r5, #2
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	9207      	str	r2, [sp, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db2b      	blt.n	800320c <_svfiprintf_r+0x184>
 80031b4:	9309      	str	r3, [sp, #36]	; 0x24
 80031b6:	4e30      	ldr	r6, [pc, #192]	; (8003278 <_svfiprintf_r+0x1f0>)
 80031b8:	2203      	movs	r2, #3
 80031ba:	0030      	movs	r0, r6
 80031bc:	7829      	ldrb	r1, [r5, #0]
 80031be:	f000 f9e5 	bl	800358c <memchr>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d006      	beq.n	80031d4 <_svfiprintf_r+0x14c>
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	1b80      	subs	r0, r0, r6
 80031ca:	4083      	lsls	r3, r0
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	3501      	adds	r5, #1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	7829      	ldrb	r1, [r5, #0]
 80031d6:	2206      	movs	r2, #6
 80031d8:	4828      	ldr	r0, [pc, #160]	; (800327c <_svfiprintf_r+0x1f4>)
 80031da:	1c6e      	adds	r6, r5, #1
 80031dc:	7621      	strb	r1, [r4, #24]
 80031de:	f000 f9d5 	bl	800358c <memchr>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d03c      	beq.n	8003260 <_svfiprintf_r+0x1d8>
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <_svfiprintf_r+0x1f8>)
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d125      	bne.n	8003238 <_svfiprintf_r+0x1b0>
 80031ec:	2207      	movs	r2, #7
 80031ee:	9b07      	ldr	r3, [sp, #28]
 80031f0:	3307      	adds	r3, #7
 80031f2:	4393      	bics	r3, r2
 80031f4:	3308      	adds	r3, #8
 80031f6:	9307      	str	r3, [sp, #28]
 80031f8:	6963      	ldr	r3, [r4, #20]
 80031fa:	9a04      	ldr	r2, [sp, #16]
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	6163      	str	r3, [r4, #20]
 8003200:	e765      	b.n	80030ce <_svfiprintf_r+0x46>
 8003202:	4343      	muls	r3, r0
 8003204:	0035      	movs	r5, r6
 8003206:	2101      	movs	r1, #1
 8003208:	189b      	adds	r3, r3, r2
 800320a:	e7a6      	b.n	800315a <_svfiprintf_r+0xd2>
 800320c:	2301      	movs	r3, #1
 800320e:	425b      	negs	r3, r3
 8003210:	e7d0      	b.n	80031b4 <_svfiprintf_r+0x12c>
 8003212:	2300      	movs	r3, #0
 8003214:	200a      	movs	r0, #10
 8003216:	001a      	movs	r2, r3
 8003218:	3501      	adds	r5, #1
 800321a:	6063      	str	r3, [r4, #4]
 800321c:	7829      	ldrb	r1, [r5, #0]
 800321e:	1c6e      	adds	r6, r5, #1
 8003220:	3930      	subs	r1, #48	; 0x30
 8003222:	2909      	cmp	r1, #9
 8003224:	d903      	bls.n	800322e <_svfiprintf_r+0x1a6>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0c5      	beq.n	80031b6 <_svfiprintf_r+0x12e>
 800322a:	9209      	str	r2, [sp, #36]	; 0x24
 800322c:	e7c3      	b.n	80031b6 <_svfiprintf_r+0x12e>
 800322e:	4342      	muls	r2, r0
 8003230:	0035      	movs	r5, r6
 8003232:	2301      	movs	r3, #1
 8003234:	1852      	adds	r2, r2, r1
 8003236:	e7f1      	b.n	800321c <_svfiprintf_r+0x194>
 8003238:	ab07      	add	r3, sp, #28
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	003a      	movs	r2, r7
 800323e:	0021      	movs	r1, r4
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_svfiprintf_r+0x1fc>)
 8003242:	9803      	ldr	r0, [sp, #12]
 8003244:	e000      	b.n	8003248 <_svfiprintf_r+0x1c0>
 8003246:	bf00      	nop
 8003248:	9004      	str	r0, [sp, #16]
 800324a:	9b04      	ldr	r3, [sp, #16]
 800324c:	3301      	adds	r3, #1
 800324e:	d1d3      	bne.n	80031f8 <_svfiprintf_r+0x170>
 8003250:	89bb      	ldrh	r3, [r7, #12]
 8003252:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003254:	065b      	lsls	r3, r3, #25
 8003256:	d400      	bmi.n	800325a <_svfiprintf_r+0x1d2>
 8003258:	e72d      	b.n	80030b6 <_svfiprintf_r+0x2e>
 800325a:	2001      	movs	r0, #1
 800325c:	4240      	negs	r0, r0
 800325e:	e72a      	b.n	80030b6 <_svfiprintf_r+0x2e>
 8003260:	ab07      	add	r3, sp, #28
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	003a      	movs	r2, r7
 8003266:	0021      	movs	r1, r4
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <_svfiprintf_r+0x1fc>)
 800326a:	9803      	ldr	r0, [sp, #12]
 800326c:	f000 f87c 	bl	8003368 <_printf_i>
 8003270:	e7ea      	b.n	8003248 <_svfiprintf_r+0x1c0>
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	08003858 	.word	0x08003858
 8003278:	0800385e 	.word	0x0800385e
 800327c:	08003862 	.word	0x08003862
 8003280:	00000000 	.word	0x00000000
 8003284:	08002fc5 	.word	0x08002fc5

08003288 <_printf_common>:
 8003288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800328a:	0015      	movs	r5, r2
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	688a      	ldr	r2, [r1, #8]
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	000c      	movs	r4, r1
 8003294:	9000      	str	r0, [sp, #0]
 8003296:	4293      	cmp	r3, r2
 8003298:	da00      	bge.n	800329c <_printf_common+0x14>
 800329a:	0013      	movs	r3, r2
 800329c:	0022      	movs	r2, r4
 800329e:	602b      	str	r3, [r5, #0]
 80032a0:	3243      	adds	r2, #67	; 0x43
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	2a00      	cmp	r2, #0
 80032a6:	d001      	beq.n	80032ac <_printf_common+0x24>
 80032a8:	3301      	adds	r3, #1
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	069b      	lsls	r3, r3, #26
 80032b0:	d502      	bpl.n	80032b8 <_printf_common+0x30>
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	3302      	adds	r3, #2
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	2306      	movs	r3, #6
 80032bc:	0017      	movs	r7, r2
 80032be:	401f      	ands	r7, r3
 80032c0:	421a      	tst	r2, r3
 80032c2:	d027      	beq.n	8003314 <_printf_common+0x8c>
 80032c4:	0023      	movs	r3, r4
 80032c6:	3343      	adds	r3, #67	; 0x43
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	4193      	sbcs	r3, r2
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	0692      	lsls	r2, r2, #26
 80032d2:	d430      	bmi.n	8003336 <_printf_common+0xae>
 80032d4:	0022      	movs	r2, r4
 80032d6:	9901      	ldr	r1, [sp, #4]
 80032d8:	9800      	ldr	r0, [sp, #0]
 80032da:	9e08      	ldr	r6, [sp, #32]
 80032dc:	3243      	adds	r2, #67	; 0x43
 80032de:	47b0      	blx	r6
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	d025      	beq.n	8003330 <_printf_common+0xa8>
 80032e4:	2306      	movs	r3, #6
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	682a      	ldr	r2, [r5, #0]
 80032ea:	68e1      	ldr	r1, [r4, #12]
 80032ec:	2500      	movs	r5, #0
 80032ee:	4003      	ands	r3, r0
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d103      	bne.n	80032fc <_printf_common+0x74>
 80032f4:	1a8d      	subs	r5, r1, r2
 80032f6:	43eb      	mvns	r3, r5
 80032f8:	17db      	asrs	r3, r3, #31
 80032fa:	401d      	ands	r5, r3
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	6922      	ldr	r2, [r4, #16]
 8003300:	4293      	cmp	r3, r2
 8003302:	dd01      	ble.n	8003308 <_printf_common+0x80>
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	18ed      	adds	r5, r5, r3
 8003308:	2700      	movs	r7, #0
 800330a:	42bd      	cmp	r5, r7
 800330c:	d120      	bne.n	8003350 <_printf_common+0xc8>
 800330e:	2000      	movs	r0, #0
 8003310:	e010      	b.n	8003334 <_printf_common+0xac>
 8003312:	3701      	adds	r7, #1
 8003314:	68e3      	ldr	r3, [r4, #12]
 8003316:	682a      	ldr	r2, [r5, #0]
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	42bb      	cmp	r3, r7
 800331c:	ddd2      	ble.n	80032c4 <_printf_common+0x3c>
 800331e:	0022      	movs	r2, r4
 8003320:	2301      	movs	r3, #1
 8003322:	9901      	ldr	r1, [sp, #4]
 8003324:	9800      	ldr	r0, [sp, #0]
 8003326:	9e08      	ldr	r6, [sp, #32]
 8003328:	3219      	adds	r2, #25
 800332a:	47b0      	blx	r6
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d1f0      	bne.n	8003312 <_printf_common+0x8a>
 8003330:	2001      	movs	r0, #1
 8003332:	4240      	negs	r0, r0
 8003334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003336:	2030      	movs	r0, #48	; 0x30
 8003338:	18e1      	adds	r1, r4, r3
 800333a:	3143      	adds	r1, #67	; 0x43
 800333c:	7008      	strb	r0, [r1, #0]
 800333e:	0021      	movs	r1, r4
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	3145      	adds	r1, #69	; 0x45
 8003344:	7809      	ldrb	r1, [r1, #0]
 8003346:	18a2      	adds	r2, r4, r2
 8003348:	3243      	adds	r2, #67	; 0x43
 800334a:	3302      	adds	r3, #2
 800334c:	7011      	strb	r1, [r2, #0]
 800334e:	e7c1      	b.n	80032d4 <_printf_common+0x4c>
 8003350:	0022      	movs	r2, r4
 8003352:	2301      	movs	r3, #1
 8003354:	9901      	ldr	r1, [sp, #4]
 8003356:	9800      	ldr	r0, [sp, #0]
 8003358:	9e08      	ldr	r6, [sp, #32]
 800335a:	321a      	adds	r2, #26
 800335c:	47b0      	blx	r6
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d0e6      	beq.n	8003330 <_printf_common+0xa8>
 8003362:	3701      	adds	r7, #1
 8003364:	e7d1      	b.n	800330a <_printf_common+0x82>
	...

08003368 <_printf_i>:
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b08b      	sub	sp, #44	; 0x2c
 800336c:	9206      	str	r2, [sp, #24]
 800336e:	000a      	movs	r2, r1
 8003370:	3243      	adds	r2, #67	; 0x43
 8003372:	9307      	str	r3, [sp, #28]
 8003374:	9005      	str	r0, [sp, #20]
 8003376:	9204      	str	r2, [sp, #16]
 8003378:	7e0a      	ldrb	r2, [r1, #24]
 800337a:	000c      	movs	r4, r1
 800337c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800337e:	2a78      	cmp	r2, #120	; 0x78
 8003380:	d806      	bhi.n	8003390 <_printf_i+0x28>
 8003382:	2a62      	cmp	r2, #98	; 0x62
 8003384:	d808      	bhi.n	8003398 <_printf_i+0x30>
 8003386:	2a00      	cmp	r2, #0
 8003388:	d100      	bne.n	800338c <_printf_i+0x24>
 800338a:	e0c0      	b.n	800350e <_printf_i+0x1a6>
 800338c:	2a58      	cmp	r2, #88	; 0x58
 800338e:	d052      	beq.n	8003436 <_printf_i+0xce>
 8003390:	0026      	movs	r6, r4
 8003392:	3642      	adds	r6, #66	; 0x42
 8003394:	7032      	strb	r2, [r6, #0]
 8003396:	e022      	b.n	80033de <_printf_i+0x76>
 8003398:	0010      	movs	r0, r2
 800339a:	3863      	subs	r0, #99	; 0x63
 800339c:	2815      	cmp	r0, #21
 800339e:	d8f7      	bhi.n	8003390 <_printf_i+0x28>
 80033a0:	f7fc feba 	bl	8000118 <__gnu_thumb1_case_shi>
 80033a4:	001f0016 	.word	0x001f0016
 80033a8:	fff6fff6 	.word	0xfff6fff6
 80033ac:	fff6fff6 	.word	0xfff6fff6
 80033b0:	fff6001f 	.word	0xfff6001f
 80033b4:	fff6fff6 	.word	0xfff6fff6
 80033b8:	00a8fff6 	.word	0x00a8fff6
 80033bc:	009a0036 	.word	0x009a0036
 80033c0:	fff6fff6 	.word	0xfff6fff6
 80033c4:	fff600b9 	.word	0xfff600b9
 80033c8:	fff60036 	.word	0xfff60036
 80033cc:	009efff6 	.word	0x009efff6
 80033d0:	0026      	movs	r6, r4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	3642      	adds	r6, #66	; 0x42
 80033d6:	1d11      	adds	r1, r2, #4
 80033d8:	6019      	str	r1, [r3, #0]
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	7033      	strb	r3, [r6, #0]
 80033de:	2301      	movs	r3, #1
 80033e0:	e0a7      	b.n	8003532 <_printf_i+0x1ca>
 80033e2:	6808      	ldr	r0, [r1, #0]
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	1d0a      	adds	r2, r1, #4
 80033e8:	0605      	lsls	r5, r0, #24
 80033ea:	d50b      	bpl.n	8003404 <_printf_i+0x9c>
 80033ec:	680d      	ldr	r5, [r1, #0]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	da03      	bge.n	80033fc <_printf_i+0x94>
 80033f4:	232d      	movs	r3, #45	; 0x2d
 80033f6:	9a04      	ldr	r2, [sp, #16]
 80033f8:	426d      	negs	r5, r5
 80033fa:	7013      	strb	r3, [r2, #0]
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <_printf_i+0x21c>)
 80033fe:	270a      	movs	r7, #10
 8003400:	9303      	str	r3, [sp, #12]
 8003402:	e032      	b.n	800346a <_printf_i+0x102>
 8003404:	680d      	ldr	r5, [r1, #0]
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	0641      	lsls	r1, r0, #25
 800340a:	d5f1      	bpl.n	80033f0 <_printf_i+0x88>
 800340c:	b22d      	sxth	r5, r5
 800340e:	e7ef      	b.n	80033f0 <_printf_i+0x88>
 8003410:	680d      	ldr	r5, [r1, #0]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	1d08      	adds	r0, r1, #4
 8003416:	6018      	str	r0, [r3, #0]
 8003418:	062e      	lsls	r6, r5, #24
 800341a:	d501      	bpl.n	8003420 <_printf_i+0xb8>
 800341c:	680d      	ldr	r5, [r1, #0]
 800341e:	e003      	b.n	8003428 <_printf_i+0xc0>
 8003420:	066d      	lsls	r5, r5, #25
 8003422:	d5fb      	bpl.n	800341c <_printf_i+0xb4>
 8003424:	680d      	ldr	r5, [r1, #0]
 8003426:	b2ad      	uxth	r5, r5
 8003428:	4b56      	ldr	r3, [pc, #344]	; (8003584 <_printf_i+0x21c>)
 800342a:	270a      	movs	r7, #10
 800342c:	9303      	str	r3, [sp, #12]
 800342e:	2a6f      	cmp	r2, #111	; 0x6f
 8003430:	d117      	bne.n	8003462 <_printf_i+0xfa>
 8003432:	2708      	movs	r7, #8
 8003434:	e015      	b.n	8003462 <_printf_i+0xfa>
 8003436:	3145      	adds	r1, #69	; 0x45
 8003438:	700a      	strb	r2, [r1, #0]
 800343a:	4a52      	ldr	r2, [pc, #328]	; (8003584 <_printf_i+0x21c>)
 800343c:	9203      	str	r2, [sp, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	6821      	ldr	r1, [r4, #0]
 8003442:	ca20      	ldmia	r2!, {r5}
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	0608      	lsls	r0, r1, #24
 8003448:	d550      	bpl.n	80034ec <_printf_i+0x184>
 800344a:	07cb      	lsls	r3, r1, #31
 800344c:	d502      	bpl.n	8003454 <_printf_i+0xec>
 800344e:	2320      	movs	r3, #32
 8003450:	4319      	orrs	r1, r3
 8003452:	6021      	str	r1, [r4, #0]
 8003454:	2710      	movs	r7, #16
 8003456:	2d00      	cmp	r5, #0
 8003458:	d103      	bne.n	8003462 <_printf_i+0xfa>
 800345a:	2320      	movs	r3, #32
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	439a      	bics	r2, r3
 8003460:	6022      	str	r2, [r4, #0]
 8003462:	0023      	movs	r3, r4
 8003464:	2200      	movs	r2, #0
 8003466:	3343      	adds	r3, #67	; 0x43
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	60a3      	str	r3, [r4, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db03      	blt.n	800347a <_printf_i+0x112>
 8003472:	2204      	movs	r2, #4
 8003474:	6821      	ldr	r1, [r4, #0]
 8003476:	4391      	bics	r1, r2
 8003478:	6021      	str	r1, [r4, #0]
 800347a:	2d00      	cmp	r5, #0
 800347c:	d102      	bne.n	8003484 <_printf_i+0x11c>
 800347e:	9e04      	ldr	r6, [sp, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <_printf_i+0x136>
 8003484:	9e04      	ldr	r6, [sp, #16]
 8003486:	0028      	movs	r0, r5
 8003488:	0039      	movs	r1, r7
 800348a:	f7fc fed5 	bl	8000238 <__aeabi_uidivmod>
 800348e:	9b03      	ldr	r3, [sp, #12]
 8003490:	3e01      	subs	r6, #1
 8003492:	5c5b      	ldrb	r3, [r3, r1]
 8003494:	7033      	strb	r3, [r6, #0]
 8003496:	002b      	movs	r3, r5
 8003498:	0005      	movs	r5, r0
 800349a:	429f      	cmp	r7, r3
 800349c:	d9f3      	bls.n	8003486 <_printf_i+0x11e>
 800349e:	2f08      	cmp	r7, #8
 80034a0:	d109      	bne.n	80034b6 <_printf_i+0x14e>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	07db      	lsls	r3, r3, #31
 80034a6:	d506      	bpl.n	80034b6 <_printf_i+0x14e>
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	6922      	ldr	r2, [r4, #16]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	dc02      	bgt.n	80034b6 <_printf_i+0x14e>
 80034b0:	2330      	movs	r3, #48	; 0x30
 80034b2:	3e01      	subs	r6, #1
 80034b4:	7033      	strb	r3, [r6, #0]
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	1b9b      	subs	r3, r3, r6
 80034ba:	6123      	str	r3, [r4, #16]
 80034bc:	9b07      	ldr	r3, [sp, #28]
 80034be:	0021      	movs	r1, r4
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	9805      	ldr	r0, [sp, #20]
 80034c4:	9b06      	ldr	r3, [sp, #24]
 80034c6:	aa09      	add	r2, sp, #36	; 0x24
 80034c8:	f7ff fede 	bl	8003288 <_printf_common>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d135      	bne.n	800353c <_printf_i+0x1d4>
 80034d0:	2001      	movs	r0, #1
 80034d2:	4240      	negs	r0, r0
 80034d4:	b00b      	add	sp, #44	; 0x2c
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d8:	2220      	movs	r2, #32
 80034da:	6809      	ldr	r1, [r1, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	0022      	movs	r2, r4
 80034e2:	2178      	movs	r1, #120	; 0x78
 80034e4:	3245      	adds	r2, #69	; 0x45
 80034e6:	7011      	strb	r1, [r2, #0]
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <_printf_i+0x220>)
 80034ea:	e7a7      	b.n	800343c <_printf_i+0xd4>
 80034ec:	0648      	lsls	r0, r1, #25
 80034ee:	d5ac      	bpl.n	800344a <_printf_i+0xe2>
 80034f0:	b2ad      	uxth	r5, r5
 80034f2:	e7aa      	b.n	800344a <_printf_i+0xe2>
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	680d      	ldr	r5, [r1, #0]
 80034f8:	1d10      	adds	r0, r2, #4
 80034fa:	6949      	ldr	r1, [r1, #20]
 80034fc:	6018      	str	r0, [r3, #0]
 80034fe:	6813      	ldr	r3, [r2, #0]
 8003500:	062e      	lsls	r6, r5, #24
 8003502:	d501      	bpl.n	8003508 <_printf_i+0x1a0>
 8003504:	6019      	str	r1, [r3, #0]
 8003506:	e002      	b.n	800350e <_printf_i+0x1a6>
 8003508:	066d      	lsls	r5, r5, #25
 800350a:	d5fb      	bpl.n	8003504 <_printf_i+0x19c>
 800350c:	8019      	strh	r1, [r3, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	9e04      	ldr	r6, [sp, #16]
 8003512:	6123      	str	r3, [r4, #16]
 8003514:	e7d2      	b.n	80034bc <_printf_i+0x154>
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	1d11      	adds	r1, r2, #4
 800351a:	6019      	str	r1, [r3, #0]
 800351c:	6816      	ldr	r6, [r2, #0]
 800351e:	2100      	movs	r1, #0
 8003520:	0030      	movs	r0, r6
 8003522:	6862      	ldr	r2, [r4, #4]
 8003524:	f000 f832 	bl	800358c <memchr>
 8003528:	2800      	cmp	r0, #0
 800352a:	d001      	beq.n	8003530 <_printf_i+0x1c8>
 800352c:	1b80      	subs	r0, r0, r6
 800352e:	6060      	str	r0, [r4, #4]
 8003530:	6863      	ldr	r3, [r4, #4]
 8003532:	6123      	str	r3, [r4, #16]
 8003534:	2300      	movs	r3, #0
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	7013      	strb	r3, [r2, #0]
 800353a:	e7bf      	b.n	80034bc <_printf_i+0x154>
 800353c:	6923      	ldr	r3, [r4, #16]
 800353e:	0032      	movs	r2, r6
 8003540:	9906      	ldr	r1, [sp, #24]
 8003542:	9805      	ldr	r0, [sp, #20]
 8003544:	9d07      	ldr	r5, [sp, #28]
 8003546:	47a8      	blx	r5
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d0c1      	beq.n	80034d0 <_printf_i+0x168>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	079b      	lsls	r3, r3, #30
 8003550:	d415      	bmi.n	800357e <_printf_i+0x216>
 8003552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003554:	68e0      	ldr	r0, [r4, #12]
 8003556:	4298      	cmp	r0, r3
 8003558:	dabc      	bge.n	80034d4 <_printf_i+0x16c>
 800355a:	0018      	movs	r0, r3
 800355c:	e7ba      	b.n	80034d4 <_printf_i+0x16c>
 800355e:	0022      	movs	r2, r4
 8003560:	2301      	movs	r3, #1
 8003562:	9906      	ldr	r1, [sp, #24]
 8003564:	9805      	ldr	r0, [sp, #20]
 8003566:	9e07      	ldr	r6, [sp, #28]
 8003568:	3219      	adds	r2, #25
 800356a:	47b0      	blx	r6
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d0af      	beq.n	80034d0 <_printf_i+0x168>
 8003570:	3501      	adds	r5, #1
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	42ab      	cmp	r3, r5
 800357a:	dcf0      	bgt.n	800355e <_printf_i+0x1f6>
 800357c:	e7e9      	b.n	8003552 <_printf_i+0x1ea>
 800357e:	2500      	movs	r5, #0
 8003580:	e7f7      	b.n	8003572 <_printf_i+0x20a>
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	08003869 	.word	0x08003869
 8003588:	0800387a 	.word	0x0800387a

0800358c <memchr>:
 800358c:	b2c9      	uxtb	r1, r1
 800358e:	1882      	adds	r2, r0, r2
 8003590:	4290      	cmp	r0, r2
 8003592:	d101      	bne.n	8003598 <memchr+0xc>
 8003594:	2000      	movs	r0, #0
 8003596:	4770      	bx	lr
 8003598:	7803      	ldrb	r3, [r0, #0]
 800359a:	428b      	cmp	r3, r1
 800359c:	d0fb      	beq.n	8003596 <memchr+0xa>
 800359e:	3001      	adds	r0, #1
 80035a0:	e7f6      	b.n	8003590 <memchr+0x4>

080035a2 <memcpy>:
 80035a2:	2300      	movs	r3, #0
 80035a4:	b510      	push	{r4, lr}
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d100      	bne.n	80035ac <memcpy+0xa>
 80035aa:	bd10      	pop	{r4, pc}
 80035ac:	5ccc      	ldrb	r4, [r1, r3]
 80035ae:	54c4      	strb	r4, [r0, r3]
 80035b0:	3301      	adds	r3, #1
 80035b2:	e7f8      	b.n	80035a6 <memcpy+0x4>

080035b4 <memmove>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	4288      	cmp	r0, r1
 80035b8:	d902      	bls.n	80035c0 <memmove+0xc>
 80035ba:	188b      	adds	r3, r1, r2
 80035bc:	4298      	cmp	r0, r3
 80035be:	d303      	bcc.n	80035c8 <memmove+0x14>
 80035c0:	2300      	movs	r3, #0
 80035c2:	e007      	b.n	80035d4 <memmove+0x20>
 80035c4:	5c8b      	ldrb	r3, [r1, r2]
 80035c6:	5483      	strb	r3, [r0, r2]
 80035c8:	3a01      	subs	r2, #1
 80035ca:	d2fb      	bcs.n	80035c4 <memmove+0x10>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	5ccc      	ldrb	r4, [r1, r3]
 80035d0:	54c4      	strb	r4, [r0, r3]
 80035d2:	3301      	adds	r3, #1
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1fa      	bne.n	80035ce <memmove+0x1a>
 80035d8:	e7f8      	b.n	80035cc <memmove+0x18>
	...

080035dc <_free_r>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	0005      	movs	r5, r0
 80035e0:	2900      	cmp	r1, #0
 80035e2:	d010      	beq.n	8003606 <_free_r+0x2a>
 80035e4:	1f0c      	subs	r4, r1, #4
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da00      	bge.n	80035ee <_free_r+0x12>
 80035ec:	18e4      	adds	r4, r4, r3
 80035ee:	0028      	movs	r0, r5
 80035f0:	f000 f8d4 	bl	800379c <__malloc_lock>
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <_free_r+0x90>)
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <_free_r+0x2c>
 80035fc:	6063      	str	r3, [r4, #4]
 80035fe:	6014      	str	r4, [r2, #0]
 8003600:	0028      	movs	r0, r5
 8003602:	f000 f8d3 	bl	80037ac <__malloc_unlock>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	42a3      	cmp	r3, r4
 800360a:	d908      	bls.n	800361e <_free_r+0x42>
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	1860      	adds	r0, r4, r1
 8003610:	4283      	cmp	r3, r0
 8003612:	d1f3      	bne.n	80035fc <_free_r+0x20>
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	1841      	adds	r1, r0, r1
 800361a:	6021      	str	r1, [r4, #0]
 800361c:	e7ee      	b.n	80035fc <_free_r+0x20>
 800361e:	001a      	movs	r2, r3
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <_free_r+0x4e>
 8003626:	42a3      	cmp	r3, r4
 8003628:	d9f9      	bls.n	800361e <_free_r+0x42>
 800362a:	6811      	ldr	r1, [r2, #0]
 800362c:	1850      	adds	r0, r2, r1
 800362e:	42a0      	cmp	r0, r4
 8003630:	d10b      	bne.n	800364a <_free_r+0x6e>
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	1809      	adds	r1, r1, r0
 8003636:	1850      	adds	r0, r2, r1
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	4283      	cmp	r3, r0
 800363c:	d1e0      	bne.n	8003600 <_free_r+0x24>
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	1841      	adds	r1, r0, r1
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	6053      	str	r3, [r2, #4]
 8003648:	e7da      	b.n	8003600 <_free_r+0x24>
 800364a:	42a0      	cmp	r0, r4
 800364c:	d902      	bls.n	8003654 <_free_r+0x78>
 800364e:	230c      	movs	r3, #12
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	e7d5      	b.n	8003600 <_free_r+0x24>
 8003654:	6821      	ldr	r1, [r4, #0]
 8003656:	1860      	adds	r0, r4, r1
 8003658:	4283      	cmp	r3, r0
 800365a:	d103      	bne.n	8003664 <_free_r+0x88>
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	1841      	adds	r1, r0, r1
 8003662:	6021      	str	r1, [r4, #0]
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	6054      	str	r4, [r2, #4]
 8003668:	e7ca      	b.n	8003600 <_free_r+0x24>
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000090 	.word	0x20000090

08003670 <_malloc_r>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	2303      	movs	r3, #3
 8003674:	1ccd      	adds	r5, r1, #3
 8003676:	439d      	bics	r5, r3
 8003678:	3508      	adds	r5, #8
 800367a:	0006      	movs	r6, r0
 800367c:	2d0c      	cmp	r5, #12
 800367e:	d21f      	bcs.n	80036c0 <_malloc_r+0x50>
 8003680:	250c      	movs	r5, #12
 8003682:	42a9      	cmp	r1, r5
 8003684:	d81e      	bhi.n	80036c4 <_malloc_r+0x54>
 8003686:	0030      	movs	r0, r6
 8003688:	f000 f888 	bl	800379c <__malloc_lock>
 800368c:	4925      	ldr	r1, [pc, #148]	; (8003724 <_malloc_r+0xb4>)
 800368e:	680a      	ldr	r2, [r1, #0]
 8003690:	0014      	movs	r4, r2
 8003692:	2c00      	cmp	r4, #0
 8003694:	d11a      	bne.n	80036cc <_malloc_r+0x5c>
 8003696:	4f24      	ldr	r7, [pc, #144]	; (8003728 <_malloc_r+0xb8>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <_malloc_r+0x38>
 800369e:	0021      	movs	r1, r4
 80036a0:	0030      	movs	r0, r6
 80036a2:	f000 f869 	bl	8003778 <_sbrk_r>
 80036a6:	6038      	str	r0, [r7, #0]
 80036a8:	0029      	movs	r1, r5
 80036aa:	0030      	movs	r0, r6
 80036ac:	f000 f864 	bl	8003778 <_sbrk_r>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d12b      	bne.n	800370c <_malloc_r+0x9c>
 80036b4:	230c      	movs	r3, #12
 80036b6:	0030      	movs	r0, r6
 80036b8:	6033      	str	r3, [r6, #0]
 80036ba:	f000 f877 	bl	80037ac <__malloc_unlock>
 80036be:	e003      	b.n	80036c8 <_malloc_r+0x58>
 80036c0:	2d00      	cmp	r5, #0
 80036c2:	dade      	bge.n	8003682 <_malloc_r+0x12>
 80036c4:	230c      	movs	r3, #12
 80036c6:	6033      	str	r3, [r6, #0]
 80036c8:	2000      	movs	r0, #0
 80036ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	d419      	bmi.n	8003706 <_malloc_r+0x96>
 80036d2:	2b0b      	cmp	r3, #11
 80036d4:	d903      	bls.n	80036de <_malloc_r+0x6e>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	18e4      	adds	r4, r4, r3
 80036da:	6025      	str	r5, [r4, #0]
 80036dc:	e003      	b.n	80036e6 <_malloc_r+0x76>
 80036de:	6863      	ldr	r3, [r4, #4]
 80036e0:	42a2      	cmp	r2, r4
 80036e2:	d10e      	bne.n	8003702 <_malloc_r+0x92>
 80036e4:	600b      	str	r3, [r1, #0]
 80036e6:	0030      	movs	r0, r6
 80036e8:	f000 f860 	bl	80037ac <__malloc_unlock>
 80036ec:	0020      	movs	r0, r4
 80036ee:	2207      	movs	r2, #7
 80036f0:	300b      	adds	r0, #11
 80036f2:	1d23      	adds	r3, r4, #4
 80036f4:	4390      	bics	r0, r2
 80036f6:	1ac2      	subs	r2, r0, r3
 80036f8:	4298      	cmp	r0, r3
 80036fa:	d0e6      	beq.n	80036ca <_malloc_r+0x5a>
 80036fc:	1a1b      	subs	r3, r3, r0
 80036fe:	50a3      	str	r3, [r4, r2]
 8003700:	e7e3      	b.n	80036ca <_malloc_r+0x5a>
 8003702:	6053      	str	r3, [r2, #4]
 8003704:	e7ef      	b.n	80036e6 <_malloc_r+0x76>
 8003706:	0022      	movs	r2, r4
 8003708:	6864      	ldr	r4, [r4, #4]
 800370a:	e7c2      	b.n	8003692 <_malloc_r+0x22>
 800370c:	2303      	movs	r3, #3
 800370e:	1cc4      	adds	r4, r0, #3
 8003710:	439c      	bics	r4, r3
 8003712:	42a0      	cmp	r0, r4
 8003714:	d0e1      	beq.n	80036da <_malloc_r+0x6a>
 8003716:	1a21      	subs	r1, r4, r0
 8003718:	0030      	movs	r0, r6
 800371a:	f000 f82d 	bl	8003778 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d1db      	bne.n	80036da <_malloc_r+0x6a>
 8003722:	e7c7      	b.n	80036b4 <_malloc_r+0x44>
 8003724:	20000090 	.word	0x20000090
 8003728:	20000094 	.word	0x20000094

0800372c <_realloc_r>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	0007      	movs	r7, r0
 8003730:	000d      	movs	r5, r1
 8003732:	0016      	movs	r6, r2
 8003734:	2900      	cmp	r1, #0
 8003736:	d105      	bne.n	8003744 <_realloc_r+0x18>
 8003738:	0011      	movs	r1, r2
 800373a:	f7ff ff99 	bl	8003670 <_malloc_r>
 800373e:	0004      	movs	r4, r0
 8003740:	0020      	movs	r0, r4
 8003742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003744:	2a00      	cmp	r2, #0
 8003746:	d103      	bne.n	8003750 <_realloc_r+0x24>
 8003748:	f7ff ff48 	bl	80035dc <_free_r>
 800374c:	0034      	movs	r4, r6
 800374e:	e7f7      	b.n	8003740 <_realloc_r+0x14>
 8003750:	f000 f834 	bl	80037bc <_malloc_usable_size_r>
 8003754:	002c      	movs	r4, r5
 8003756:	42b0      	cmp	r0, r6
 8003758:	d2f2      	bcs.n	8003740 <_realloc_r+0x14>
 800375a:	0031      	movs	r1, r6
 800375c:	0038      	movs	r0, r7
 800375e:	f7ff ff87 	bl	8003670 <_malloc_r>
 8003762:	1e04      	subs	r4, r0, #0
 8003764:	d0ec      	beq.n	8003740 <_realloc_r+0x14>
 8003766:	0029      	movs	r1, r5
 8003768:	0032      	movs	r2, r6
 800376a:	f7ff ff1a 	bl	80035a2 <memcpy>
 800376e:	0029      	movs	r1, r5
 8003770:	0038      	movs	r0, r7
 8003772:	f7ff ff33 	bl	80035dc <_free_r>
 8003776:	e7e3      	b.n	8003740 <_realloc_r+0x14>

08003778 <_sbrk_r>:
 8003778:	2300      	movs	r3, #0
 800377a:	b570      	push	{r4, r5, r6, lr}
 800377c:	4d06      	ldr	r5, [pc, #24]	; (8003798 <_sbrk_r+0x20>)
 800377e:	0004      	movs	r4, r0
 8003780:	0008      	movs	r0, r1
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	f7fd f982 	bl	8000a8c <_sbrk>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d103      	bne.n	8003794 <_sbrk_r+0x1c>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d000      	beq.n	8003794 <_sbrk_r+0x1c>
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	bd70      	pop	{r4, r5, r6, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	20000168 	.word	0x20000168

0800379c <__malloc_lock>:
 800379c:	b510      	push	{r4, lr}
 800379e:	4802      	ldr	r0, [pc, #8]	; (80037a8 <__malloc_lock+0xc>)
 80037a0:	f000 f814 	bl	80037cc <__retarget_lock_acquire_recursive>
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000170 	.word	0x20000170

080037ac <__malloc_unlock>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	4802      	ldr	r0, [pc, #8]	; (80037b8 <__malloc_unlock+0xc>)
 80037b0:	f000 f80d 	bl	80037ce <__retarget_lock_release_recursive>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20000170 	.word	0x20000170

080037bc <_malloc_usable_size_r>:
 80037bc:	1f0b      	subs	r3, r1, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1f18      	subs	r0, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da01      	bge.n	80037ca <_malloc_usable_size_r+0xe>
 80037c6:	580b      	ldr	r3, [r1, r0]
 80037c8:	18c0      	adds	r0, r0, r3
 80037ca:	4770      	bx	lr

080037cc <__retarget_lock_acquire_recursive>:
 80037cc:	4770      	bx	lr

080037ce <__retarget_lock_release_recursive>:
 80037ce:	4770      	bx	lr

080037d0 <_init>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr

080037dc <_fini>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr
