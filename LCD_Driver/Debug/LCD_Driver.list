
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800391c  0800391c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800391c  0800391c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003994  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003994  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a67a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a55  00000000  00000000  0002a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100cb  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c733  00000000  00000000  0003d83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064bc9  00000000  00000000  00049f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000aeb37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c50  00000000  00000000  000aeb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003874 	.word	0x08003874

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003874 	.word	0x08003874

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08e      	sub	sp, #56	; 0x38
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fcdf 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f827 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f92b 	bl	800049c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f8f9 	bl	800043c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800024a:	f000 f879 	bl	8000340 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Initialize LCD
  LcdInit();
 800024e:	f000 f9a9 	bl	80005a4 <LcdInit>

  // Start PWM for LCD Contrast
  LcdContrast(15); // Percentage from 255 max duty cycle
 8000252:	200f      	movs	r0, #15
 8000254:	f000 f994 	bl	8000580 <LcdContrast>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0x50>)
 800025a:	2100      	movs	r1, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f001 fd71 	bl	8001d44 <HAL_TIM_PWM_Start>
   * - 16 bit count
   */


  // Say hello
  uart_buf_len = sprintf(uart_buf, "LCD driver test program started!\r\n");
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0x54>)
 8000264:	003b      	movs	r3, r7
 8000266:	0011      	movs	r1, r2
 8000268:	0018      	movs	r0, r3
 800026a:	f002 fedd 	bl	8003028 <siprintf>
 800026e:	0003      	movs	r3, r0
 8000270:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000274:	b29a      	uxth	r2, r3
 8000276:	0039      	movs	r1, r7
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <main+0x58>)
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	f002 fb54 	bl	8002928 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000280:	e7fe      	b.n	8000280 <main+0x4c>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000011c 	.word	0x2000011c
 8000288:	0800388c 	.word	0x0800388c
 800028c:	20000098 	.word	0x20000098

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b095      	sub	sp, #84	; 0x54
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2420      	movs	r4, #32
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 feb9 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2310      	movs	r3, #16
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	0018      	movs	r0, r3
 80002ac:	2310      	movs	r3, #16
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 feb1 	bl	8003018 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b6:	003b      	movs	r3, r7
 80002b8:	0018      	movs	r0, r3
 80002ba:	2310      	movs	r3, #16
 80002bc:	001a      	movs	r2, r3
 80002be:	2100      	movs	r1, #0
 80002c0:	f002 feaa 	bl	8003018 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2210      	movs	r2, #16
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 ff4d 	bl	8001180 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002ea:	f000 fb38 	bl	800095e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	2110      	movs	r1, #16
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2100      	movs	r1, #0
 800030c:	0018      	movs	r0, r3
 800030e:	f001 fa51 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000316:	f000 fb22 	bl	800095e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800031a:	003b      	movs	r3, r7
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000320:	003b      	movs	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fb95 	bl	8001a58 <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000332:	f000 fb14 	bl	800095e <Error_Handler>
  }
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b015      	add	sp, #84	; 0x54
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08e      	sub	sp, #56	; 0x38
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000346:	2328      	movs	r3, #40	; 0x28
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2310      	movs	r3, #16
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fe61 	bl	8003018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000356:	2320      	movs	r3, #32
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2308      	movs	r3, #8
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f002 fe59 	bl	8003018 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	231c      	movs	r3, #28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fe52 	bl	8003018 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b30      	ldr	r3, [pc, #192]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	05d2      	lsls	r2, r2, #23
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <MX_TIM2_Init+0xf8>)
 800037e:	2207      	movs	r2, #7
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <MX_TIM2_Init+0xf8>)
 800038a:	22ff      	movs	r2, #255	; 0xff
 800038c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000394:	4b28      	ldr	r3, [pc, #160]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_TIM2_Init+0xf8>)
 800039c:	0018      	movs	r0, r3
 800039e:	f001 fc29 	bl	8001bf4 <HAL_TIM_Base_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003a6:	f000 fada 	bl	800095e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003aa:	2128      	movs	r1, #40	; 0x28
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	0152      	lsls	r2, r2, #5
 80003b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b4:	187a      	adds	r2, r7, r1
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <MX_TIM2_Init+0xf8>)
 80003b8:	0011      	movs	r1, r2
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fe2a 	bl	8002014 <HAL_TIM_ConfigClockSource>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003c4:	f000 facb 	bl	800095e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_TIM2_Init+0xf8>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fc62 	bl	8001c94 <HAL_TIM_PWM_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003d4:	f000 fac3 	bl	800095e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d8:	2120      	movs	r1, #32
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e6:	187a      	adds	r2, r7, r1
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_TIM2_Init+0xf8>)
 80003ea:	0011      	movs	r1, r2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f9ef 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80003f6:	f000 fab2 	bl	800095e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2260      	movs	r2, #96	; 0x60
 80003fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 128;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000412:	1d39      	adds	r1, r7, #4
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000416:	2200      	movs	r2, #0
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fd3f 	bl	8001e9c <HAL_TIM_PWM_ConfigChannel>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000422:	f000 fa9c 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <MX_TIM2_Init+0xf8>)
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fadd 	bl	80009e8 <HAL_TIM_MspPostInit>

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b00e      	add	sp, #56	; 0x38
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	2000011c 	.word	0x2000011c

0800043c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <MX_USART1_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000448:	2296      	movs	r2, #150	; 0x96
 800044a:	0212      	lsls	r2, r2, #8
 800044c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_USART1_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <MX_USART1_UART_Init+0x58>)
 8000480:	0018      	movs	r0, r3
 8000482:	f002 f9fd 	bl	8002880 <HAL_UART_Init>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 fa68 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000098 	.word	0x20000098
 8000498:	40013800 	.word	0x40013800

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f002 fdb3 	bl	8003018 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	03c9      	lsls	r1, r1, #15
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	03db      	lsls	r3, r3, #15
 80004c8:	4013      	ands	r3, r2
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b29      	ldr	r3, [pc, #164]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b25      	ldr	r3, [pc, #148]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	02c9      	lsls	r1, r1, #11
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0xd8>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	02db      	lsls	r3, r3, #11
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8000506:	491c      	ldr	r1, [pc, #112]	; (8000578 <MX_GPIO_Init+0xdc>)
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fe18 	bl	8001144 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_GPIO_Init+0xe0>)
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fe12 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_DB4_Pin LCD_DB5_Pin
                           LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8000520:	193b      	adds	r3, r7, r4
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <MX_GPIO_Init+0xdc>)
 8000524:	601a      	str	r2, [r3, #0]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2201      	movs	r2, #1
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	193a      	adds	r2, r7, r4
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fc97 	bl	8000e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2208      	movs	r2, #8
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000560:	187b      	adds	r3, r7, r1
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <MX_GPIO_Init+0xe0>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f000 fc84 	bl	8000e74 <HAL_GPIO_Init>

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	; 0x24
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	0000089b 	.word	0x0000089b
 800057c:	48000400 	.word	0x48000400

08000580 <LcdContrast>:

/* USER CODE BEGIN 4 */

void LcdContrast(unsigned char contrast_percent)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	0002      	movs	r2, r0
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	701a      	strb	r2, [r3, #0]
	//TO-DO: This should be upgraded to a percentage input using fixed point math
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,contrast_percent);
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <LcdContrast+0x20>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	2000011c 	.word	0x2000011c

080005a4 <LcdInit>:

void LcdInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af04      	add	r7, sp, #16
	//
	// Clear Display
	//

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 80005aa:	2390      	movs	r3, #144	; 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2201      	movs	r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fdc6 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-MSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, 0);
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	0119      	lsls	r1, r3, #4
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	2200      	movs	r2, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fdbe 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, 0);
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fdb7 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, 0);
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fdb0 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, 0);
 80005e4:	2390      	movs	r3, #144	; 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fda9 	bl	8001144 <HAL_GPIO_WritePin>

	//Enable LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 80005f2:	2390      	movs	r3, #144	; 0x90
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	2200      	movs	r2, #0
 80005f8:	2102      	movs	r1, #2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fda2 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 8000600:	2005      	movs	r0, #5
 8000602:	f000 fb5f 	bl	8000cc4 <HAL_Delay>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000606:	2390      	movs	r3, #144	; 0x90
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fd98 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-LSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, 0);
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	0119      	lsls	r1, r3, #4
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	2200      	movs	r2, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fd90 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, 0);
 8000624:	2390      	movs	r3, #144	; 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fd89 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, 0);
 8000632:	2390      	movs	r3, #144	; 0x90
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fd82 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, 1);
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2201      	movs	r2, #1
 8000646:	2108      	movs	r1, #8
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fd7b 	bl	8001144 <HAL_GPIO_WritePin>

	//Enabled LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fd74 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 800065c:	2005      	movs	r0, #5
 800065e:	f000 fb31 	bl	8000cc4 <HAL_Delay>

	//Delay
	HAL_Delay(50); //50ms Delay
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f000 fb2e 	bl	8000cc4 <HAL_Delay>

	//
	// Return cursor to HOME
	//
	LcdWriteCmd(0,0,0,0,0,0,1,0);
 8000668:	2300      	movs	r3, #0
 800066a:	9303      	str	r3, [sp, #12]
 800066c:	2301      	movs	r3, #1
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2300      	movs	r3, #0
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f000 f85e 	bl	8000740 <LcdWriteCmd>

	//Delay
	HAL_Delay(50); //50ms Delay
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f000 fb1d 	bl	8000cc4 <HAL_Delay>

	//
	// Set cursor to blinking
	//
	LcdWriteCmd(0,0,0,0,1,1,1,1);
 800068a:	2301      	movs	r3, #1
 800068c:	9303      	str	r3, [sp, #12]
 800068e:	2301      	movs	r3, #1
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2301      	movs	r3, #1
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 f84d 	bl	8000740 <LcdWriteCmd>

	//Delay
	HAL_Delay(50); //50ms Delay
 80006a6:	2032      	movs	r0, #50	; 0x32
 80006a8:	f000 fb0c 	bl	8000cc4 <HAL_Delay>

	//
	// Write MACK to screen
	//
	LcdWriteData(0, 1, 0, 0, 1, 1, 0, 1);
 80006ac:	2301      	movs	r3, #1
 80006ae:	9303      	str	r3, [sp, #12]
 80006b0:	2300      	movs	r3, #0
 80006b2:	9302      	str	r3, [sp, #8]
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f8bb 	bl	800083e <LcdWriteData>
	HAL_Delay(50); //50ms Delay
 80006c8:	2032      	movs	r0, #50	; 0x32
 80006ca:	f000 fafb 	bl	8000cc4 <HAL_Delay>
	LcdWriteData(0, 1, 0, 0, 0, 0, 0, 1);
 80006ce:	2301      	movs	r3, #1
 80006d0:	9303      	str	r3, [sp, #12]
 80006d2:	2300      	movs	r3, #0
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2300      	movs	r3, #0
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f8aa 	bl	800083e <LcdWriteData>
	HAL_Delay(50); //50ms Delay
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f000 faea 	bl	8000cc4 <HAL_Delay>
	LcdWriteData(0, 1, 0, 0, 0, 0, 1, 1);
 80006f0:	2301      	movs	r3, #1
 80006f2:	9303      	str	r3, [sp, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	2200      	movs	r2, #0
 8000704:	2101      	movs	r1, #1
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f899 	bl	800083e <LcdWriteData>
	HAL_Delay(50); //50ms Delay
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f000 fad9 	bl	8000cc4 <HAL_Delay>
	LcdWriteData(0, 1, 0, 0, 1, 0, 1, 1);
 8000712:	2301      	movs	r3, #1
 8000714:	9303      	str	r3, [sp, #12]
 8000716:	2301      	movs	r3, #1
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f888 	bl	800083e <LcdWriteData>
	HAL_Delay(50); //50ms Delay
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f000 fac8 	bl	8000cc4 <HAL_Delay>

	//Delay
	HAL_Delay(50); //50ms Delay
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f000 fac5 	bl	8000cc4 <HAL_Delay>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <LcdWriteCmd>:

void LcdWriteCmd(unsigned char DB7, unsigned char DB6, unsigned char DB5, unsigned char DB4, unsigned char DB3, unsigned char DB2, unsigned char DB1, unsigned char DB0)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	0005      	movs	r5, r0
 8000748:	000c      	movs	r4, r1
 800074a:	0010      	movs	r0, r2
 800074c:	0019      	movs	r1, r3
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	1c2a      	adds	r2, r5, #0
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	1c22      	adds	r2, r4, #0
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	1d7b      	adds	r3, r7, #5
 800075c:	1c02      	adds	r2, r0, #0
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	1c0a      	adds	r2, r1, #0
 8000764:	701a      	strb	r2, [r3, #0]
	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000766:	2390      	movs	r3, #144	; 0x90
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	2201      	movs	r2, #1
 800076c:	2102      	movs	r1, #2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fce8 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-MSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB7);
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	0119      	lsls	r1, r3, #4
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fcdf 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB6);
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	2390      	movs	r3, #144	; 0x90
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fcd7 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB5);
 8000796:	1d7b      	adds	r3, r7, #5
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2110      	movs	r1, #16
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fccf 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB4);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2108      	movs	r1, #8
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fcc7 	bl	8001144 <HAL_GPIO_WritePin>

	//Enable LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 80007b6:	2390      	movs	r3, #144	; 0x90
 80007b8:	05db      	lsls	r3, r3, #23
 80007ba:	2200      	movs	r2, #0
 80007bc:	2102      	movs	r1, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fcc0 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 80007c4:	2005      	movs	r0, #5
 80007c6:	f000 fa7d 	bl	8000cc4 <HAL_Delay>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 80007ca:	2390      	movs	r3, #144	; 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fcb6 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-LSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB3);
 80007d8:	2318      	movs	r3, #24
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	781a      	ldrb	r2, [r3, #0]
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	0119      	lsls	r1, r3, #4
 80007e2:	2390      	movs	r3, #144	; 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fcac 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB2);
 80007ec:	231c      	movs	r3, #28
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	2390      	movs	r3, #144	; 0x90
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fca3 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB1);
 80007fe:	2320      	movs	r3, #32
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	2110      	movs	r1, #16
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fc9a 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB0);
 8000810:	2324      	movs	r3, #36	; 0x24
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	2390      	movs	r3, #144	; 0x90
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2108      	movs	r1, #8
 800081c:	0018      	movs	r0, r3
 800081e:	f000 fc91 	bl	8001144 <HAL_GPIO_WritePin>

	//Enabled LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 8000822:	2390      	movs	r3, #144	; 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fc8a 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 8000830:	2005      	movs	r0, #5
 8000832:	f000 fa47 	bl	8000cc4 <HAL_Delay>

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bdb0      	pop	{r4, r5, r7, pc}

0800083e <LcdWriteData>:

void LcdWriteData(unsigned char DB7, unsigned char DB6, unsigned char DB5, unsigned char DB4, unsigned char DB3, unsigned char DB2, unsigned char DB1, unsigned char DB0)
{
 800083e:	b5b0      	push	{r4, r5, r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	0005      	movs	r5, r0
 8000846:	000c      	movs	r4, r1
 8000848:	0010      	movs	r0, r2
 800084a:	0019      	movs	r1, r3
 800084c:	1dfb      	adds	r3, r7, #7
 800084e:	1c2a      	adds	r2, r5, #0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	1c22      	adds	r2, r4, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	1d7b      	adds	r3, r7, #5
 800085a:	1c02      	adds	r2, r0, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	1c0a      	adds	r2, r1, #0
 8000862:	701a      	strb	r2, [r3, #0]
	//RS HIGH
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 1);
 8000864:	2390      	movs	r3, #144	; 0x90
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fc69 	bl	8001144 <HAL_GPIO_WritePin>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 8000872:	2390      	movs	r3, #144	; 0x90
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	2102      	movs	r1, #2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fc62 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-MSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB7);
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	0119      	lsls	r1, r3, #4
 8000888:	2390      	movs	r3, #144	; 0x90
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fc59 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB6);
 8000892:	1dbb      	adds	r3, r7, #6
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fc51 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB5);
 80008a2:	1d7b      	adds	r3, r7, #5
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	2390      	movs	r3, #144	; 0x90
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2110      	movs	r1, #16
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fc49 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB4);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	2390      	movs	r3, #144	; 0x90
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2108      	movs	r1, #8
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fc41 	bl	8001144 <HAL_GPIO_WritePin>

	//Enable LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 80008c2:	2390      	movs	r3, #144	; 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	2102      	movs	r1, #2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fc3a 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 80008d0:	2005      	movs	r0, #5
 80008d2:	f000 f9f7 	bl	8000cc4 <HAL_Delay>

	//Enable HIGH
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 1);
 80008d6:	2390      	movs	r3, #144	; 0x90
 80008d8:	05db      	lsls	r3, r3, #23
 80008da:	2201      	movs	r2, #1
 80008dc:	2102      	movs	r1, #2
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fc30 	bl	8001144 <HAL_GPIO_WritePin>

	//Set DBx data 4-LSB
	HAL_GPIO_WritePin(LCD_DB7_GPIO_Port, LCD_DB7_Pin, DB3);
 80008e4:	2318      	movs	r3, #24
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	0119      	lsls	r1, r3, #4
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fc26 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB6_GPIO_Port, LCD_DB6_Pin, DB2);
 80008f8:	231c      	movs	r3, #28
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	2390      	movs	r3, #144	; 0x90
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fc1d 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB5_GPIO_Port, LCD_DB5_Pin, DB1);
 800090a:	2320      	movs	r3, #32
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2110      	movs	r1, #16
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fc14 	bl	8001144 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DB4_GPIO_Port, LCD_DB4_Pin, DB0);
 800091c:	2324      	movs	r3, #36	; 0x24
 800091e:	18fb      	adds	r3, r7, r3
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	2390      	movs	r3, #144	; 0x90
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2108      	movs	r1, #8
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fc0b 	bl	8001144 <HAL_GPIO_WritePin>

	//Enabled LOW
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, 0);
 800092e:	2390      	movs	r3, #144	; 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2200      	movs	r2, #0
 8000934:	2102      	movs	r1, #2
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fc04 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 800093c:	2005      	movs	r0, #5
 800093e:	f000 f9c1 	bl	8000cc4 <HAL_Delay>

	//RS LOW
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 8000942:	2390      	movs	r3, #144	; 0x90
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	2101      	movs	r1, #1
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fbfa 	bl	8001144 <HAL_GPIO_WritePin>

	//Delay
	HAL_Delay(5); //5ms Delay
 8000950:	2005      	movs	r0, #5
 8000952:	f000 f9b7 	bl	8000cc4 <HAL_Delay>

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bdb0      	pop	{r4, r5, r7, pc}

0800095e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
}
 8000964:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000966:	e7fe      	b.n	8000966 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	699a      	ldr	r2, [r3, #24]
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	619a      	str	r2, [r3, #24]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	69da      	ldr	r2, [r3, #28]
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0549      	lsls	r1, r1, #21
 8000990:	430a      	orrs	r2, r1
 8000992:	61da      	str	r2, [r3, #28]
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_MspInit+0x44>)
 8000996:	69da      	ldr	r2, [r3, #28]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	055b      	lsls	r3, r3, #21
 800099c:	4013      	ands	r3, r2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d10b      	bne.n	80009dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_TIM_Base_MspInit+0x34>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_TIM_Base_MspInit+0x34>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	61da      	str	r2, [r3, #28]
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_TIM_Base_MspInit+0x34>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4013      	ands	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b004      	add	sp, #16
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	240c      	movs	r4, #12
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f002 fb0c 	bl	8003018 <memset>
  if(htim->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d124      	bne.n	8000a56 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	0289      	lsls	r1, r1, #10
 8000a16:	430a      	orrs	r2, r1
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_TIM_MspPostInit+0x78>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	029b      	lsls	r3, r3, #10
 8000a22:	4013      	ands	r3, r2
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_CONTRAST_PWM_Pin;
 8000a28:	0021      	movs	r1, r4
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2202      	movs	r2, #2
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2202      	movs	r2, #2
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LCD_CONTRAST_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a48:	187a      	adds	r2, r7, r1
 8000a4a:	2390      	movs	r3, #144	; 0x90
 8000a4c:	05db      	lsls	r3, r3, #23
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fa0f 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b009      	add	sp, #36	; 0x24
 8000a5c:	bd90      	pop	{r4, r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b08b      	sub	sp, #44	; 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	2414      	movs	r4, #20
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	0018      	movs	r0, r3
 8000a72:	2314      	movs	r3, #20
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 face 	bl	8003018 <memset>
  if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d132      	bne.n	8000aec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	01c9      	lsls	r1, r1, #7
 8000a90:	430a      	orrs	r2, r1
 8000a92:	619a      	str	r2, [r3, #24]
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000a96:	699a      	ldr	r2, [r3, #24]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	01db      	lsls	r3, r3, #7
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000aa4:	695a      	ldr	r2, [r3, #20]
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0289      	lsls	r1, r1, #10
 8000aac:	430a      	orrs	r2, r1
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000ab2:	695a      	ldr	r2, [r3, #20]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	029b      	lsls	r3, r3, #10
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000abe:	0021      	movs	r1, r4
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <HAL_UART_MspInit+0x98>)
 8000ac4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2202      	movs	r2, #2
 8000aca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2201      	movs	r2, #1
 8000adc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	187a      	adds	r2, r7, r1
 8000ae0:	2390      	movs	r3, #144	; 0x90
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f9c4 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b00b      	add	sp, #44	; 0x2c
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	00008004 	.word	0x00008004

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 f8b2 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 fa30 	bl	8002fc4 <__errno>
 8000b64:	0003      	movs	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	18d2      	adds	r2, r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20001000 	.word	0x20001000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	2000008c 	.word	0x2000008c
 8000b98:	20000178 	.word	0x20000178

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bd2:	f7ff ffe3 	bl	8000b9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bd6:	f002 f9fb 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fb2b 	bl	8000234 <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
  ldr   r0, =_estack
 8000be0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bec:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 8000bf0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bf4:	20000178 	.word	0x20000178

08000bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_IRQHandler>
	...

08000bfc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_Init+0x24>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_Init+0x24>)
 8000c06:	2110      	movs	r1, #16
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f809 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c12:	f7ff fea9 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c2e:	681c      	ldr	r4, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x60>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	0019      	movs	r1, r3
 8000c36:	23fa      	movs	r3, #250	; 0xfa
 8000c38:	0098      	lsls	r0, r3, #2
 8000c3a:	f7ff fa6f 	bl	800011c <__udivsi3>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	0019      	movs	r1, r3
 8000c42:	0020      	movs	r0, r4
 8000c44:	f7ff fa6a 	bl	800011c <__udivsi3>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f905 	bl	8000e5a <HAL_SYSTICK_Config>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e00f      	b.n	8000c78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d80b      	bhi.n	8000c76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f8e2 	bl	8000e30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_InitTick+0x64>)
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	001a      	movs	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	18d2      	adds	r2, r2, r3
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000164 	.word	0x20000164

08000cb0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000164 	.word	0x20000164

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff fff0 	bl	8000cb0 <HAL_GetTick>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	189b      	adds	r3, r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	f7ff ffe0 	bl	8000cb0 <HAL_GetTick>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b004      	add	sp, #16
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000008 	.word	0x20000008

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d20:	d828      	bhi.n	8000d74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	33c0      	adds	r3, #192	; 0xc0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	589b      	ldr	r3, [r3, r2]
 8000d32:	1dfa      	adds	r2, r7, #7
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	0011      	movs	r1, r2
 8000d38:	2203      	movs	r2, #3
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	21ff      	movs	r1, #255	; 0xff
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	43d2      	mvns	r2, r2
 8000d46:	401a      	ands	r2, r3
 8000d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	019b      	lsls	r3, r3, #6
 8000d4e:	22ff      	movs	r2, #255	; 0xff
 8000d50:	401a      	ands	r2, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0018      	movs	r0, r3
 8000d58:	2303      	movs	r3, #3
 8000d5a:	4003      	ands	r3, r0
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	481f      	ldr	r0, [pc, #124]	; (8000de0 <__NVIC_SetPriority+0xd4>)
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	33c0      	adds	r3, #192	; 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d72:	e031      	b.n	8000dd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	400b      	ands	r3, r1
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3306      	adds	r3, #6
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1dfa      	adds	r2, r7, #7
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	0011      	movs	r1, r2
 8000d94:	2203      	movs	r2, #3
 8000d96:	400a      	ands	r2, r1
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	21ff      	movs	r1, #255	; 0xff
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	019b      	lsls	r3, r3, #6
 8000daa:	22ff      	movs	r2, #255	; 0xff
 8000dac:	401a      	ands	r2, r3
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	0018      	movs	r0, r3
 8000db4:	2303      	movs	r3, #3
 8000db6:	4003      	ands	r3, r0
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <__NVIC_SetPriority+0xd8>)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	4023      	ands	r3, r4
 8000dc8:	3b08      	subs	r3, #8
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	3306      	adds	r3, #6
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	18c3      	adds	r3, r0, r3
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b003      	add	sp, #12
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	045b      	lsls	r3, r3, #17
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d301      	bcc.n	8000e00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e010      	b.n	8000e22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <SysTick_Config+0x44>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	3a01      	subs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff ff7c 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x44>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x44>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	1c02      	adds	r2, r0, #0
 8000e40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ffbf 	bl	8000de8 <SysTick_Config>
 8000e6a:	0003      	movs	r3, r0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e149      	b.n	8001118 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4091      	lsls	r1, r2
 8000e8e:	000a      	movs	r2, r1
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d100      	bne.n	8000e9c <HAL_GPIO_Init+0x28>
 8000e9a:	e13a      	b.n	8001112 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d00b      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b12      	cmp	r3, #18
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	409a      	lsls	r2, r3
 8000ede:	0013      	movs	r3, r2
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	43da      	mvns	r2, r3
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	2201      	movs	r2, #1
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0xea>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d123      	bne.n	8000fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	08da      	lsrs	r2, r3, #3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3208      	adds	r2, #8
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	58d3      	ldr	r3, [r2, r3]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2207      	movs	r2, #7
 8000f70:	4013      	ands	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2107      	movs	r1, #7
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	6939      	ldr	r1, [r7, #16]
 8000fa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	055b      	lsls	r3, r3, #21
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x174>
 8000fe6:	e094      	b.n	8001112 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe8:	4b51      	ldr	r3, [pc, #324]	; (8001130 <HAL_GPIO_Init+0x2bc>)
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x2bc>)
 8000fee:	2101      	movs	r1, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	619a      	str	r2, [r3, #24]
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x2bc>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	589b      	ldr	r3, [r3, r2]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2203      	movs	r2, #3
 8001012:	4013      	ands	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	2390      	movs	r3, #144	; 0x90
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	429a      	cmp	r2, r3
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x1d6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a41      	ldr	r2, [pc, #260]	; (8001138 <HAL_GPIO_Init+0x2c4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x1d2>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a40      	ldr	r2, [pc, #256]	; (800113c <HAL_GPIO_Init+0x2c8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x1ce>
 800103e:	2302      	movs	r3, #2
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x1d8>
 8001042:	2305      	movs	r3, #5
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x1d8>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x1d8>
 800104a:	2300      	movs	r3, #0
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	2103      	movs	r1, #3
 8001050:	400a      	ands	r2, r1
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x2c0>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	4013      	ands	r3, r2
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001094:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	43da      	mvns	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	029b      	lsls	r3, r3, #10
 80010ac:	4013      	ands	r3, r2
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	4013      	ands	r3, r2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_GPIO_Init+0x2cc>)
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	40da      	lsrs	r2, r3
 8001120:	1e13      	subs	r3, r2, #0
 8001122:	d000      	beq.n	8001126 <HAL_GPIO_Init+0x2b2>
 8001124:	e6ae      	b.n	8000e84 <HAL_GPIO_Init+0x10>
  } 
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b006      	add	sp, #24
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000
 8001138:	48000400 	.word	0x48000400
 800113c:	48000800 	.word	0x48000800
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	0008      	movs	r0, r1
 800114e:	0011      	movs	r1, r2
 8001150:	1cbb      	adds	r3, r7, #2
 8001152:	1c02      	adds	r2, r0, #0
 8001154:	801a      	strh	r2, [r3, #0]
 8001156:	1c7b      	adds	r3, r7, #1
 8001158:	1c0a      	adds	r2, r1, #0
 800115a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800115c:	1c7b      	adds	r3, r7, #1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001164:	1cbb      	adds	r3, r7, #2
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e003      	b.n	8001176 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	1cbb      	adds	r3, r7, #2
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e301      	b.n	8001796 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2201      	movs	r2, #1
 8001198:	4013      	ands	r3, r2
 800119a:	d100      	bne.n	800119e <HAL_RCC_OscConfig+0x1e>
 800119c:	e08d      	b.n	80012ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800119e:	4bc3      	ldr	r3, [pc, #780]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	220c      	movs	r2, #12
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d00e      	beq.n	80011c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011aa:	4bc0      	ldr	r3, [pc, #768]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	220c      	movs	r2, #12
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x64>
 80011b6:	4bbd      	ldr	r3, [pc, #756]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	401a      	ands	r2, r3
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	025b      	lsls	r3, r3, #9
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d10d      	bne.n	80011e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4bb8      	ldr	r3, [pc, #736]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	029b      	lsls	r3, r3, #10
 80011d0:	4013      	ands	r3, r2
 80011d2:	d100      	bne.n	80011d6 <HAL_RCC_OscConfig+0x56>
 80011d4:	e070      	b.n	80012b8 <HAL_RCC_OscConfig+0x138>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d000      	beq.n	80011e0 <HAL_RCC_OscConfig+0x60>
 80011de:	e06b      	b.n	80012b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e2d8      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_RCC_OscConfig+0x7c>
 80011ec:	4baf      	ldr	r3, [pc, #700]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4bae      	ldr	r3, [pc, #696]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0249      	lsls	r1, r1, #9
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	e02f      	b.n	800125c <HAL_RCC_OscConfig+0xdc>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x9e>
 8001204:	4ba9      	ldr	r3, [pc, #676]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4ba8      	ldr	r3, [pc, #672]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800120a:	49a9      	ldr	r1, [pc, #676]	; (80014b0 <HAL_RCC_OscConfig+0x330>)
 800120c:	400a      	ands	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	4ba6      	ldr	r3, [pc, #664]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4ba5      	ldr	r3, [pc, #660]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001216:	49a7      	ldr	r1, [pc, #668]	; (80014b4 <HAL_RCC_OscConfig+0x334>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e01e      	b.n	800125c <HAL_RCC_OscConfig+0xdc>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d10e      	bne.n	8001244 <HAL_RCC_OscConfig+0xc4>
 8001226:	4ba1      	ldr	r3, [pc, #644]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	02c9      	lsls	r1, r1, #11
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b9c      	ldr	r3, [pc, #624]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	0249      	lsls	r1, r1, #9
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xdc>
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b98      	ldr	r3, [pc, #608]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800124a:	4999      	ldr	r1, [pc, #612]	; (80014b0 <HAL_RCC_OscConfig+0x330>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	4b96      	ldr	r3, [pc, #600]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b95      	ldr	r3, [pc, #596]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001256:	4997      	ldr	r1, [pc, #604]	; (80014b4 <HAL_RCC_OscConfig+0x334>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d014      	beq.n	800128e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fd24 	bl	8000cb0 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126e:	f7ff fd1f 	bl	8000cb0 <HAL_GetTick>
 8001272:	0002      	movs	r2, r0
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e28a      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001280:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	029b      	lsls	r3, r3, #10
 8001288:	4013      	ands	r3, r2
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0xee>
 800128c:	e015      	b.n	80012ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fd0f 	bl	8000cb0 <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fd0a 	bl	8000cb0 <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e275      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	4b80      	ldr	r3, [pc, #512]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	029b      	lsls	r3, r3, #10
 80012b2:	4013      	ands	r3, r2
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x118>
 80012b6:	e000      	b.n	80012ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d100      	bne.n	80012c6 <HAL_RCC_OscConfig+0x146>
 80012c4:	e069      	b.n	800139a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012c6:	4b79      	ldr	r3, [pc, #484]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	220c      	movs	r2, #12
 80012cc:	4013      	ands	r3, r2
 80012ce:	d00b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012d0:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	220c      	movs	r2, #12
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d11c      	bne.n	8001316 <HAL_RCC_OscConfig+0x196>
 80012dc:	4b73      	ldr	r3, [pc, #460]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	025b      	lsls	r3, r3, #9
 80012e4:	4013      	ands	r3, r2
 80012e6:	d116      	bne.n	8001316 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	4b70      	ldr	r3, [pc, #448]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e24b      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22f8      	movs	r2, #248	; 0xf8
 8001304:	4393      	bics	r3, r2
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	00da      	lsls	r2, r3, #3
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	e041      	b.n	800139a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fcc1 	bl	8000cb0 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fcbc 	bl	8000cb0 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e227      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001346:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d0f1      	beq.n	8001334 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001350:	4b56      	ldr	r3, [pc, #344]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	22f8      	movs	r2, #248	; 0xf8
 8001356:	4393      	bics	r3, r2
 8001358:	0019      	movs	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00da      	lsls	r2, r3, #3
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e018      	b.n	800139a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001368:	4b50      	ldr	r3, [pc, #320]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800136e:	2101      	movs	r1, #1
 8001370:	438a      	bics	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc9c 	bl	8000cb0 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc97 	bl	8000cb0 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e202      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2202      	movs	r2, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d1f1      	bne.n	800137e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2208      	movs	r2, #8
 80013a0:	4013      	ands	r3, r2
 80013a2:	d036      	beq.n	8001412 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d019      	beq.n	80013e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80013ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fc7a 	bl	8000cb0 <HAL_GetTick>
 80013bc:	0003      	movs	r3, r0
 80013be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc75 	bl	8000cb0 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1e0      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d0f1      	beq.n	80013c2 <HAL_RCC_OscConfig+0x242>
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	438a      	bics	r2, r1
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc60 	bl	8000cb0 <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fc5b 	bl	8000cb0 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1c6      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d1f1      	bne.n	80013f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x29e>
 800141c:	e0b4      	b.n	8001588 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	201f      	movs	r0, #31
 8001420:	183b      	adds	r3, r7, r0
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	4013      	ands	r3, r2
 8001430:	d110      	bne.n	8001454 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	0549      	lsls	r1, r1, #21
 800143c:	430a      	orrs	r2, r1
 800143e:	61da      	str	r2, [r3, #28]
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	055b      	lsls	r3, r3, #21
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800144e:	183b      	adds	r3, r7, r0
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4013      	ands	r3, r2
 800145e:	d11a      	bne.n	8001496 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	0049      	lsls	r1, r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146e:	f7ff fc1f 	bl	8000cb0 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001478:	f7ff fc1a 	bl	8000cb0 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e185      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x338>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10e      	bne.n	80014bc <HAL_RCC_OscConfig+0x33c>
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80014a0:	6a1a      	ldr	r2, [r3, #32]
 80014a2:	4b02      	ldr	r3, [pc, #8]	; (80014ac <HAL_RCC_OscConfig+0x32c>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	621a      	str	r2, [r3, #32]
 80014aa:	e035      	b.n	8001518 <HAL_RCC_OscConfig+0x398>
 80014ac:	40021000 	.word	0x40021000
 80014b0:	fffeffff 	.word	0xfffeffff
 80014b4:	fffbffff 	.word	0xfffbffff
 80014b8:	40007000 	.word	0x40007000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x35e>
 80014c4:	4bb6      	ldr	r3, [pc, #728]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4bb5      	ldr	r3, [pc, #724]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	4bb3      	ldr	r3, [pc, #716]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	4bb2      	ldr	r3, [pc, #712]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	621a      	str	r2, [r3, #32]
 80014dc:	e01c      	b.n	8001518 <HAL_RCC_OscConfig+0x398>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x380>
 80014e6:	4bae      	ldr	r3, [pc, #696]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	4bad      	ldr	r3, [pc, #692]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014ec:	2104      	movs	r1, #4
 80014ee:	430a      	orrs	r2, r1
 80014f0:	621a      	str	r2, [r3, #32]
 80014f2:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014f4:	6a1a      	ldr	r2, [r3, #32]
 80014f6:	4baa      	ldr	r3, [pc, #680]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	621a      	str	r2, [r3, #32]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0x398>
 8001500:	4ba7      	ldr	r3, [pc, #668]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4ba6      	ldr	r3, [pc, #664]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001506:	2101      	movs	r1, #1
 8001508:	438a      	bics	r2, r1
 800150a:	621a      	str	r2, [r3, #32]
 800150c:	4ba4      	ldr	r3, [pc, #656]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800150e:	6a1a      	ldr	r2, [r3, #32]
 8001510:	4ba3      	ldr	r3, [pc, #652]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001512:	2104      	movs	r1, #4
 8001514:	438a      	bics	r2, r1
 8001516:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d014      	beq.n	800154a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fbc6 	bl	8000cb0 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e009      	b.n	800153e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fbc1 	bl	8000cb0 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	4a9b      	ldr	r2, [pc, #620]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e12b      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153e:	4b98      	ldr	r3, [pc, #608]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x3aa>
 8001548:	e013      	b.n	8001572 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff fbb1 	bl	8000cb0 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	e009      	b.n	8001568 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001554:	f7ff fbac 	bl	8000cb0 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x624>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e116      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	4b8d      	ldr	r3, [pc, #564]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001572:	231f      	movs	r3, #31
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800157c:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	4b87      	ldr	r3, [pc, #540]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001582:	4989      	ldr	r1, [pc, #548]	; (80017a8 <HAL_RCC_OscConfig+0x628>)
 8001584:	400a      	ands	r2, r1
 8001586:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2210      	movs	r2, #16
 800158e:	4013      	ands	r3, r2
 8001590:	d063      	beq.n	800165a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d12a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800159c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015a0:	2104      	movs	r1, #4
 80015a2:	430a      	orrs	r2, r1
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015a6:	4b7e      	ldr	r3, [pc, #504]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015aa:	4b7d      	ldr	r3, [pc, #500]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb7d 	bl	8000cb0 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015bc:	f7ff fb78 	bl	8000cb0 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0e3      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ce:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d0f1      	beq.n	80015bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015d8:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015dc:	22f8      	movs	r2, #248	; 0xf8
 80015de:	4393      	bics	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	00da      	lsls	r2, r3, #3
 80015e8:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
 80015ee:	e034      	b.n	800165a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	3305      	adds	r3, #5
 80015f6:	d111      	bne.n	800161c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015f8:	4b69      	ldr	r3, [pc, #420]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80015fe:	2104      	movs	r1, #4
 8001600:	438a      	bics	r2, r1
 8001602:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001604:	4b66      	ldr	r3, [pc, #408]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	22f8      	movs	r2, #248	; 0xf8
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	00da      	lsls	r2, r3, #3
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001616:	430a      	orrs	r2, r1
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
 800161a:	e01e      	b.n	800165a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800161e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001620:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001622:	2104      	movs	r1, #4
 8001624:	430a      	orrs	r2, r1
 8001626:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800162a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162c:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff fb3c 	bl	8000cb0 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800163e:	f7ff fb37 	bl	8000cb0 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0a2      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001654:	2202      	movs	r2, #2
 8001656:	4013      	ands	r3, r2
 8001658:	d1f1      	bne.n	800163e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d100      	bne.n	8001664 <HAL_RCC_OscConfig+0x4e4>
 8001662:	e097      	b.n	8001794 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001664:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	220c      	movs	r2, #12
 800166a:	4013      	ands	r3, r2
 800166c:	2b08      	cmp	r3, #8
 800166e:	d100      	bne.n	8001672 <HAL_RCC_OscConfig+0x4f2>
 8001670:	e06b      	b.n	800174a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d14c      	bne.n	8001714 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001680:	494a      	ldr	r1, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x62c>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fb13 	bl	8000cb0 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb0e 	bl	8000cb0 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e079      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	049b      	lsls	r3, r3, #18
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ae:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	220f      	movs	r2, #15
 80016b4:	4393      	bics	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <HAL_RCC_OscConfig+0x630>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	431a      	orrs	r2, r3
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	0449      	lsls	r1, r1, #17
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ea:	f7ff fae1 	bl	8000cb0 <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fadc 	bl	8000cb0 <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e047      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	049b      	lsls	r3, r3, #18
 800170e:	4013      	ands	r3, r2
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x574>
 8001712:	e03f      	b.n	8001794 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800171a:	4924      	ldr	r1, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x62c>)
 800171c:	400a      	ands	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fac6 	bl	8000cb0 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fac1 	bl	8000cb0 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e02c      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	049b      	lsls	r3, r3, #18
 8001744:	4013      	ands	r3, r2
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x5aa>
 8001748:	e024      	b.n	8001794 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01f      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x620>)
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	429a      	cmp	r2, r3
 8001770:	d10e      	bne.n	8001790 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	220f      	movs	r2, #15
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	23f0      	movs	r3, #240	; 0xf0
 8001784:	039b      	lsls	r3, r3, #14
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b008      	add	sp, #32
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000
 80017a4:	00001388 	.word	0x00001388
 80017a8:	efffffff 	.word	0xefffffff
 80017ac:	feffffff 	.word	0xfeffffff
 80017b0:	ffc2ffff 	.word	0xffc2ffff

080017b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b3      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4013      	ands	r3, r2
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d911      	bls.n	80017fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	4393      	bics	r3, r2
 80017de:	0019      	movs	r1, r3
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e09a      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d015      	beq.n	8001830 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d006      	beq.n	800181c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001814:	21e0      	movs	r1, #224	; 0xe0
 8001816:	00c9      	lsls	r1, r1, #3
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	22f0      	movs	r2, #240	; 0xf0
 8001822:	4393      	bics	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4013      	ands	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d114      	bne.n	8001878 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06e      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	049b      	lsls	r3, r3, #18
 8001862:	4013      	ands	r3, r2
 8001864:	d108      	bne.n	8001878 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e062      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e05b      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2203      	movs	r2, #3
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa10 	bl	8000cb0 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001894:	e009      	b.n	80018aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001896:	f7ff fa0b 	bl	8000cb0 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a27      	ldr	r2, [pc, #156]	; (8001940 <HAL_RCC_ClockConfig+0x18c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e042      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	220c      	movs	r2, #12
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1ec      	bne.n	8001896 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d211      	bcs.n	80018ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_RCC_ClockConfig+0x184>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e020      	b.n	8001930 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	d009      	beq.n	800190c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x190>)
 80018fe:	4013      	ands	r3, r2
 8001900:	0019      	movs	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800190c:	f000 f820 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8001910:	0001      	movs	r1, r0
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x188>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	220f      	movs	r2, #15
 800191a:	4013      	ands	r3, r2
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_RCC_ClockConfig+0x194>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	000a      	movs	r2, r1
 8001922:	40da      	lsrs	r2, r3
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x198>)
 8001926:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff f97b 	bl	8000c24 <HAL_InitTick>
  
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	00001388 	.word	0x00001388
 8001944:	fffff8ff 	.word	0xfffff8ff
 8001948:	080038d0 	.word	0x080038d0
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08f      	sub	sp, #60	; 0x3c
 8001954:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001956:	2314      	movs	r3, #20
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800195c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800195e:	c313      	stmia	r3!, {r0, r1, r4}
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001968:	ca13      	ldmia	r2!, {r0, r1, r4}
 800196a:	c313      	stmia	r3!, {r0, r1, r4}
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	220c      	movs	r2, #12
 800198e:	4013      	ands	r3, r2
 8001990:	2b04      	cmp	r3, #4
 8001992:	d002      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x4a>
 8001994:	2b08      	cmp	r3, #8
 8001996:	d003      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x50>
 8001998:	e02d      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800199e:	e02d      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	0c9b      	lsrs	r3, r3, #18
 80019a4:	220f      	movs	r2, #15
 80019a6:	4013      	ands	r3, r2
 80019a8:	2214      	movs	r2, #20
 80019aa:	18ba      	adds	r2, r7, r2
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	220f      	movs	r2, #15
 80019b6:	4013      	ands	r3, r2
 80019b8:	1d3a      	adds	r2, r7, #4
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	4013      	ands	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019cc:	f7fe fba6 	bl	800011c <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	001a      	movs	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	4353      	muls	r3, r2
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
 80019da:	e009      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019de:	000a      	movs	r2, r1
 80019e0:	0152      	lsls	r2, r2, #5
 80019e2:	1a52      	subs	r2, r2, r1
 80019e4:	0193      	lsls	r3, r2, #6
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	185b      	adds	r3, r3, r1
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b00f      	add	sp, #60	; 0x3c
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	080038b0 	.word	0x080038b0
 8001a0c:	080038c0 	.word	0x080038c0
 8001a10:	40021000 	.word	0x40021000
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	0001      	movs	r1, r0
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	4013      	ands	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	40d9      	lsrs	r1, r3
 8001a46:	000b      	movs	r3, r1
}    
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080038e0 	.word	0x080038e0

08001a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a74:	e08e      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2017      	movs	r0, #23
 8001a78:	183b      	adds	r3, r7, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	055b      	lsls	r3, r3, #21
 8001a86:	4013      	ands	r3, r2
 8001a88:	d110      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0549      	lsls	r1, r1, #21
 8001a94:	430a      	orrs	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d11a      	bne.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	0049      	lsls	r1, r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8f3 	bl	8000cb0 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	e008      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad0:	f7ff f8ee 	bl	8000cb0 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e077      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d034      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d02c      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0249      	lsls	r1, r1, #9
 8001b24:	430a      	orrs	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2e:	492e      	ldr	r1, [pc, #184]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff f8b5 	bl	8000cb0 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f8b0 	bl	8000cb0 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a25      	ldr	r2, [pc, #148]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e038      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b7e:	2317      	movs	r3, #23
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8e:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b006      	add	sp, #24
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40007000 	.word	0x40007000
 8001be4:	fffffcff 	.word	0xfffffcff
 8001be8:	fffeffff 	.word	0xfffeffff
 8001bec:	00001388 	.word	0x00001388
 8001bf0:	efffffff 	.word	0xefffffff

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e042      	b.n	8001c8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	223d      	movs	r2, #61	; 0x3d
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	223c      	movs	r2, #60	; 0x3c
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7fe fec7 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	223d      	movs	r2, #61	; 0x3d
 8001c26:	2102      	movs	r1, #2
 8001c28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3304      	adds	r3, #4
 8001c32:	0019      	movs	r1, r3
 8001c34:	0010      	movs	r0, r2
 8001c36:	f000 fab7 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2246      	movs	r2, #70	; 0x46
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223e      	movs	r2, #62	; 0x3e
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	223f      	movs	r2, #63	; 0x3f
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2241      	movs	r2, #65	; 0x41
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2242      	movs	r2, #66	; 0x42
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2243      	movs	r2, #67	; 0x43
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2244      	movs	r2, #68	; 0x44
 8001c76:	2101      	movs	r1, #1
 8001c78:	5499      	strb	r1, [r3, r2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2245      	movs	r2, #69	; 0x45
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223d      	movs	r2, #61	; 0x3d
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e042      	b.n	8001d2c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223d      	movs	r2, #61	; 0x3d
 8001caa:	5c9b      	ldrb	r3, [r3, r2]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	223c      	movs	r2, #60	; 0x3c
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 f839 	bl	8001d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223d      	movs	r2, #61	; 0x3d
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	0010      	movs	r0, r2
 8001cd6:	f000 fa67 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2246      	movs	r2, #70	; 0x46
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223e      	movs	r2, #62	; 0x3e
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223f      	movs	r2, #63	; 0x3f
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2241      	movs	r2, #65	; 0x41
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2242      	movs	r2, #66	; 0x42
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2243      	movs	r2, #67	; 0x43
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2244      	movs	r2, #68	; 0x44
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2245      	movs	r2, #69	; 0x45
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	223d      	movs	r2, #61	; 0x3d
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <HAL_TIM_PWM_Start+0x22>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	223e      	movs	r2, #62	; 0x3e
 8001d58:	5c9b      	ldrb	r3, [r3, r2]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	4193      	sbcs	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e01f      	b.n	8001da6 <HAL_TIM_PWM_Start+0x62>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d108      	bne.n	8001d7e <HAL_TIM_PWM_Start+0x3a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	223f      	movs	r2, #63	; 0x3f
 8001d70:	5c9b      	ldrb	r3, [r3, r2]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	4193      	sbcs	r3, r2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	e013      	b.n	8001da6 <HAL_TIM_PWM_Start+0x62>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d108      	bne.n	8001d96 <HAL_TIM_PWM_Start+0x52>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	5c9b      	ldrb	r3, [r3, r2]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	4193      	sbcs	r3, r2
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	e007      	b.n	8001da6 <HAL_TIM_PWM_Start+0x62>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2241      	movs	r2, #65	; 0x41
 8001d9a:	5c9b      	ldrb	r3, [r3, r2]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	4193      	sbcs	r3, r2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06a      	b.n	8001e84 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d104      	bne.n	8001dbe <HAL_TIM_PWM_Start+0x7a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	223e      	movs	r2, #62	; 0x3e
 8001db8:	2102      	movs	r1, #2
 8001dba:	5499      	strb	r1, [r3, r2]
 8001dbc:	e013      	b.n	8001de6 <HAL_TIM_PWM_Start+0xa2>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d104      	bne.n	8001dce <HAL_TIM_PWM_Start+0x8a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	223f      	movs	r2, #63	; 0x3f
 8001dc8:	2102      	movs	r1, #2
 8001dca:	5499      	strb	r1, [r3, r2]
 8001dcc:	e00b      	b.n	8001de6 <HAL_TIM_PWM_Start+0xa2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0x9a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	2102      	movs	r1, #2
 8001dda:	5499      	strb	r1, [r3, r2]
 8001ddc:	e003      	b.n	8001de6 <HAL_TIM_PWM_Start+0xa2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2241      	movs	r2, #65	; 0x41
 8001de2:	2102      	movs	r1, #2
 8001de4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6839      	ldr	r1, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fcca 	bl	8002788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <HAL_TIM_PWM_Start+0x148>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_TIM_PWM_Start+0xce>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_TIM_PWM_Start+0x14c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_TIM_PWM_Start+0xce>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	; (8001e94 <HAL_TIM_PWM_Start+0x150>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PWM_Start+0xd2>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_TIM_PWM_Start+0xd4>
 8001e16:	2300      	movs	r3, #0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0209      	lsls	r1, r1, #8
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_TIM_PWM_Start+0x148>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00a      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x10a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	05db      	lsls	r3, r3, #23
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d004      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x10a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_TIM_PWM_Start+0x154>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d111      	bne.n	8001e72 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2207      	movs	r2, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d010      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	e007      	b.n	8001e82 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40014800 	.word	0x40014800
 8001e98:	40000400 	.word	0x40000400

08001e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	223c      	movs	r2, #60	; 0x3c
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0a7      	b.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	223c      	movs	r2, #60	; 0x3c
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d100      	bne.n	8001ec6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001ec4:	e076      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d900      	bls.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ecc:	e095      	b.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d04e      	beq.n	8001f72 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d900      	bls.n	8001edc <HAL_TIM_PWM_ConfigChannel+0x40>
 8001eda:	e08e      	b.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x15e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d021      	beq.n	8001f2c <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001ee8:	e087      	b.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f9ce 	bl	8002294 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2108      	movs	r1, #8
 8001f04:	430a      	orrs	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2104      	movs	r1, #4
 8001f14:	438a      	bics	r2, r1
 8001f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6999      	ldr	r1, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	619a      	str	r2, [r3, #24]
      break;
 8001f2a:	e067      	b.n	8001ffc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	0011      	movs	r1, r2
 8001f34:	0018      	movs	r0, r3
 8001f36:	f000 fa2b 	bl	8002390 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0109      	lsls	r1, r1, #4
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	492e      	ldr	r1, [pc, #184]	; (8002010 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	021a      	lsls	r2, r3, #8
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	619a      	str	r2, [r3, #24]
      break;
 8001f70:	e044      	b.n	8001ffc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	0011      	movs	r1, r2
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 fa86 	bl	800248c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69d9      	ldr	r1, [r3, #28]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
      break;
 8001fb2:	e023      	b.n	8001ffc <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 fae5 	bl	800258c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0109      	lsls	r1, r1, #4
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8001fe0:	400a      	ands	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69d9      	ldr	r1, [r3, #28]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	021a      	lsls	r2, r3, #8
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
      break;
 8001ff8:	e000      	b.n	8001ffc <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 8001ffa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	223c      	movs	r2, #60	; 0x3c
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	fffffbff 	.word	0xfffffbff

08002014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223c      	movs	r2, #60	; 0x3c
 8002022:	5c9b      	ldrb	r3, [r3, r2]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_TIM_ConfigClockSource+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e0b7      	b.n	800219c <HAL_TIM_ConfigClockSource+0x188>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	223c      	movs	r2, #60	; 0x3c
 8002030:	2101      	movs	r1, #1
 8002032:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	223d      	movs	r2, #61	; 0x3d
 8002038:	2102      	movs	r1, #2
 800203a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2277      	movs	r2, #119	; 0x77
 8002048:	4393      	bics	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_TIM_ConfigClockSource+0x190>)
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	0192      	lsls	r2, r2, #6
 8002064:	4293      	cmp	r3, r2
 8002066:	d040      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xd6>
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	0192      	lsls	r2, r2, #6
 800206c:	4293      	cmp	r3, r2
 800206e:	d900      	bls.n	8002072 <HAL_TIM_ConfigClockSource+0x5e>
 8002070:	e088      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	0152      	lsls	r2, r2, #5
 8002076:	4293      	cmp	r3, r2
 8002078:	d100      	bne.n	800207c <HAL_TIM_ConfigClockSource+0x68>
 800207a:	e085      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x174>
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	0152      	lsls	r2, r2, #5
 8002080:	4293      	cmp	r3, r2
 8002082:	d900      	bls.n	8002086 <HAL_TIM_ConfigClockSource+0x72>
 8002084:	e07e      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 8002086:	2b70      	cmp	r3, #112	; 0x70
 8002088:	d018      	beq.n	80020bc <HAL_TIM_ConfigClockSource+0xa8>
 800208a:	d900      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x7a>
 800208c:	e07a      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 800208e:	2b60      	cmp	r3, #96	; 0x60
 8002090:	d04f      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x11e>
 8002092:	d900      	bls.n	8002096 <HAL_TIM_ConfigClockSource+0x82>
 8002094:	e076      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 8002096:	2b50      	cmp	r3, #80	; 0x50
 8002098:	d03b      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0xfe>
 800209a:	d900      	bls.n	800209e <HAL_TIM_ConfigClockSource+0x8a>
 800209c:	e072      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d057      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x13e>
 80020a2:	d900      	bls.n	80020a6 <HAL_TIM_ConfigClockSource+0x92>
 80020a4:	e06e      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 80020a6:	2b30      	cmp	r3, #48	; 0x30
 80020a8:	d063      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x15e>
 80020aa:	d86b      	bhi.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d060      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x15e>
 80020b0:	d868      	bhi.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d05d      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x15e>
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d05b      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80020ba:	e063      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f000 fb3c 	bl	8002748 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2277      	movs	r2, #119	; 0x77
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	609a      	str	r2, [r3, #8]
      break;
 80020e8:	e04f      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f000 fb25 	bl	8002748 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	01c9      	lsls	r1, r1, #7
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
      break;
 8002110:	e03b      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	001a      	movs	r2, r3
 8002120:	f000 fa98 	bl	8002654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2150      	movs	r1, #80	; 0x50
 800212a:	0018      	movs	r0, r3
 800212c:	f000 faf2 	bl	8002714 <TIM_ITRx_SetConfig>
      break;
 8002130:	e02b      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	001a      	movs	r2, r3
 8002140:	f000 fab6 	bl	80026b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2160      	movs	r1, #96	; 0x60
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fae2 	bl	8002714 <TIM_ITRx_SetConfig>
      break;
 8002150:	e01b      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	001a      	movs	r2, r3
 8002160:	f000 fa78 	bl	8002654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fad2 	bl	8002714 <TIM_ITRx_SetConfig>
      break;
 8002170:	e00b      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	0010      	movs	r0, r2
 800217e:	f000 fac9 	bl	8002714 <TIM_ITRx_SetConfig>
        break;
 8002182:	e002      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	e000      	b.n	800218a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002188:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	223d      	movs	r2, #61	; 0x3d
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223c      	movs	r2, #60	; 0x3c
 8002196:	2100      	movs	r1, #0
 8002198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	ffff00ff 	.word	0xffff00ff

080021a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a30      	ldr	r2, [pc, #192]	; (800227c <TIM_Base_SetConfig+0xd4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d008      	beq.n	80021d2 <TIM_Base_SetConfig+0x2a>
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	05db      	lsls	r3, r3, #23
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x2a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	; (8002280 <TIM_Base_SetConfig+0xd8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2270      	movs	r2, #112	; 0x70
 80021d6:	4393      	bics	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0xd4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d014      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d00f      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <TIM_Base_SetConfig+0xd8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <TIM_Base_SetConfig+0xdc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <TIM_Base_SetConfig+0xe0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0x6e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <TIM_Base_SetConfig+0xe4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <TIM_Base_SetConfig+0xe8>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	4393      	bics	r3, r2
 800222e:	001a      	movs	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <TIM_Base_SetConfig+0xd4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0xbe>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <TIM_Base_SetConfig+0xe0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0xbe>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <TIM_Base_SetConfig+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d103      	bne.n	800226e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	615a      	str	r2, [r3, #20]
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40000400 	.word	0x40000400
 8002284:	40002000 	.word	0x40002000
 8002288:	40014400 	.word	0x40014400
 800228c:	40014800 	.word	0x40014800
 8002290:	fffffcff 	.word	0xfffffcff

08002294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4393      	bics	r3, r2
 80022a6:	001a      	movs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2270      	movs	r2, #112	; 0x70
 80022c2:	4393      	bics	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4393      	bics	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2202      	movs	r2, #2
 80022dc:	4393      	bics	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <TIM_OC1_SetConfig+0xe8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <TIM_OC1_SetConfig+0x6e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <TIM_OC1_SetConfig+0xec>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_OC1_SetConfig+0x6e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <TIM_OC1_SetConfig+0xf0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10c      	bne.n	800231c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2208      	movs	r2, #8
 8002306:	4393      	bics	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2204      	movs	r2, #4
 8002318:	4393      	bics	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <TIM_OC1_SetConfig+0xe8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <TIM_OC1_SetConfig+0xa0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <TIM_OC1_SetConfig+0xec>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_OC1_SetConfig+0xa0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <TIM_OC1_SetConfig+0xf0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <TIM_OC1_SetConfig+0xf4>)
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <TIM_OC1_SetConfig+0xf8>)
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b006      	add	sp, #24
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40014400 	.word	0x40014400
 8002384:	40014800 	.word	0x40014800
 8002388:	fffffeff 	.word	0xfffffeff
 800238c:	fffffdff 	.word	0xfffffdff

08002390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2210      	movs	r2, #16
 80023a0:	4393      	bics	r3, r2
 80023a2:	001a      	movs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <TIM_OC2_SetConfig+0xe0>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <TIM_OC2_SetConfig+0xe4>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2220      	movs	r2, #32
 80023da:	4393      	bics	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <TIM_OC2_SetConfig+0xe8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10d      	bne.n	800240e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	4393      	bics	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	4393      	bics	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <TIM_OC2_SetConfig+0xe8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <TIM_OC2_SetConfig+0x96>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <TIM_OC2_SetConfig+0xec>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d003      	beq.n	8002426 <TIM_OC2_SetConfig+0x96>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <TIM_OC2_SetConfig+0xf0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d113      	bne.n	800244e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <TIM_OC2_SetConfig+0xf4>)
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <TIM_OC2_SetConfig+0xf8>)
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	621a      	str	r2, [r3, #32]
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b006      	add	sp, #24
 800246e:	bd80      	pop	{r7, pc}
 8002470:	ffff8fff 	.word	0xffff8fff
 8002474:	fffffcff 	.word	0xfffffcff
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800
 8002484:	fffffbff 	.word	0xfffffbff
 8002488:	fffff7ff 	.word	0xfffff7ff

0800248c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a33      	ldr	r2, [pc, #204]	; (8002568 <TIM_OC3_SetConfig+0xdc>)
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2270      	movs	r2, #112	; 0x70
 80024b8:	4393      	bics	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2203      	movs	r2, #3
 80024c0:	4393      	bics	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	4a26      	ldr	r2, [pc, #152]	; (800256c <TIM_OC3_SetConfig+0xe0>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <TIM_OC3_SetConfig+0xe4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10d      	bne.n	8002506 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <TIM_OC3_SetConfig+0xe8>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <TIM_OC3_SetConfig+0xec>)
 8002502:	4013      	ands	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <TIM_OC3_SetConfig+0xe4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_OC3_SetConfig+0x92>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <TIM_OC3_SetConfig+0xf0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_OC3_SetConfig+0x92>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <TIM_OC3_SetConfig+0xf4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d113      	bne.n	8002546 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a18      	ldr	r2, [pc, #96]	; (8002584 <TIM_OC3_SetConfig+0xf8>)
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <TIM_OC3_SetConfig+0xfc>)
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	621a      	str	r2, [r3, #32]
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b006      	add	sp, #24
 8002566:	bd80      	pop	{r7, pc}
 8002568:	fffffeff 	.word	0xfffffeff
 800256c:	fffffdff 	.word	0xfffffdff
 8002570:	40012c00 	.word	0x40012c00
 8002574:	fffff7ff 	.word	0xfffff7ff
 8002578:	fffffbff 	.word	0xfffffbff
 800257c:	40014400 	.word	0x40014400
 8002580:	40014800 	.word	0x40014800
 8002584:	ffffefff 	.word	0xffffefff
 8002588:	ffffdfff 	.word	0xffffdfff

0800258c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a26      	ldr	r2, [pc, #152]	; (8002634 <TIM_OC4_SetConfig+0xa8>)
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a20      	ldr	r2, [pc, #128]	; (8002638 <TIM_OC4_SetConfig+0xac>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <TIM_OC4_SetConfig+0xb0>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <TIM_OC4_SetConfig+0xb4>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	031b      	lsls	r3, r3, #12
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <TIM_OC4_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_OC4_SetConfig+0x70>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a16      	ldr	r2, [pc, #88]	; (8002648 <TIM_OC4_SetConfig+0xbc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_OC4_SetConfig+0x70>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <TIM_OC4_SetConfig+0xc0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d109      	bne.n	8002610 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <TIM_OC4_SetConfig+0xc4>)
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	019b      	lsls	r3, r3, #6
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b006      	add	sp, #24
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	ffffefff 	.word	0xffffefff
 8002638:	ffff8fff 	.word	0xffff8fff
 800263c:	fffffcff 	.word	0xfffffcff
 8002640:	ffffdfff 	.word	0xffffdfff
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40014400 	.word	0x40014400
 800264c:	40014800 	.word	0x40014800
 8002650:	ffffbfff 	.word	0xffffbfff

08002654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	2201      	movs	r2, #1
 800266c:	4393      	bics	r3, r2
 800266e:	001a      	movs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	22f0      	movs	r2, #240	; 0xf0
 800267e:	4393      	bics	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	220a      	movs	r2, #10
 8002690:	4393      	bics	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	621a      	str	r2, [r3, #32]
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b006      	add	sp, #24
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	2210      	movs	r2, #16
 80026c2:	4393      	bics	r3, r2
 80026c4:	001a      	movs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <TIM_TI2_ConfigInputStage+0x60>)
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	031b      	lsls	r3, r3, #12
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	22a0      	movs	r2, #160	; 0xa0
 80026ec:	4393      	bics	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b006      	add	sp, #24
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	ffff0fff 	.word	0xffff0fff

08002714 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2270      	movs	r2, #112	; 0x70
 8002728:	4393      	bics	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	2207      	movs	r2, #7
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	609a      	str	r2, [r3, #8]
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <TIM_ETR_SetConfig+0x3c>)
 8002760:	4013      	ands	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	021a      	lsls	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	431a      	orrs	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	ffff00ff 	.word	0xffff00ff

08002788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	221f      	movs	r2, #31
 8002798:	4013      	ands	r3, r2
 800279a:	2201      	movs	r2, #1
 800279c:	409a      	lsls	r2, r3
 800279e:	0013      	movs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	43d2      	mvns	r2, r2
 80027aa:	401a      	ands	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	211f      	movs	r1, #31
 80027b8:	400b      	ands	r3, r1
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4099      	lsls	r1, r3
 80027be:	000b      	movs	r3, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b006      	add	sp, #24
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	223c      	movs	r2, #60	; 0x3c
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e042      	b.n	800286e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	223c      	movs	r2, #60	; 0x3c
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	223d      	movs	r2, #61	; 0x3d
 80027f4:	2102      	movs	r1, #2
 80027f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2270      	movs	r2, #112	; 0x70
 800280c:	4393      	bics	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00a      	beq.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	05db      	lsls	r3, r3, #23
 8002834:	429a      	cmp	r2, r3
 8002836:	d004      	beq.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	4393      	bics	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4313      	orrs	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	223d      	movs	r2, #61	; 0x3d
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	223c      	movs	r2, #60	; 0x3c
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40000400 	.word	0x40000400

08002880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e044      	b.n	800291c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2274      	movs	r2, #116	; 0x74
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe f8dd 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2224      	movs	r2, #36	; 0x24
 80028ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	438a      	bics	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 f8da 	bl	8002a7c <UART_SetConfig>
 80028c8:	0003      	movs	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e024      	b.n	800291c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 f9f7 	bl	8002cd0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_UART_Init+0xa4>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	212a      	movs	r1, #42	; 0x2a
 80028fe:	438a      	bics	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fa8f 	bl	8002e38 <UART_CheckIdleState>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	ffffb7ff 	.word	0xffffb7ff

08002928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293c:	2b20      	cmp	r3, #32
 800293e:	d000      	beq.n	8002942 <HAL_UART_Transmit+0x1a>
 8002940:	e096      	b.n	8002a70 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_UART_Transmit+0x28>
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e08e      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	429a      	cmp	r2, r3
 800295e:	d109      	bne.n	8002974 <HAL_UART_Transmit+0x4c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07e      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2274      	movs	r2, #116	; 0x74
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_UART_Transmit+0x5a>
 800297e:	2302      	movs	r3, #2
 8002980:	e077      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2274      	movs	r2, #116	; 0x74
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	2100      	movs	r1, #0
 8002990:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002998:	f7fe f98a 	bl	8000cb0 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1dba      	adds	r2, r7, #6
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	8812      	ldrh	r2, [r2, #0]
 80029a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1dba      	adds	r2, r7, #6
 80029ae:	2152      	movs	r1, #82	; 0x52
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	429a      	cmp	r2, r3
 80029be:	d108      	bne.n	80029d2 <HAL_UART_Transmit+0xaa>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e003      	b.n	80029da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2274      	movs	r2, #116	; 0x74
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80029e2:	e02d      	b.n	8002a40 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	0013      	movs	r3, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	f000 fa69 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e039      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	05d2      	lsls	r2, r2, #23
 8002a0e:	0dd2      	lsrs	r2, r2, #23
 8002a10:	b292      	uxth	r2, r2
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3302      	adds	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e008      	b.n	8002a2e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2252      	movs	r2, #82	; 0x52
 8002a32:	5a9b      	ldrh	r3, [r3, r2]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2252      	movs	r2, #82	; 0x52
 8002a3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2252      	movs	r2, #82	; 0x52
 8002a44:	5a9b      	ldrh	r3, [r3, r2]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1cb      	bne.n	80029e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	f000 fa35 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e005      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b008      	add	sp, #32
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a84:	231e      	movs	r3, #30
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a84      	ldr	r2, [pc, #528]	; (8002cbc <UART_SetConfig+0x240>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a7f      	ldr	r2, [pc, #508]	; (8002cc0 <UART_SetConfig+0x244>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a76      	ldr	r2, [pc, #472]	; (8002cc4 <UART_SetConfig+0x248>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af8:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <UART_SetConfig+0x24c>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	2203      	movs	r2, #3
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d00d      	beq.n	8002b20 <UART_SetConfig+0xa4>
 8002b04:	d81b      	bhi.n	8002b3e <UART_SetConfig+0xc2>
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d014      	beq.n	8002b34 <UART_SetConfig+0xb8>
 8002b0a:	d818      	bhi.n	8002b3e <UART_SetConfig+0xc2>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <UART_SetConfig+0x9a>
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d00a      	beq.n	8002b2a <UART_SetConfig+0xae>
 8002b14:	e013      	b.n	8002b3e <UART_SetConfig+0xc2>
 8002b16:	231f      	movs	r3, #31
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e012      	b.n	8002b46 <UART_SetConfig+0xca>
 8002b20:	231f      	movs	r3, #31
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e00d      	b.n	8002b46 <UART_SetConfig+0xca>
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2204      	movs	r2, #4
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e008      	b.n	8002b46 <UART_SetConfig+0xca>
 8002b34:	231f      	movs	r3, #31
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2208      	movs	r2, #8
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e003      	b.n	8002b46 <UART_SetConfig+0xca>
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2210      	movs	r2, #16
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d15d      	bne.n	8002c10 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8002b54:	231f      	movs	r3, #31
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d015      	beq.n	8002b8a <UART_SetConfig+0x10e>
 8002b5e:	dc18      	bgt.n	8002b92 <UART_SetConfig+0x116>
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00d      	beq.n	8002b80 <UART_SetConfig+0x104>
 8002b64:	dc15      	bgt.n	8002b92 <UART_SetConfig+0x116>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <UART_SetConfig+0xf4>
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d005      	beq.n	8002b7a <UART_SetConfig+0xfe>
 8002b6e:	e010      	b.n	8002b92 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b70:	f7fe ff5c 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002b74:	0003      	movs	r3, r0
 8002b76:	61bb      	str	r3, [r7, #24]
        break;
 8002b78:	e012      	b.n	8002ba0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b7a:	4b54      	ldr	r3, [pc, #336]	; (8002ccc <UART_SetConfig+0x250>)
 8002b7c:	61bb      	str	r3, [r7, #24]
        break;
 8002b7e:	e00f      	b.n	8002ba0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b80:	f7fe fee6 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8002b84:	0003      	movs	r3, r0
 8002b86:	61bb      	str	r3, [r7, #24]
        break;
 8002b88:	e00a      	b.n	8002ba0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	61bb      	str	r3, [r7, #24]
        break;
 8002b90:	e006      	b.n	8002ba0 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b96:	231e      	movs	r3, #30
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
        break;
 8002b9e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d100      	bne.n	8002ba8 <UART_SetConfig+0x12c>
 8002ba6:	e07b      	b.n	8002ca0 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	005a      	lsls	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	18d2      	adds	r2, r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0019      	movs	r1, r3
 8002bba:	0010      	movs	r0, r2
 8002bbc:	f7fd faae 	bl	800011c <__udivsi3>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d91c      	bls.n	8002c06 <UART_SetConfig+0x18a>
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d217      	bcs.n	8002c06 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	200e      	movs	r0, #14
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	210f      	movs	r1, #15
 8002be0:	438a      	bics	r2, r1
 8002be2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	b299      	uxth	r1, r3
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	183a      	adds	r2, r7, r0
 8002bf4:	8812      	ldrh	r2, [r2, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	183a      	adds	r2, r7, r0
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	e04c      	b.n	8002ca0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002c06:	231e      	movs	r3, #30
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
 8002c0e:	e047      	b.n	8002ca0 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c10:	231f      	movs	r3, #31
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d015      	beq.n	8002c46 <UART_SetConfig+0x1ca>
 8002c1a:	dc18      	bgt.n	8002c4e <UART_SetConfig+0x1d2>
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00d      	beq.n	8002c3c <UART_SetConfig+0x1c0>
 8002c20:	dc15      	bgt.n	8002c4e <UART_SetConfig+0x1d2>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <UART_SetConfig+0x1b0>
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d005      	beq.n	8002c36 <UART_SetConfig+0x1ba>
 8002c2a:	e010      	b.n	8002c4e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f7fe fefe 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e012      	b.n	8002c5c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <UART_SetConfig+0x250>)
 8002c38:	61bb      	str	r3, [r7, #24]
        break;
 8002c3a:	e00f      	b.n	8002c5c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3c:	f7fe fe88 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8002c40:	0003      	movs	r3, r0
 8002c42:	61bb      	str	r3, [r7, #24]
        break;
 8002c44:	e00a      	b.n	8002c5c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	61bb      	str	r3, [r7, #24]
        break;
 8002c4c:	e006      	b.n	8002c5c <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c52:	231e      	movs	r3, #30
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
        break;
 8002c5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01e      	beq.n	8002ca0 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	085a      	lsrs	r2, r3, #1
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	18d2      	adds	r2, r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0019      	movs	r1, r3
 8002c72:	0010      	movs	r0, r2
 8002c74:	f7fd fa52 	bl	800011c <__udivsi3>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d909      	bls.n	8002c98 <UART_SetConfig+0x21c>
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	025b      	lsls	r3, r3, #9
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d204      	bcs.n	8002c98 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e003      	b.n	8002ca0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8002c98:	231e      	movs	r3, #30
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002cac:	231e      	movs	r3, #30
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b008      	add	sp, #32
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	ffff69f3 	.word	0xffff69f3
 8002cc0:	ffffcfff 	.word	0xffffcfff
 8002cc4:	fffff4ff 	.word	0xfffff4ff
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200

08002cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <UART_AdvFeatureConfig+0x144>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4a43      	ldr	r2, [pc, #268]	; (8002e18 <UART_AdvFeatureConfig+0x148>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2204      	movs	r2, #4
 8002d22:	4013      	ands	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <UART_AdvFeatureConfig+0x14c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2208      	movs	r2, #8
 8002d44:	4013      	ands	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <UART_AdvFeatureConfig+0x150>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2210      	movs	r2, #16
 8002d66:	4013      	ands	r3, r2
 8002d68:	d00b      	beq.n	8002d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <UART_AdvFeatureConfig+0x154>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2220      	movs	r2, #32
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <UART_AdvFeatureConfig+0x158>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	4013      	ands	r3, r2
 8002dac:	d01d      	beq.n	8002dea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <UART_AdvFeatureConfig+0x15c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	035b      	lsls	r3, r3, #13
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10b      	bne.n	8002dea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <UART_AdvFeatureConfig+0x160>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	0019      	movs	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	4013      	ands	r3, r2
 8002df2:	d00b      	beq.n	8002e0c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <UART_AdvFeatureConfig+0x164>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	fffdffff 	.word	0xfffdffff
 8002e18:	fffeffff 	.word	0xfffeffff
 8002e1c:	fffbffff 	.word	0xfffbffff
 8002e20:	ffff7fff 	.word	0xffff7fff
 8002e24:	ffffefff 	.word	0xffffefff
 8002e28:	ffffdfff 	.word	0xffffdfff
 8002e2c:	ffefffff 	.word	0xffefffff
 8002e30:	ff9fffff 	.word	0xff9fffff
 8002e34:	fff7ffff 	.word	0xfff7ffff

08002e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	2100      	movs	r1, #0
 8002e46:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e48:	f7fd ff32 	bl	8000cb0 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2208      	movs	r2, #8
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d10c      	bne.n	8002e78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	0391      	lsls	r1, r2, #14
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <UART_CheckIdleState+0x8c>)
 8002e68:	9200      	str	r2, [sp, #0]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f000 f82c 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d001      	beq.n	8002e78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e021      	b.n	8002ebc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d10c      	bne.n	8002ea0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	03d1      	lsls	r1, r2, #15
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <UART_CheckIdleState+0x8c>)
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f000 f818 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d001      	beq.n	8002ea0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e00d      	b.n	8002ebc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2274      	movs	r2, #116	; 0x74
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b004      	add	sp, #16
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	01ffffff 	.word	0x01ffffff

08002ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	e05e      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d05b      	beq.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fd fee6 	bl	8000cb0 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11b      	bne.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	492f      	ldr	r1, [pc, #188]	; (8002fc0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	438a      	bics	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2274      	movs	r2, #116	; 0x74
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e044      	b.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2204      	movs	r2, #4
 8002f36:	4013      	ands	r3, r2
 8002f38:	d02e      	beq.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	401a      	ands	r2, r3
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d124      	bne.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4917      	ldr	r1, [pc, #92]	; (8002fc0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	438a      	bics	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	2120      	movs	r1, #32
 8002f8a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2274      	movs	r2, #116	; 0x74
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	425a      	negs	r2, r3
 8002fa8:	4153      	adcs	r3, r2
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	001a      	movs	r2, r3
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d091      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	fffffe5f 	.word	0xfffffe5f

08002fc4 <__errno>:
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <__errno+0x8>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	2000000c 	.word	0x2000000c

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4d0c      	ldr	r5, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	f000 fc47 	bl	8003874 <_init>
 8002fe6:	4d0a      	ldr	r5, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	00b3      	lsls	r3, r6, #2
 8002ff6:	58eb      	ldr	r3, [r5, r3]
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	00b3      	lsls	r3, r6, #2
 8003000:	58eb      	ldr	r3, [r5, r3]
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	0800391c 	.word	0x0800391c
 800300c:	0800391c 	.word	0x0800391c
 8003010:	0800391c 	.word	0x0800391c
 8003014:	08003920 	.word	0x08003920

08003018 <memset>:
 8003018:	0003      	movs	r3, r0
 800301a:	1882      	adds	r2, r0, r2
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	7019      	strb	r1, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <siprintf>:
 8003028:	b40e      	push	{r1, r2, r3}
 800302a:	b500      	push	{lr}
 800302c:	490b      	ldr	r1, [pc, #44]	; (800305c <siprintf+0x34>)
 800302e:	b09c      	sub	sp, #112	; 0x70
 8003030:	ab1d      	add	r3, sp, #116	; 0x74
 8003032:	9002      	str	r0, [sp, #8]
 8003034:	9006      	str	r0, [sp, #24]
 8003036:	9107      	str	r1, [sp, #28]
 8003038:	9104      	str	r1, [sp, #16]
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <siprintf+0x38>)
 800303c:	4909      	ldr	r1, [pc, #36]	; (8003064 <siprintf+0x3c>)
 800303e:	cb04      	ldmia	r3!, {r2}
 8003040:	9105      	str	r1, [sp, #20]
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	a902      	add	r1, sp, #8
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	f000 f870 	bl	800312c <_svfiprintf_r>
 800304c:	2300      	movs	r3, #0
 800304e:	9a02      	ldr	r2, [sp, #8]
 8003050:	7013      	strb	r3, [r2, #0]
 8003052:	b01c      	add	sp, #112	; 0x70
 8003054:	bc08      	pop	{r3}
 8003056:	b003      	add	sp, #12
 8003058:	4718      	bx	r3
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	7fffffff 	.word	0x7fffffff
 8003060:	2000000c 	.word	0x2000000c
 8003064:	ffff0208 	.word	0xffff0208

08003068 <__ssputs_r>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	688e      	ldr	r6, [r1, #8]
 800306c:	b085      	sub	sp, #20
 800306e:	0007      	movs	r7, r0
 8003070:	000c      	movs	r4, r1
 8003072:	9203      	str	r2, [sp, #12]
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	429e      	cmp	r6, r3
 8003078:	d83c      	bhi.n	80030f4 <__ssputs_r+0x8c>
 800307a:	2390      	movs	r3, #144	; 0x90
 800307c:	898a      	ldrh	r2, [r1, #12]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	421a      	tst	r2, r3
 8003082:	d034      	beq.n	80030ee <__ssputs_r+0x86>
 8003084:	2503      	movs	r5, #3
 8003086:	6909      	ldr	r1, [r1, #16]
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	1a5b      	subs	r3, r3, r1
 800308c:	9302      	str	r3, [sp, #8]
 800308e:	6963      	ldr	r3, [r4, #20]
 8003090:	9802      	ldr	r0, [sp, #8]
 8003092:	435d      	muls	r5, r3
 8003094:	0feb      	lsrs	r3, r5, #31
 8003096:	195d      	adds	r5, r3, r5
 8003098:	9b01      	ldr	r3, [sp, #4]
 800309a:	106d      	asrs	r5, r5, #1
 800309c:	3301      	adds	r3, #1
 800309e:	181b      	adds	r3, r3, r0
 80030a0:	42ab      	cmp	r3, r5
 80030a2:	d900      	bls.n	80030a6 <__ssputs_r+0x3e>
 80030a4:	001d      	movs	r5, r3
 80030a6:	0553      	lsls	r3, r2, #21
 80030a8:	d532      	bpl.n	8003110 <__ssputs_r+0xa8>
 80030aa:	0029      	movs	r1, r5
 80030ac:	0038      	movs	r0, r7
 80030ae:	f000 fb31 	bl	8003714 <_malloc_r>
 80030b2:	1e06      	subs	r6, r0, #0
 80030b4:	d109      	bne.n	80030ca <__ssputs_r+0x62>
 80030b6:	230c      	movs	r3, #12
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	2001      	movs	r0, #1
 80030be:	89a2      	ldrh	r2, [r4, #12]
 80030c0:	4240      	negs	r0, r0
 80030c2:	4313      	orrs	r3, r2
 80030c4:	81a3      	strh	r3, [r4, #12]
 80030c6:	b005      	add	sp, #20
 80030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ca:	9a02      	ldr	r2, [sp, #8]
 80030cc:	6921      	ldr	r1, [r4, #16]
 80030ce:	f000 faba 	bl	8003646 <memcpy>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <__ssputs_r+0xc0>)
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	4313      	orrs	r3, r2
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	9b02      	ldr	r3, [sp, #8]
 80030e0:	6126      	str	r6, [r4, #16]
 80030e2:	18f6      	adds	r6, r6, r3
 80030e4:	6026      	str	r6, [r4, #0]
 80030e6:	6165      	str	r5, [r4, #20]
 80030e8:	9e01      	ldr	r6, [sp, #4]
 80030ea:	1aed      	subs	r5, r5, r3
 80030ec:	60a5      	str	r5, [r4, #8]
 80030ee:	9b01      	ldr	r3, [sp, #4]
 80030f0:	429e      	cmp	r6, r3
 80030f2:	d900      	bls.n	80030f6 <__ssputs_r+0x8e>
 80030f4:	9e01      	ldr	r6, [sp, #4]
 80030f6:	0032      	movs	r2, r6
 80030f8:	9903      	ldr	r1, [sp, #12]
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	f000 faac 	bl	8003658 <memmove>
 8003100:	68a3      	ldr	r3, [r4, #8]
 8003102:	2000      	movs	r0, #0
 8003104:	1b9b      	subs	r3, r3, r6
 8003106:	60a3      	str	r3, [r4, #8]
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	199e      	adds	r6, r3, r6
 800310c:	6026      	str	r6, [r4, #0]
 800310e:	e7da      	b.n	80030c6 <__ssputs_r+0x5e>
 8003110:	002a      	movs	r2, r5
 8003112:	0038      	movs	r0, r7
 8003114:	f000 fb5c 	bl	80037d0 <_realloc_r>
 8003118:	1e06      	subs	r6, r0, #0
 800311a:	d1e0      	bne.n	80030de <__ssputs_r+0x76>
 800311c:	0038      	movs	r0, r7
 800311e:	6921      	ldr	r1, [r4, #16]
 8003120:	f000 faae 	bl	8003680 <_free_r>
 8003124:	e7c7      	b.n	80030b6 <__ssputs_r+0x4e>
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	fffffb7f 	.word	0xfffffb7f

0800312c <_svfiprintf_r>:
 800312c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312e:	b0a1      	sub	sp, #132	; 0x84
 8003130:	9003      	str	r0, [sp, #12]
 8003132:	001d      	movs	r5, r3
 8003134:	898b      	ldrh	r3, [r1, #12]
 8003136:	000f      	movs	r7, r1
 8003138:	0016      	movs	r6, r2
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	d511      	bpl.n	8003162 <_svfiprintf_r+0x36>
 800313e:	690b      	ldr	r3, [r1, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10e      	bne.n	8003162 <_svfiprintf_r+0x36>
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	f000 fae5 	bl	8003714 <_malloc_r>
 800314a:	6038      	str	r0, [r7, #0]
 800314c:	6138      	str	r0, [r7, #16]
 800314e:	2800      	cmp	r0, #0
 8003150:	d105      	bne.n	800315e <_svfiprintf_r+0x32>
 8003152:	230c      	movs	r3, #12
 8003154:	9a03      	ldr	r2, [sp, #12]
 8003156:	3801      	subs	r0, #1
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	b021      	add	sp, #132	; 0x84
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	ac08      	add	r4, sp, #32
 8003166:	6163      	str	r3, [r4, #20]
 8003168:	3320      	adds	r3, #32
 800316a:	7663      	strb	r3, [r4, #25]
 800316c:	3310      	adds	r3, #16
 800316e:	76a3      	strb	r3, [r4, #26]
 8003170:	9507      	str	r5, [sp, #28]
 8003172:	0035      	movs	r5, r6
 8003174:	782b      	ldrb	r3, [r5, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_svfiprintf_r+0x52>
 800317a:	2b25      	cmp	r3, #37	; 0x25
 800317c:	d147      	bne.n	800320e <_svfiprintf_r+0xe2>
 800317e:	1bab      	subs	r3, r5, r6
 8003180:	9305      	str	r3, [sp, #20]
 8003182:	42b5      	cmp	r5, r6
 8003184:	d00c      	beq.n	80031a0 <_svfiprintf_r+0x74>
 8003186:	0032      	movs	r2, r6
 8003188:	0039      	movs	r1, r7
 800318a:	9803      	ldr	r0, [sp, #12]
 800318c:	f7ff ff6c 	bl	8003068 <__ssputs_r>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d100      	bne.n	8003196 <_svfiprintf_r+0x6a>
 8003194:	e0ae      	b.n	80032f4 <_svfiprintf_r+0x1c8>
 8003196:	6962      	ldr	r2, [r4, #20]
 8003198:	9b05      	ldr	r3, [sp, #20]
 800319a:	4694      	mov	ip, r2
 800319c:	4463      	add	r3, ip
 800319e:	6163      	str	r3, [r4, #20]
 80031a0:	782b      	ldrb	r3, [r5, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d100      	bne.n	80031a8 <_svfiprintf_r+0x7c>
 80031a6:	e0a5      	b.n	80032f4 <_svfiprintf_r+0x1c8>
 80031a8:	2201      	movs	r2, #1
 80031aa:	2300      	movs	r3, #0
 80031ac:	4252      	negs	r2, r2
 80031ae:	6062      	str	r2, [r4, #4]
 80031b0:	a904      	add	r1, sp, #16
 80031b2:	3254      	adds	r2, #84	; 0x54
 80031b4:	1852      	adds	r2, r2, r1
 80031b6:	1c6e      	adds	r6, r5, #1
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	60e3      	str	r3, [r4, #12]
 80031bc:	60a3      	str	r3, [r4, #8]
 80031be:	7013      	strb	r3, [r2, #0]
 80031c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80031c2:	2205      	movs	r2, #5
 80031c4:	7831      	ldrb	r1, [r6, #0]
 80031c6:	4854      	ldr	r0, [pc, #336]	; (8003318 <_svfiprintf_r+0x1ec>)
 80031c8:	f000 fa32 	bl	8003630 <memchr>
 80031cc:	1c75      	adds	r5, r6, #1
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d11f      	bne.n	8003212 <_svfiprintf_r+0xe6>
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	06d3      	lsls	r3, r2, #27
 80031d6:	d504      	bpl.n	80031e2 <_svfiprintf_r+0xb6>
 80031d8:	2353      	movs	r3, #83	; 0x53
 80031da:	a904      	add	r1, sp, #16
 80031dc:	185b      	adds	r3, r3, r1
 80031de:	2120      	movs	r1, #32
 80031e0:	7019      	strb	r1, [r3, #0]
 80031e2:	0713      	lsls	r3, r2, #28
 80031e4:	d504      	bpl.n	80031f0 <_svfiprintf_r+0xc4>
 80031e6:	2353      	movs	r3, #83	; 0x53
 80031e8:	a904      	add	r1, sp, #16
 80031ea:	185b      	adds	r3, r3, r1
 80031ec:	212b      	movs	r1, #43	; 0x2b
 80031ee:	7019      	strb	r1, [r3, #0]
 80031f0:	7833      	ldrb	r3, [r6, #0]
 80031f2:	2b2a      	cmp	r3, #42	; 0x2a
 80031f4:	d016      	beq.n	8003224 <_svfiprintf_r+0xf8>
 80031f6:	0035      	movs	r5, r6
 80031f8:	2100      	movs	r1, #0
 80031fa:	200a      	movs	r0, #10
 80031fc:	68e3      	ldr	r3, [r4, #12]
 80031fe:	782a      	ldrb	r2, [r5, #0]
 8003200:	1c6e      	adds	r6, r5, #1
 8003202:	3a30      	subs	r2, #48	; 0x30
 8003204:	2a09      	cmp	r2, #9
 8003206:	d94e      	bls.n	80032a6 <_svfiprintf_r+0x17a>
 8003208:	2900      	cmp	r1, #0
 800320a:	d111      	bne.n	8003230 <_svfiprintf_r+0x104>
 800320c:	e017      	b.n	800323e <_svfiprintf_r+0x112>
 800320e:	3501      	adds	r5, #1
 8003210:	e7b0      	b.n	8003174 <_svfiprintf_r+0x48>
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <_svfiprintf_r+0x1ec>)
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	1ac0      	subs	r0, r0, r3
 8003218:	2301      	movs	r3, #1
 800321a:	4083      	lsls	r3, r0
 800321c:	4313      	orrs	r3, r2
 800321e:	002e      	movs	r6, r5
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	e7ce      	b.n	80031c2 <_svfiprintf_r+0x96>
 8003224:	9b07      	ldr	r3, [sp, #28]
 8003226:	1d19      	adds	r1, r3, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	9107      	str	r1, [sp, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db01      	blt.n	8003234 <_svfiprintf_r+0x108>
 8003230:	930b      	str	r3, [sp, #44]	; 0x2c
 8003232:	e004      	b.n	800323e <_svfiprintf_r+0x112>
 8003234:	425b      	negs	r3, r3
 8003236:	60e3      	str	r3, [r4, #12]
 8003238:	2302      	movs	r3, #2
 800323a:	4313      	orrs	r3, r2
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	782b      	ldrb	r3, [r5, #0]
 8003240:	2b2e      	cmp	r3, #46	; 0x2e
 8003242:	d10a      	bne.n	800325a <_svfiprintf_r+0x12e>
 8003244:	786b      	ldrb	r3, [r5, #1]
 8003246:	2b2a      	cmp	r3, #42	; 0x2a
 8003248:	d135      	bne.n	80032b6 <_svfiprintf_r+0x18a>
 800324a:	9b07      	ldr	r3, [sp, #28]
 800324c:	3502      	adds	r5, #2
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	9207      	str	r2, [sp, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db2b      	blt.n	80032b0 <_svfiprintf_r+0x184>
 8003258:	9309      	str	r3, [sp, #36]	; 0x24
 800325a:	4e30      	ldr	r6, [pc, #192]	; (800331c <_svfiprintf_r+0x1f0>)
 800325c:	2203      	movs	r2, #3
 800325e:	0030      	movs	r0, r6
 8003260:	7829      	ldrb	r1, [r5, #0]
 8003262:	f000 f9e5 	bl	8003630 <memchr>
 8003266:	2800      	cmp	r0, #0
 8003268:	d006      	beq.n	8003278 <_svfiprintf_r+0x14c>
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	1b80      	subs	r0, r0, r6
 800326e:	4083      	lsls	r3, r0
 8003270:	6822      	ldr	r2, [r4, #0]
 8003272:	3501      	adds	r5, #1
 8003274:	4313      	orrs	r3, r2
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	7829      	ldrb	r1, [r5, #0]
 800327a:	2206      	movs	r2, #6
 800327c:	4828      	ldr	r0, [pc, #160]	; (8003320 <_svfiprintf_r+0x1f4>)
 800327e:	1c6e      	adds	r6, r5, #1
 8003280:	7621      	strb	r1, [r4, #24]
 8003282:	f000 f9d5 	bl	8003630 <memchr>
 8003286:	2800      	cmp	r0, #0
 8003288:	d03c      	beq.n	8003304 <_svfiprintf_r+0x1d8>
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <_svfiprintf_r+0x1f8>)
 800328c:	2b00      	cmp	r3, #0
 800328e:	d125      	bne.n	80032dc <_svfiprintf_r+0x1b0>
 8003290:	2207      	movs	r2, #7
 8003292:	9b07      	ldr	r3, [sp, #28]
 8003294:	3307      	adds	r3, #7
 8003296:	4393      	bics	r3, r2
 8003298:	3308      	adds	r3, #8
 800329a:	9307      	str	r3, [sp, #28]
 800329c:	6963      	ldr	r3, [r4, #20]
 800329e:	9a04      	ldr	r2, [sp, #16]
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	6163      	str	r3, [r4, #20]
 80032a4:	e765      	b.n	8003172 <_svfiprintf_r+0x46>
 80032a6:	4343      	muls	r3, r0
 80032a8:	0035      	movs	r5, r6
 80032aa:	2101      	movs	r1, #1
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	e7a6      	b.n	80031fe <_svfiprintf_r+0xd2>
 80032b0:	2301      	movs	r3, #1
 80032b2:	425b      	negs	r3, r3
 80032b4:	e7d0      	b.n	8003258 <_svfiprintf_r+0x12c>
 80032b6:	2300      	movs	r3, #0
 80032b8:	200a      	movs	r0, #10
 80032ba:	001a      	movs	r2, r3
 80032bc:	3501      	adds	r5, #1
 80032be:	6063      	str	r3, [r4, #4]
 80032c0:	7829      	ldrb	r1, [r5, #0]
 80032c2:	1c6e      	adds	r6, r5, #1
 80032c4:	3930      	subs	r1, #48	; 0x30
 80032c6:	2909      	cmp	r1, #9
 80032c8:	d903      	bls.n	80032d2 <_svfiprintf_r+0x1a6>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0c5      	beq.n	800325a <_svfiprintf_r+0x12e>
 80032ce:	9209      	str	r2, [sp, #36]	; 0x24
 80032d0:	e7c3      	b.n	800325a <_svfiprintf_r+0x12e>
 80032d2:	4342      	muls	r2, r0
 80032d4:	0035      	movs	r5, r6
 80032d6:	2301      	movs	r3, #1
 80032d8:	1852      	adds	r2, r2, r1
 80032da:	e7f1      	b.n	80032c0 <_svfiprintf_r+0x194>
 80032dc:	ab07      	add	r3, sp, #28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	003a      	movs	r2, r7
 80032e2:	0021      	movs	r1, r4
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <_svfiprintf_r+0x1fc>)
 80032e6:	9803      	ldr	r0, [sp, #12]
 80032e8:	e000      	b.n	80032ec <_svfiprintf_r+0x1c0>
 80032ea:	bf00      	nop
 80032ec:	9004      	str	r0, [sp, #16]
 80032ee:	9b04      	ldr	r3, [sp, #16]
 80032f0:	3301      	adds	r3, #1
 80032f2:	d1d3      	bne.n	800329c <_svfiprintf_r+0x170>
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032f8:	065b      	lsls	r3, r3, #25
 80032fa:	d400      	bmi.n	80032fe <_svfiprintf_r+0x1d2>
 80032fc:	e72d      	b.n	800315a <_svfiprintf_r+0x2e>
 80032fe:	2001      	movs	r0, #1
 8003300:	4240      	negs	r0, r0
 8003302:	e72a      	b.n	800315a <_svfiprintf_r+0x2e>
 8003304:	ab07      	add	r3, sp, #28
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	003a      	movs	r2, r7
 800330a:	0021      	movs	r1, r4
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <_svfiprintf_r+0x1fc>)
 800330e:	9803      	ldr	r0, [sp, #12]
 8003310:	f000 f87c 	bl	800340c <_printf_i>
 8003314:	e7ea      	b.n	80032ec <_svfiprintf_r+0x1c0>
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	080038e8 	.word	0x080038e8
 800331c:	080038ee 	.word	0x080038ee
 8003320:	080038f2 	.word	0x080038f2
 8003324:	00000000 	.word	0x00000000
 8003328:	08003069 	.word	0x08003069

0800332c <_printf_common>:
 800332c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800332e:	0015      	movs	r5, r2
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	688a      	ldr	r2, [r1, #8]
 8003334:	690b      	ldr	r3, [r1, #16]
 8003336:	000c      	movs	r4, r1
 8003338:	9000      	str	r0, [sp, #0]
 800333a:	4293      	cmp	r3, r2
 800333c:	da00      	bge.n	8003340 <_printf_common+0x14>
 800333e:	0013      	movs	r3, r2
 8003340:	0022      	movs	r2, r4
 8003342:	602b      	str	r3, [r5, #0]
 8003344:	3243      	adds	r2, #67	; 0x43
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	2a00      	cmp	r2, #0
 800334a:	d001      	beq.n	8003350 <_printf_common+0x24>
 800334c:	3301      	adds	r3, #1
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	d502      	bpl.n	800335c <_printf_common+0x30>
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	3302      	adds	r3, #2
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	6822      	ldr	r2, [r4, #0]
 800335e:	2306      	movs	r3, #6
 8003360:	0017      	movs	r7, r2
 8003362:	401f      	ands	r7, r3
 8003364:	421a      	tst	r2, r3
 8003366:	d027      	beq.n	80033b8 <_printf_common+0x8c>
 8003368:	0023      	movs	r3, r4
 800336a:	3343      	adds	r3, #67	; 0x43
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	4193      	sbcs	r3, r2
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	0692      	lsls	r2, r2, #26
 8003376:	d430      	bmi.n	80033da <_printf_common+0xae>
 8003378:	0022      	movs	r2, r4
 800337a:	9901      	ldr	r1, [sp, #4]
 800337c:	9800      	ldr	r0, [sp, #0]
 800337e:	9e08      	ldr	r6, [sp, #32]
 8003380:	3243      	adds	r2, #67	; 0x43
 8003382:	47b0      	blx	r6
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d025      	beq.n	80033d4 <_printf_common+0xa8>
 8003388:	2306      	movs	r3, #6
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	682a      	ldr	r2, [r5, #0]
 800338e:	68e1      	ldr	r1, [r4, #12]
 8003390:	2500      	movs	r5, #0
 8003392:	4003      	ands	r3, r0
 8003394:	2b04      	cmp	r3, #4
 8003396:	d103      	bne.n	80033a0 <_printf_common+0x74>
 8003398:	1a8d      	subs	r5, r1, r2
 800339a:	43eb      	mvns	r3, r5
 800339c:	17db      	asrs	r3, r3, #31
 800339e:	401d      	ands	r5, r3
 80033a0:	68a3      	ldr	r3, [r4, #8]
 80033a2:	6922      	ldr	r2, [r4, #16]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	dd01      	ble.n	80033ac <_printf_common+0x80>
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	18ed      	adds	r5, r5, r3
 80033ac:	2700      	movs	r7, #0
 80033ae:	42bd      	cmp	r5, r7
 80033b0:	d120      	bne.n	80033f4 <_printf_common+0xc8>
 80033b2:	2000      	movs	r0, #0
 80033b4:	e010      	b.n	80033d8 <_printf_common+0xac>
 80033b6:	3701      	adds	r7, #1
 80033b8:	68e3      	ldr	r3, [r4, #12]
 80033ba:	682a      	ldr	r2, [r5, #0]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	42bb      	cmp	r3, r7
 80033c0:	ddd2      	ble.n	8003368 <_printf_common+0x3c>
 80033c2:	0022      	movs	r2, r4
 80033c4:	2301      	movs	r3, #1
 80033c6:	9901      	ldr	r1, [sp, #4]
 80033c8:	9800      	ldr	r0, [sp, #0]
 80033ca:	9e08      	ldr	r6, [sp, #32]
 80033cc:	3219      	adds	r2, #25
 80033ce:	47b0      	blx	r6
 80033d0:	1c43      	adds	r3, r0, #1
 80033d2:	d1f0      	bne.n	80033b6 <_printf_common+0x8a>
 80033d4:	2001      	movs	r0, #1
 80033d6:	4240      	negs	r0, r0
 80033d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033da:	2030      	movs	r0, #48	; 0x30
 80033dc:	18e1      	adds	r1, r4, r3
 80033de:	3143      	adds	r1, #67	; 0x43
 80033e0:	7008      	strb	r0, [r1, #0]
 80033e2:	0021      	movs	r1, r4
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	3145      	adds	r1, #69	; 0x45
 80033e8:	7809      	ldrb	r1, [r1, #0]
 80033ea:	18a2      	adds	r2, r4, r2
 80033ec:	3243      	adds	r2, #67	; 0x43
 80033ee:	3302      	adds	r3, #2
 80033f0:	7011      	strb	r1, [r2, #0]
 80033f2:	e7c1      	b.n	8003378 <_printf_common+0x4c>
 80033f4:	0022      	movs	r2, r4
 80033f6:	2301      	movs	r3, #1
 80033f8:	9901      	ldr	r1, [sp, #4]
 80033fa:	9800      	ldr	r0, [sp, #0]
 80033fc:	9e08      	ldr	r6, [sp, #32]
 80033fe:	321a      	adds	r2, #26
 8003400:	47b0      	blx	r6
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d0e6      	beq.n	80033d4 <_printf_common+0xa8>
 8003406:	3701      	adds	r7, #1
 8003408:	e7d1      	b.n	80033ae <_printf_common+0x82>
	...

0800340c <_printf_i>:
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b08b      	sub	sp, #44	; 0x2c
 8003410:	9206      	str	r2, [sp, #24]
 8003412:	000a      	movs	r2, r1
 8003414:	3243      	adds	r2, #67	; 0x43
 8003416:	9307      	str	r3, [sp, #28]
 8003418:	9005      	str	r0, [sp, #20]
 800341a:	9204      	str	r2, [sp, #16]
 800341c:	7e0a      	ldrb	r2, [r1, #24]
 800341e:	000c      	movs	r4, r1
 8003420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003422:	2a78      	cmp	r2, #120	; 0x78
 8003424:	d806      	bhi.n	8003434 <_printf_i+0x28>
 8003426:	2a62      	cmp	r2, #98	; 0x62
 8003428:	d808      	bhi.n	800343c <_printf_i+0x30>
 800342a:	2a00      	cmp	r2, #0
 800342c:	d100      	bne.n	8003430 <_printf_i+0x24>
 800342e:	e0c0      	b.n	80035b2 <_printf_i+0x1a6>
 8003430:	2a58      	cmp	r2, #88	; 0x58
 8003432:	d052      	beq.n	80034da <_printf_i+0xce>
 8003434:	0026      	movs	r6, r4
 8003436:	3642      	adds	r6, #66	; 0x42
 8003438:	7032      	strb	r2, [r6, #0]
 800343a:	e022      	b.n	8003482 <_printf_i+0x76>
 800343c:	0010      	movs	r0, r2
 800343e:	3863      	subs	r0, #99	; 0x63
 8003440:	2815      	cmp	r0, #21
 8003442:	d8f7      	bhi.n	8003434 <_printf_i+0x28>
 8003444:	f7fc fe60 	bl	8000108 <__gnu_thumb1_case_shi>
 8003448:	001f0016 	.word	0x001f0016
 800344c:	fff6fff6 	.word	0xfff6fff6
 8003450:	fff6fff6 	.word	0xfff6fff6
 8003454:	fff6001f 	.word	0xfff6001f
 8003458:	fff6fff6 	.word	0xfff6fff6
 800345c:	00a8fff6 	.word	0x00a8fff6
 8003460:	009a0036 	.word	0x009a0036
 8003464:	fff6fff6 	.word	0xfff6fff6
 8003468:	fff600b9 	.word	0xfff600b9
 800346c:	fff60036 	.word	0xfff60036
 8003470:	009efff6 	.word	0x009efff6
 8003474:	0026      	movs	r6, r4
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	3642      	adds	r6, #66	; 0x42
 800347a:	1d11      	adds	r1, r2, #4
 800347c:	6019      	str	r1, [r3, #0]
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	7033      	strb	r3, [r6, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	e0a7      	b.n	80035d6 <_printf_i+0x1ca>
 8003486:	6808      	ldr	r0, [r1, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	1d0a      	adds	r2, r1, #4
 800348c:	0605      	lsls	r5, r0, #24
 800348e:	d50b      	bpl.n	80034a8 <_printf_i+0x9c>
 8003490:	680d      	ldr	r5, [r1, #0]
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	2d00      	cmp	r5, #0
 8003496:	da03      	bge.n	80034a0 <_printf_i+0x94>
 8003498:	232d      	movs	r3, #45	; 0x2d
 800349a:	9a04      	ldr	r2, [sp, #16]
 800349c:	426d      	negs	r5, r5
 800349e:	7013      	strb	r3, [r2, #0]
 80034a0:	4b61      	ldr	r3, [pc, #388]	; (8003628 <_printf_i+0x21c>)
 80034a2:	270a      	movs	r7, #10
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	e032      	b.n	800350e <_printf_i+0x102>
 80034a8:	680d      	ldr	r5, [r1, #0]
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	0641      	lsls	r1, r0, #25
 80034ae:	d5f1      	bpl.n	8003494 <_printf_i+0x88>
 80034b0:	b22d      	sxth	r5, r5
 80034b2:	e7ef      	b.n	8003494 <_printf_i+0x88>
 80034b4:	680d      	ldr	r5, [r1, #0]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	1d08      	adds	r0, r1, #4
 80034ba:	6018      	str	r0, [r3, #0]
 80034bc:	062e      	lsls	r6, r5, #24
 80034be:	d501      	bpl.n	80034c4 <_printf_i+0xb8>
 80034c0:	680d      	ldr	r5, [r1, #0]
 80034c2:	e003      	b.n	80034cc <_printf_i+0xc0>
 80034c4:	066d      	lsls	r5, r5, #25
 80034c6:	d5fb      	bpl.n	80034c0 <_printf_i+0xb4>
 80034c8:	680d      	ldr	r5, [r1, #0]
 80034ca:	b2ad      	uxth	r5, r5
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <_printf_i+0x21c>)
 80034ce:	270a      	movs	r7, #10
 80034d0:	9303      	str	r3, [sp, #12]
 80034d2:	2a6f      	cmp	r2, #111	; 0x6f
 80034d4:	d117      	bne.n	8003506 <_printf_i+0xfa>
 80034d6:	2708      	movs	r7, #8
 80034d8:	e015      	b.n	8003506 <_printf_i+0xfa>
 80034da:	3145      	adds	r1, #69	; 0x45
 80034dc:	700a      	strb	r2, [r1, #0]
 80034de:	4a52      	ldr	r2, [pc, #328]	; (8003628 <_printf_i+0x21c>)
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	6821      	ldr	r1, [r4, #0]
 80034e6:	ca20      	ldmia	r2!, {r5}
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	0608      	lsls	r0, r1, #24
 80034ec:	d550      	bpl.n	8003590 <_printf_i+0x184>
 80034ee:	07cb      	lsls	r3, r1, #31
 80034f0:	d502      	bpl.n	80034f8 <_printf_i+0xec>
 80034f2:	2320      	movs	r3, #32
 80034f4:	4319      	orrs	r1, r3
 80034f6:	6021      	str	r1, [r4, #0]
 80034f8:	2710      	movs	r7, #16
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	d103      	bne.n	8003506 <_printf_i+0xfa>
 80034fe:	2320      	movs	r3, #32
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	439a      	bics	r2, r3
 8003504:	6022      	str	r2, [r4, #0]
 8003506:	0023      	movs	r3, r4
 8003508:	2200      	movs	r2, #0
 800350a:	3343      	adds	r3, #67	; 0x43
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	6863      	ldr	r3, [r4, #4]
 8003510:	60a3      	str	r3, [r4, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db03      	blt.n	800351e <_printf_i+0x112>
 8003516:	2204      	movs	r2, #4
 8003518:	6821      	ldr	r1, [r4, #0]
 800351a:	4391      	bics	r1, r2
 800351c:	6021      	str	r1, [r4, #0]
 800351e:	2d00      	cmp	r5, #0
 8003520:	d102      	bne.n	8003528 <_printf_i+0x11c>
 8003522:	9e04      	ldr	r6, [sp, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00c      	beq.n	8003542 <_printf_i+0x136>
 8003528:	9e04      	ldr	r6, [sp, #16]
 800352a:	0028      	movs	r0, r5
 800352c:	0039      	movs	r1, r7
 800352e:	f7fc fe7b 	bl	8000228 <__aeabi_uidivmod>
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	3e01      	subs	r6, #1
 8003536:	5c5b      	ldrb	r3, [r3, r1]
 8003538:	7033      	strb	r3, [r6, #0]
 800353a:	002b      	movs	r3, r5
 800353c:	0005      	movs	r5, r0
 800353e:	429f      	cmp	r7, r3
 8003540:	d9f3      	bls.n	800352a <_printf_i+0x11e>
 8003542:	2f08      	cmp	r7, #8
 8003544:	d109      	bne.n	800355a <_printf_i+0x14e>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	07db      	lsls	r3, r3, #31
 800354a:	d506      	bpl.n	800355a <_printf_i+0x14e>
 800354c:	6863      	ldr	r3, [r4, #4]
 800354e:	6922      	ldr	r2, [r4, #16]
 8003550:	4293      	cmp	r3, r2
 8003552:	dc02      	bgt.n	800355a <_printf_i+0x14e>
 8003554:	2330      	movs	r3, #48	; 0x30
 8003556:	3e01      	subs	r6, #1
 8003558:	7033      	strb	r3, [r6, #0]
 800355a:	9b04      	ldr	r3, [sp, #16]
 800355c:	1b9b      	subs	r3, r3, r6
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	9b07      	ldr	r3, [sp, #28]
 8003562:	0021      	movs	r1, r4
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	9805      	ldr	r0, [sp, #20]
 8003568:	9b06      	ldr	r3, [sp, #24]
 800356a:	aa09      	add	r2, sp, #36	; 0x24
 800356c:	f7ff fede 	bl	800332c <_printf_common>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d135      	bne.n	80035e0 <_printf_i+0x1d4>
 8003574:	2001      	movs	r0, #1
 8003576:	4240      	negs	r0, r0
 8003578:	b00b      	add	sp, #44	; 0x2c
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800357c:	2220      	movs	r2, #32
 800357e:	6809      	ldr	r1, [r1, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	6022      	str	r2, [r4, #0]
 8003584:	0022      	movs	r2, r4
 8003586:	2178      	movs	r1, #120	; 0x78
 8003588:	3245      	adds	r2, #69	; 0x45
 800358a:	7011      	strb	r1, [r2, #0]
 800358c:	4a27      	ldr	r2, [pc, #156]	; (800362c <_printf_i+0x220>)
 800358e:	e7a7      	b.n	80034e0 <_printf_i+0xd4>
 8003590:	0648      	lsls	r0, r1, #25
 8003592:	d5ac      	bpl.n	80034ee <_printf_i+0xe2>
 8003594:	b2ad      	uxth	r5, r5
 8003596:	e7aa      	b.n	80034ee <_printf_i+0xe2>
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	680d      	ldr	r5, [r1, #0]
 800359c:	1d10      	adds	r0, r2, #4
 800359e:	6949      	ldr	r1, [r1, #20]
 80035a0:	6018      	str	r0, [r3, #0]
 80035a2:	6813      	ldr	r3, [r2, #0]
 80035a4:	062e      	lsls	r6, r5, #24
 80035a6:	d501      	bpl.n	80035ac <_printf_i+0x1a0>
 80035a8:	6019      	str	r1, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <_printf_i+0x1a6>
 80035ac:	066d      	lsls	r5, r5, #25
 80035ae:	d5fb      	bpl.n	80035a8 <_printf_i+0x19c>
 80035b0:	8019      	strh	r1, [r3, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9e04      	ldr	r6, [sp, #16]
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	e7d2      	b.n	8003560 <_printf_i+0x154>
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	1d11      	adds	r1, r2, #4
 80035be:	6019      	str	r1, [r3, #0]
 80035c0:	6816      	ldr	r6, [r2, #0]
 80035c2:	2100      	movs	r1, #0
 80035c4:	0030      	movs	r0, r6
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	f000 f832 	bl	8003630 <memchr>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d001      	beq.n	80035d4 <_printf_i+0x1c8>
 80035d0:	1b80      	subs	r0, r0, r6
 80035d2:	6060      	str	r0, [r4, #4]
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	2300      	movs	r3, #0
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	7013      	strb	r3, [r2, #0]
 80035de:	e7bf      	b.n	8003560 <_printf_i+0x154>
 80035e0:	6923      	ldr	r3, [r4, #16]
 80035e2:	0032      	movs	r2, r6
 80035e4:	9906      	ldr	r1, [sp, #24]
 80035e6:	9805      	ldr	r0, [sp, #20]
 80035e8:	9d07      	ldr	r5, [sp, #28]
 80035ea:	47a8      	blx	r5
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d0c1      	beq.n	8003574 <_printf_i+0x168>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	079b      	lsls	r3, r3, #30
 80035f4:	d415      	bmi.n	8003622 <_printf_i+0x216>
 80035f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	4298      	cmp	r0, r3
 80035fc:	dabc      	bge.n	8003578 <_printf_i+0x16c>
 80035fe:	0018      	movs	r0, r3
 8003600:	e7ba      	b.n	8003578 <_printf_i+0x16c>
 8003602:	0022      	movs	r2, r4
 8003604:	2301      	movs	r3, #1
 8003606:	9906      	ldr	r1, [sp, #24]
 8003608:	9805      	ldr	r0, [sp, #20]
 800360a:	9e07      	ldr	r6, [sp, #28]
 800360c:	3219      	adds	r2, #25
 800360e:	47b0      	blx	r6
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d0af      	beq.n	8003574 <_printf_i+0x168>
 8003614:	3501      	adds	r5, #1
 8003616:	68e3      	ldr	r3, [r4, #12]
 8003618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	42ab      	cmp	r3, r5
 800361e:	dcf0      	bgt.n	8003602 <_printf_i+0x1f6>
 8003620:	e7e9      	b.n	80035f6 <_printf_i+0x1ea>
 8003622:	2500      	movs	r5, #0
 8003624:	e7f7      	b.n	8003616 <_printf_i+0x20a>
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	080038f9 	.word	0x080038f9
 800362c:	0800390a 	.word	0x0800390a

08003630 <memchr>:
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	1882      	adds	r2, r0, r2
 8003634:	4290      	cmp	r0, r2
 8003636:	d101      	bne.n	800363c <memchr+0xc>
 8003638:	2000      	movs	r0, #0
 800363a:	4770      	bx	lr
 800363c:	7803      	ldrb	r3, [r0, #0]
 800363e:	428b      	cmp	r3, r1
 8003640:	d0fb      	beq.n	800363a <memchr+0xa>
 8003642:	3001      	adds	r0, #1
 8003644:	e7f6      	b.n	8003634 <memchr+0x4>

08003646 <memcpy>:
 8003646:	2300      	movs	r3, #0
 8003648:	b510      	push	{r4, lr}
 800364a:	429a      	cmp	r2, r3
 800364c:	d100      	bne.n	8003650 <memcpy+0xa>
 800364e:	bd10      	pop	{r4, pc}
 8003650:	5ccc      	ldrb	r4, [r1, r3]
 8003652:	54c4      	strb	r4, [r0, r3]
 8003654:	3301      	adds	r3, #1
 8003656:	e7f8      	b.n	800364a <memcpy+0x4>

08003658 <memmove>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4288      	cmp	r0, r1
 800365c:	d902      	bls.n	8003664 <memmove+0xc>
 800365e:	188b      	adds	r3, r1, r2
 8003660:	4298      	cmp	r0, r3
 8003662:	d303      	bcc.n	800366c <memmove+0x14>
 8003664:	2300      	movs	r3, #0
 8003666:	e007      	b.n	8003678 <memmove+0x20>
 8003668:	5c8b      	ldrb	r3, [r1, r2]
 800366a:	5483      	strb	r3, [r0, r2]
 800366c:	3a01      	subs	r2, #1
 800366e:	d2fb      	bcs.n	8003668 <memmove+0x10>
 8003670:	bd10      	pop	{r4, pc}
 8003672:	5ccc      	ldrb	r4, [r1, r3]
 8003674:	54c4      	strb	r4, [r0, r3]
 8003676:	3301      	adds	r3, #1
 8003678:	429a      	cmp	r2, r3
 800367a:	d1fa      	bne.n	8003672 <memmove+0x1a>
 800367c:	e7f8      	b.n	8003670 <memmove+0x18>
	...

08003680 <_free_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	0005      	movs	r5, r0
 8003684:	2900      	cmp	r1, #0
 8003686:	d010      	beq.n	80036aa <_free_r+0x2a>
 8003688:	1f0c      	subs	r4, r1, #4
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	da00      	bge.n	8003692 <_free_r+0x12>
 8003690:	18e4      	adds	r4, r4, r3
 8003692:	0028      	movs	r0, r5
 8003694:	f000 f8d4 	bl	8003840 <__malloc_lock>
 8003698:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <_free_r+0x90>)
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <_free_r+0x2c>
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	6014      	str	r4, [r2, #0]
 80036a4:	0028      	movs	r0, r5
 80036a6:	f000 f8d3 	bl	8003850 <__malloc_unlock>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	d908      	bls.n	80036c2 <_free_r+0x42>
 80036b0:	6821      	ldr	r1, [r4, #0]
 80036b2:	1860      	adds	r0, r4, r1
 80036b4:	4283      	cmp	r3, r0
 80036b6:	d1f3      	bne.n	80036a0 <_free_r+0x20>
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	1841      	adds	r1, r0, r1
 80036be:	6021      	str	r1, [r4, #0]
 80036c0:	e7ee      	b.n	80036a0 <_free_r+0x20>
 80036c2:	001a      	movs	r2, r3
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <_free_r+0x4e>
 80036ca:	42a3      	cmp	r3, r4
 80036cc:	d9f9      	bls.n	80036c2 <_free_r+0x42>
 80036ce:	6811      	ldr	r1, [r2, #0]
 80036d0:	1850      	adds	r0, r2, r1
 80036d2:	42a0      	cmp	r0, r4
 80036d4:	d10b      	bne.n	80036ee <_free_r+0x6e>
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	1809      	adds	r1, r1, r0
 80036da:	1850      	adds	r0, r2, r1
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	4283      	cmp	r3, r0
 80036e0:	d1e0      	bne.n	80036a4 <_free_r+0x24>
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	1841      	adds	r1, r0, r1
 80036e8:	6011      	str	r1, [r2, #0]
 80036ea:	6053      	str	r3, [r2, #4]
 80036ec:	e7da      	b.n	80036a4 <_free_r+0x24>
 80036ee:	42a0      	cmp	r0, r4
 80036f0:	d902      	bls.n	80036f8 <_free_r+0x78>
 80036f2:	230c      	movs	r3, #12
 80036f4:	602b      	str	r3, [r5, #0]
 80036f6:	e7d5      	b.n	80036a4 <_free_r+0x24>
 80036f8:	6821      	ldr	r1, [r4, #0]
 80036fa:	1860      	adds	r0, r4, r1
 80036fc:	4283      	cmp	r3, r0
 80036fe:	d103      	bne.n	8003708 <_free_r+0x88>
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	1841      	adds	r1, r0, r1
 8003706:	6021      	str	r1, [r4, #0]
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	6054      	str	r4, [r2, #4]
 800370c:	e7ca      	b.n	80036a4 <_free_r+0x24>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000090 	.word	0x20000090

08003714 <_malloc_r>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	2303      	movs	r3, #3
 8003718:	1ccd      	adds	r5, r1, #3
 800371a:	439d      	bics	r5, r3
 800371c:	3508      	adds	r5, #8
 800371e:	0006      	movs	r6, r0
 8003720:	2d0c      	cmp	r5, #12
 8003722:	d21f      	bcs.n	8003764 <_malloc_r+0x50>
 8003724:	250c      	movs	r5, #12
 8003726:	42a9      	cmp	r1, r5
 8003728:	d81e      	bhi.n	8003768 <_malloc_r+0x54>
 800372a:	0030      	movs	r0, r6
 800372c:	f000 f888 	bl	8003840 <__malloc_lock>
 8003730:	4925      	ldr	r1, [pc, #148]	; (80037c8 <_malloc_r+0xb4>)
 8003732:	680a      	ldr	r2, [r1, #0]
 8003734:	0014      	movs	r4, r2
 8003736:	2c00      	cmp	r4, #0
 8003738:	d11a      	bne.n	8003770 <_malloc_r+0x5c>
 800373a:	4f24      	ldr	r7, [pc, #144]	; (80037cc <_malloc_r+0xb8>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <_malloc_r+0x38>
 8003742:	0021      	movs	r1, r4
 8003744:	0030      	movs	r0, r6
 8003746:	f000 f869 	bl	800381c <_sbrk_r>
 800374a:	6038      	str	r0, [r7, #0]
 800374c:	0029      	movs	r1, r5
 800374e:	0030      	movs	r0, r6
 8003750:	f000 f864 	bl	800381c <_sbrk_r>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d12b      	bne.n	80037b0 <_malloc_r+0x9c>
 8003758:	230c      	movs	r3, #12
 800375a:	0030      	movs	r0, r6
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	f000 f877 	bl	8003850 <__malloc_unlock>
 8003762:	e003      	b.n	800376c <_malloc_r+0x58>
 8003764:	2d00      	cmp	r5, #0
 8003766:	dade      	bge.n	8003726 <_malloc_r+0x12>
 8003768:	230c      	movs	r3, #12
 800376a:	6033      	str	r3, [r6, #0]
 800376c:	2000      	movs	r0, #0
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	1b5b      	subs	r3, r3, r5
 8003774:	d419      	bmi.n	80037aa <_malloc_r+0x96>
 8003776:	2b0b      	cmp	r3, #11
 8003778:	d903      	bls.n	8003782 <_malloc_r+0x6e>
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	18e4      	adds	r4, r4, r3
 800377e:	6025      	str	r5, [r4, #0]
 8003780:	e003      	b.n	800378a <_malloc_r+0x76>
 8003782:	6863      	ldr	r3, [r4, #4]
 8003784:	42a2      	cmp	r2, r4
 8003786:	d10e      	bne.n	80037a6 <_malloc_r+0x92>
 8003788:	600b      	str	r3, [r1, #0]
 800378a:	0030      	movs	r0, r6
 800378c:	f000 f860 	bl	8003850 <__malloc_unlock>
 8003790:	0020      	movs	r0, r4
 8003792:	2207      	movs	r2, #7
 8003794:	300b      	adds	r0, #11
 8003796:	1d23      	adds	r3, r4, #4
 8003798:	4390      	bics	r0, r2
 800379a:	1ac2      	subs	r2, r0, r3
 800379c:	4298      	cmp	r0, r3
 800379e:	d0e6      	beq.n	800376e <_malloc_r+0x5a>
 80037a0:	1a1b      	subs	r3, r3, r0
 80037a2:	50a3      	str	r3, [r4, r2]
 80037a4:	e7e3      	b.n	800376e <_malloc_r+0x5a>
 80037a6:	6053      	str	r3, [r2, #4]
 80037a8:	e7ef      	b.n	800378a <_malloc_r+0x76>
 80037aa:	0022      	movs	r2, r4
 80037ac:	6864      	ldr	r4, [r4, #4]
 80037ae:	e7c2      	b.n	8003736 <_malloc_r+0x22>
 80037b0:	2303      	movs	r3, #3
 80037b2:	1cc4      	adds	r4, r0, #3
 80037b4:	439c      	bics	r4, r3
 80037b6:	42a0      	cmp	r0, r4
 80037b8:	d0e1      	beq.n	800377e <_malloc_r+0x6a>
 80037ba:	1a21      	subs	r1, r4, r0
 80037bc:	0030      	movs	r0, r6
 80037be:	f000 f82d 	bl	800381c <_sbrk_r>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d1db      	bne.n	800377e <_malloc_r+0x6a>
 80037c6:	e7c7      	b.n	8003758 <_malloc_r+0x44>
 80037c8:	20000090 	.word	0x20000090
 80037cc:	20000094 	.word	0x20000094

080037d0 <_realloc_r>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	0007      	movs	r7, r0
 80037d4:	000d      	movs	r5, r1
 80037d6:	0016      	movs	r6, r2
 80037d8:	2900      	cmp	r1, #0
 80037da:	d105      	bne.n	80037e8 <_realloc_r+0x18>
 80037dc:	0011      	movs	r1, r2
 80037de:	f7ff ff99 	bl	8003714 <_malloc_r>
 80037e2:	0004      	movs	r4, r0
 80037e4:	0020      	movs	r0, r4
 80037e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037e8:	2a00      	cmp	r2, #0
 80037ea:	d103      	bne.n	80037f4 <_realloc_r+0x24>
 80037ec:	f7ff ff48 	bl	8003680 <_free_r>
 80037f0:	0034      	movs	r4, r6
 80037f2:	e7f7      	b.n	80037e4 <_realloc_r+0x14>
 80037f4:	f000 f834 	bl	8003860 <_malloc_usable_size_r>
 80037f8:	002c      	movs	r4, r5
 80037fa:	42b0      	cmp	r0, r6
 80037fc:	d2f2      	bcs.n	80037e4 <_realloc_r+0x14>
 80037fe:	0031      	movs	r1, r6
 8003800:	0038      	movs	r0, r7
 8003802:	f7ff ff87 	bl	8003714 <_malloc_r>
 8003806:	1e04      	subs	r4, r0, #0
 8003808:	d0ec      	beq.n	80037e4 <_realloc_r+0x14>
 800380a:	0029      	movs	r1, r5
 800380c:	0032      	movs	r2, r6
 800380e:	f7ff ff1a 	bl	8003646 <memcpy>
 8003812:	0029      	movs	r1, r5
 8003814:	0038      	movs	r0, r7
 8003816:	f7ff ff33 	bl	8003680 <_free_r>
 800381a:	e7e3      	b.n	80037e4 <_realloc_r+0x14>

0800381c <_sbrk_r>:
 800381c:	2300      	movs	r3, #0
 800381e:	b570      	push	{r4, r5, r6, lr}
 8003820:	4d06      	ldr	r5, [pc, #24]	; (800383c <_sbrk_r+0x20>)
 8003822:	0004      	movs	r4, r0
 8003824:	0008      	movs	r0, r1
 8003826:	602b      	str	r3, [r5, #0]
 8003828:	f7fd f982 	bl	8000b30 <_sbrk>
 800382c:	1c43      	adds	r3, r0, #1
 800382e:	d103      	bne.n	8003838 <_sbrk_r+0x1c>
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <_sbrk_r+0x1c>
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	20000168 	.word	0x20000168

08003840 <__malloc_lock>:
 8003840:	b510      	push	{r4, lr}
 8003842:	4802      	ldr	r0, [pc, #8]	; (800384c <__malloc_lock+0xc>)
 8003844:	f000 f814 	bl	8003870 <__retarget_lock_acquire_recursive>
 8003848:	bd10      	pop	{r4, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	20000170 	.word	0x20000170

08003850 <__malloc_unlock>:
 8003850:	b510      	push	{r4, lr}
 8003852:	4802      	ldr	r0, [pc, #8]	; (800385c <__malloc_unlock+0xc>)
 8003854:	f000 f80d 	bl	8003872 <__retarget_lock_release_recursive>
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	20000170 	.word	0x20000170

08003860 <_malloc_usable_size_r>:
 8003860:	1f0b      	subs	r3, r1, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	1f18      	subs	r0, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	da01      	bge.n	800386e <_malloc_usable_size_r+0xe>
 800386a:	580b      	ldr	r3, [r1, r0]
 800386c:	18c0      	adds	r0, r0, r3
 800386e:	4770      	bx	lr

08003870 <__retarget_lock_acquire_recursive>:
 8003870:	4770      	bx	lr

08003872 <__retarget_lock_release_recursive>:
 8003872:	4770      	bx	lr

08003874 <_init>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr

08003880 <_fini>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr
