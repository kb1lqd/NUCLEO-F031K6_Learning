
PMOD_BTN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001cc0  08001cc0  00011cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf8  08001cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cfc  08001cfc  00011cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08001d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001d0c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000589f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001519  00000000  00000000  000258d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  00026df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  000273f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f3e5  00000000  00000000  00027968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ce1  00000000  00000000  00036d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a595  00000000  00000000  0003ea2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00098fc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000138c  00000000  00000000  00099018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ca8 	.word	0x08001ca8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ca8 	.word	0x08001ca8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	240c      	movs	r4, #12
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f001 fd31 	bl	8001c98 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <MX_GPIO_Init+0xb0>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	03c9      	lsls	r1, r1, #15
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	4013      	ands	r3, r2
 800024e:	60bb      	str	r3, [r7, #8]
 8000250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	0289      	lsls	r1, r1, #10
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	029b      	lsls	r3, r3, #10
 8000268:	4013      	ands	r3, r2
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_GPIO_Init+0xb0>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	02c9      	lsls	r1, r1, #11
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_GPIO_Init+0xb0>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	02db      	lsls	r3, r3, #11
 8000284:	4013      	ands	r3, r2
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PMOD_A_Pin|PMOD_BTN_Pin|PMOD_B_Pin;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	22c1      	movs	r2, #193	; 0xc1
 800028e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	4a10      	ldr	r2, [pc, #64]	; (80002d4 <MX_GPIO_Init+0xb4>)
 8000294:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029c:	193b      	adds	r3, r7, r4
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <MX_GPIO_Init+0xb8>)
 80002a0:	0019      	movs	r1, r3
 80002a2:	0010      	movs	r0, r2
 80002a4:	f000 fb1e 	bl	80008e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	2005      	movs	r0, #5
 80002ae:	f000 fae7 	bl	8000880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80002b2:	2005      	movs	r0, #5
 80002b4:	f000 faf9 	bl	80008aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2100      	movs	r1, #0
 80002bc:	2007      	movs	r0, #7
 80002be:	f000 fadf 	bl	8000880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80002c2:	2007      	movs	r0, #7
 80002c4:	f000 faf1 	bl	80008aa <HAL_NVIC_EnableIRQ>

}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b009      	add	sp, #36	; 0x24
 80002ce:	bd90      	pop	{r4, r7, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	10110000 	.word	0x10110000
 80002d8:	48000400 	.word	0x48000400

080002dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dbb      	adds	r3, r7, #6
 80002e6:	801a      	strh	r2, [r3, #0]
	static bool pmod_a=0;
	static bool pmod_b=0;
	bool pmod_turn_cw=0;
 80002e8:	230f      	movs	r3, #15
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
	bool pmod_turn_ccw=0;
 80002f0:	230e      	movs	r3, #14
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
	bool pmod_btn=0;
 80002f8:	210d      	movs	r1, #13
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == PMOD_BTN_Pin)
 8000300:	1dbb      	adds	r3, r7, #6
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	2b40      	cmp	r3, #64	; 0x40
 8000306:	d104      	bne.n	8000312 <HAL_GPIO_EXTI_Callback+0x36>
	{
		__NOP(); // Push-Button pressed
 8000308:	46c0      	nop			; (mov r8, r8)
		pmod_btn=1;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
		}
	}

	//Determine direction

}
 8000310:	e03a      	b.n	8000388 <HAL_GPIO_EXTI_Callback+0xac>
	else if(GPIO_Pin == PMOD_A_Pin)
 8000312:	1dbb      	adds	r3, r7, #6
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d119      	bne.n	800034e <HAL_GPIO_EXTI_Callback+0x72>
		__NOP(); // A signal detected
 800031a:	46c0      	nop			; (mov r8, r8)
		pmod_a=1;
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <HAL_GPIO_EXTI_Callback+0xb4>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
		if(pmod_b==1)
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d02e      	beq.n	8000388 <HAL_GPIO_EXTI_Callback+0xac>
			pmod_turn_cw = 1;
 800032a:	210f      	movs	r1, #15
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
			pmod_a=0;
 8000332:	4b17      	ldr	r3, [pc, #92]	; (8000390 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
			pmod_b=0;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <HAL_GPIO_EXTI_Callback+0xb8>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
			pmod_turn_cw = 0;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
			pmod_turn_ccw = 0;
 8000344:	230e      	movs	r3, #14
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
}
 800034c:	e01c      	b.n	8000388 <HAL_GPIO_EXTI_Callback+0xac>
	else if(GPIO_Pin == PMOD_B_Pin)
 800034e:	1dbb      	adds	r3, r7, #6
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	2b80      	cmp	r3, #128	; 0x80
 8000354:	d118      	bne.n	8000388 <HAL_GPIO_EXTI_Callback+0xac>
		__NOP(); // B signal detected
 8000356:	46c0      	nop			; (mov r8, r8)
		pmod_b=1;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <HAL_GPIO_EXTI_Callback+0xb8>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
		if(pmod_a==1)
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d010      	beq.n	8000388 <HAL_GPIO_EXTI_Callback+0xac>
			pmod_turn_ccw = 1;
 8000366:	210e      	movs	r1, #14
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	701a      	strb	r2, [r3, #0]
			pmod_a=0;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
			pmod_b=0;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
			pmod_turn_cw = 0;
 800037a:	230f      	movs	r3, #15
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
			pmod_turn_ccw = 0;
 8000382:	187b      	adds	r3, r7, r1
 8000384:	2200      	movs	r2, #0
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000028 	.word	0x20000028
 8000394:	20000029 	.word	0x20000029

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039c:	f000 f960 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a0:	f000 f805 	bl	80003ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a4:	f7ff ff3c 	bl	8000220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003a8:	f000 f8b2 	bl	8000510 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <main+0x14>

080003ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ae:	b590      	push	{r4, r7, lr}
 80003b0:	b095      	sub	sp, #84	; 0x54
 80003b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b4:	2420      	movs	r4, #32
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	0018      	movs	r0, r3
 80003ba:	2330      	movs	r3, #48	; 0x30
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f001 fc6a 	bl	8001c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	2310      	movs	r3, #16
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	0018      	movs	r0, r3
 80003ca:	2310      	movs	r3, #16
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f001 fc62 	bl	8001c98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d4:	003b      	movs	r3, r7
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f001 fc5b 	bl	8001c98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	0021      	movs	r1, r4
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2202      	movs	r2, #2
 80003e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2201      	movs	r2, #1
 80003ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2210      	movs	r2, #16
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fbf4 	bl	8000bec <HAL_RCC_OscConfig>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000408:	f000 f828 	bl	800045c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	2110      	movs	r1, #16
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2207      	movs	r2, #7
 8000412:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000420:	187b      	adds	r3, r7, r1
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fef8 	bl	8001220 <HAL_RCC_ClockConfig>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000434:	f000 f812 	bl	800045c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000438:	003b      	movs	r3, r7
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000444:	003b      	movs	r3, r7
 8000446:	0018      	movs	r0, r3
 8000448:	f001 f83c 	bl	80014c4 <HAL_RCCEx_PeriphCLKConfig>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000450:	f000 f804 	bl	800045c <Error_Handler>
  }
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b015      	add	sp, #84	; 0x54
 800045a:	bd90      	pop	{r4, r7, pc}

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x44>)
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_MspInit+0x44>)
 8000474:	2101      	movs	r1, #1
 8000476:	430a      	orrs	r2, r1
 8000478:	619a      	str	r2, [r3, #24]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x44>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	2201      	movs	r2, #1
 8000480:	4013      	ands	r3, r2
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_MspInit+0x44>)
 8000488:	69da      	ldr	r2, [r3, #28]
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_MspInit+0x44>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0549      	lsls	r1, r1, #21
 8000490:	430a      	orrs	r2, r1
 8000492:	61da      	str	r2, [r3, #28]
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <HAL_MspInit+0x44>)
 8000496:	69da      	ldr	r2, [r3, #28]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	055b      	lsls	r3, r3, #21
 800049c:	4013      	ands	r3, r2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <NMI_Handler+0x4>

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <HardFault_Handler+0x4>

080004bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f90c 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 fb66 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80004f2:	2040      	movs	r0, #64	; 0x40
 80004f4:	f000 fb5e 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80004f8:	2080      	movs	r0, #128	; 0x80
 80004fa:	f000 fb5b 	bl	8000bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_USART1_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800051c:	2296      	movs	r2, #150	; 0x96
 800051e:	0212      	lsls	r2, r2, #8
 8000520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART1_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_USART1_UART_Init+0x58>)
 8000554:	0018      	movs	r0, r3
 8000556:	f001 f883 	bl	8001660 <HAL_UART_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f7ff ff7d 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c
 800056c:	40013800 	.word	0x40013800

08000570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b08b      	sub	sp, #44	; 0x2c
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2414      	movs	r4, #20
 800057a:	193b      	adds	r3, r7, r4
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f001 fb88 	bl	8001c98 <memset>
  if(uartHandle->Instance==USART1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <HAL_UART_MspInit+0x90>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d132      	bne.n	80005f8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_UART_MspInit+0x94>)
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <HAL_UART_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	01c9      	lsls	r1, r1, #7
 800059c:	430a      	orrs	r2, r1
 800059e:	619a      	str	r2, [r3, #24]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_UART_MspInit+0x94>)
 80005a2:	699a      	ldr	r2, [r3, #24]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	01db      	lsls	r3, r3, #7
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_UART_MspInit+0x94>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_UART_MspInit+0x94>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0289      	lsls	r1, r1, #10
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_UART_MspInit+0x94>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	029b      	lsls	r3, r3, #10
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_UART_MspInit+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2203      	movs	r2, #3
 80005e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	187a      	adds	r2, r7, r1
 80005ec:	2390      	movs	r3, #144	; 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f976 	bl	80008e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	; 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000
 8000608:	00008004 	.word	0x00008004

0800060c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490e      	ldr	r1, [pc, #56]	; (800064c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0b      	ldr	r4, [pc, #44]	; (8000658 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000636:	f7ff ff65 	bl	8000504 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800063a:	f001 fb09 	bl	8001c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff feab 	bl	8000398 <main>

08000642 <LoopForever>:

LoopForever:
    b LoopForever
 8000642:	e7fe      	b.n	8000642 <LoopForever>
  ldr   r0, =_estack
 8000644:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000650:	08001d00 	.word	0x08001d00
  ldr r2, =_sbss
 8000654:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000658:	200000b4 	.word	0x200000b4

0800065c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_IRQHandler>
	...

08000660 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_Init+0x24>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_Init+0x24>)
 800066a:	2110      	movs	r1, #16
 800066c:	430a      	orrs	r2, r1
 800066e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000670:	2000      	movs	r0, #0
 8000672:	f000 f809 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000676:	f7ff fef7 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_InitTick+0x5c>)
 8000692:	681c      	ldr	r4, [r3, #0]
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_InitTick+0x60>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	0019      	movs	r1, r3
 800069a:	23fa      	movs	r3, #250	; 0xfa
 800069c:	0098      	lsls	r0, r3, #2
 800069e:	f7ff fd33 	bl	8000108 <__udivsi3>
 80006a2:	0003      	movs	r3, r0
 80006a4:	0019      	movs	r1, r3
 80006a6:	0020      	movs	r0, r4
 80006a8:	f7ff fd2e 	bl	8000108 <__udivsi3>
 80006ac:	0003      	movs	r3, r0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f90b 	bl	80008ca <HAL_SYSTICK_Config>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e00f      	b.n	80006dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d80b      	bhi.n	80006da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f8d8 	bl	8000880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_InitTick+0x64>)
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b003      	add	sp, #12
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	18d2      	adds	r2, r2, r3
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000008 	.word	0x20000008
 8000710:	200000b0 	.word	0x200000b0

08000714 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	200000b0 	.word	0x200000b0

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b7f      	cmp	r3, #127	; 0x7f
 800073a:	d809      	bhi.n	8000750 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	001a      	movs	r2, r3
 8000742:	231f      	movs	r3, #31
 8000744:	401a      	ands	r2, r3
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_EnableIRQ+0x30>)
 8000748:	2101      	movs	r1, #1
 800074a:	4091      	lsls	r1, r2
 800074c:	000a      	movs	r2, r1
 800074e:	601a      	str	r2, [r3, #0]
  }
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	e000e100 	.word	0xe000e100

0800075c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b7f      	cmp	r3, #127	; 0x7f
 8000770:	d828      	bhi.n	80007c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000772:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <__NVIC_SetPriority+0xd4>)
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	33c0      	adds	r3, #192	; 0xc0
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	589b      	ldr	r3, [r3, r2]
 8000782:	1dfa      	adds	r2, r7, #7
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	0011      	movs	r1, r2
 8000788:	2203      	movs	r2, #3
 800078a:	400a      	ands	r2, r1
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	21ff      	movs	r1, #255	; 0xff
 8000790:	4091      	lsls	r1, r2
 8000792:	000a      	movs	r2, r1
 8000794:	43d2      	mvns	r2, r2
 8000796:	401a      	ands	r2, r3
 8000798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	401a      	ands	r2, r3
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	0018      	movs	r0, r3
 80007a8:	2303      	movs	r3, #3
 80007aa:	4003      	ands	r3, r0
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b0:	481f      	ldr	r0, [pc, #124]	; (8000830 <__NVIC_SetPriority+0xd4>)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	089b      	lsrs	r3, r3, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	33c0      	adds	r3, #192	; 0xc0
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007c2:	e031      	b.n	8000828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <__NVIC_SetPriority+0xd8>)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0019      	movs	r1, r3
 80007cc:	230f      	movs	r3, #15
 80007ce:	400b      	ands	r3, r1
 80007d0:	3b08      	subs	r3, #8
 80007d2:	089b      	lsrs	r3, r3, #2
 80007d4:	3306      	adds	r3, #6
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	18d3      	adds	r3, r2, r3
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <__NVIC_SetPriority+0xd8>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	001c      	movs	r4, r3
 8000814:	230f      	movs	r3, #15
 8000816:	4023      	ands	r3, r4
 8000818:	3b08      	subs	r3, #8
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	430a      	orrs	r2, r1
 800081e:	3306      	adds	r3, #6
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	18c3      	adds	r3, r0, r3
 8000824:	3304      	adds	r3, #4
 8000826:	601a      	str	r2, [r3, #0]
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b003      	add	sp, #12
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	045b      	lsls	r3, r3, #17
 8000848:	429a      	cmp	r2, r3
 800084a:	d301      	bcc.n	8000850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084c:	2301      	movs	r3, #1
 800084e:	e010      	b.n	8000872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <SysTick_Config+0x44>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	3a01      	subs	r2, #1
 8000856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2103      	movs	r1, #3
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff7c 	bl	800075c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x44>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x44>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b002      	add	sp, #8
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	210f      	movs	r1, #15
 800088c:	187b      	adds	r3, r7, r1
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	187b      	adds	r3, r7, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff ff5d 	bl	800075c <__NVIC_SetPriority>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	0002      	movs	r2, r0
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff33 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffaf 	bl	8000838 <SysTick_Config>
 80008da:	0003      	movs	r3, r0
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b002      	add	sp, #8
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f2:	e149      	b.n	8000b88 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <HAL_GPIO_Init+0x28>
 800090a:	e13a      	b.n	8000b82 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d00b      	beq.n	800092c <HAL_GPIO_Init+0x48>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d007      	beq.n	800092c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000920:	2b11      	cmp	r3, #17
 8000922:	d003      	beq.n	800092c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b12      	cmp	r3, #18
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	43da      	mvns	r2, r3
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	409a      	lsls	r2, r3
 800094e:	0013      	movs	r3, r2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	2201      	movs	r2, #1
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	43da      	mvns	r2, r3
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	409a      	lsls	r2, r3
 80009b0:	0013      	movs	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xea>
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d123      	bne.n	8000a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	08da      	lsrs	r2, r3, #3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3208      	adds	r2, #8
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	58d3      	ldr	r3, [r2, r3]
 80009da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2207      	movs	r2, #7
 80009e0:	4013      	ands	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	409a      	lsls	r2, r3
 80009e8:	0013      	movs	r3, r2
 80009ea:	43da      	mvns	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691a      	ldr	r2, [r3, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2107      	movs	r1, #7
 80009fa:	400b      	ands	r3, r1
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	6939      	ldr	r1, [r7, #16]
 8000a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2203      	movs	r2, #3
 8000a34:	401a      	ands	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	055b      	lsls	r3, r3, #21
 8000a52:	4013      	ands	r3, r2
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x174>
 8000a56:	e094      	b.n	8000b82 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a58:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a5a:	699a      	ldr	r2, [r3, #24]
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a70:	4a4c      	ldr	r2, [pc, #304]	; (8000ba4 <HAL_GPIO_Init+0x2c0>)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	589b      	ldr	r3, [r3, r2]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2203      	movs	r2, #3
 8000a82:	4013      	ands	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	220f      	movs	r2, #15
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	2390      	movs	r3, #144	; 0x90
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d00d      	beq.n	8000aba <HAL_GPIO_Init+0x1d6>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <HAL_GPIO_Init+0x2c4>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d007      	beq.n	8000ab6 <HAL_GPIO_Init+0x1d2>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a40      	ldr	r2, [pc, #256]	; (8000bac <HAL_GPIO_Init+0x2c8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_GPIO_Init+0x1ce>
 8000aae:	2302      	movs	r3, #2
 8000ab0:	e004      	b.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_GPIO_Init+0x1d8>
 8000aba:	2300      	movs	r3, #0
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	2103      	movs	r1, #3
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	4093      	lsls	r3, r2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000acc:	4935      	ldr	r1, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2c0>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	4013      	ands	r3, r2
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	029b      	lsls	r3, r3, #10
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	035b      	lsls	r3, r3, #13
 8000b46:	4013      	ands	r3, r2
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43da      	mvns	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	4013      	ands	r3, r2
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	40da      	lsrs	r2, r3
 8000b90:	1e13      	subs	r3, r2, #0
 8000b92:	d000      	beq.n	8000b96 <HAL_GPIO_Init+0x2b2>
 8000b94:	e6ae      	b.n	80008f4 <HAL_GPIO_Init+0x10>
  } 
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b006      	add	sp, #24
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	0002      	movs	r2, r0
 8000bbc:	1dbb      	adds	r3, r7, #6
 8000bbe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	1dba      	adds	r2, r7, #6
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d008      	beq.n	8000bde <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	8812      	ldrh	r2, [r2, #0]
 8000bd2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fb7f 	bl	80002dc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e301      	b.n	8001202 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	d100      	bne.n	8000c0a <HAL_RCC_OscConfig+0x1e>
 8000c08:	e08d      	b.n	8000d26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c0a:	4bc3      	ldr	r3, [pc, #780]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	220c      	movs	r2, #12
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d00e      	beq.n	8000c34 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c16:	4bc0      	ldr	r3, [pc, #768]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d116      	bne.n	8000c50 <HAL_RCC_OscConfig+0x64>
 8000c22:	4bbd      	ldr	r3, [pc, #756]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	025b      	lsls	r3, r3, #9
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d10d      	bne.n	8000c50 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	4bb8      	ldr	r3, [pc, #736]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <HAL_RCC_OscConfig+0x56>
 8000c40:	e070      	b.n	8000d24 <HAL_RCC_OscConfig+0x138>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d000      	beq.n	8000c4c <HAL_RCC_OscConfig+0x60>
 8000c4a:	e06b      	b.n	8000d24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e2d8      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d107      	bne.n	8000c68 <HAL_RCC_OscConfig+0x7c>
 8000c58:	4baf      	ldr	r3, [pc, #700]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4bae      	ldr	r3, [pc, #696]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0249      	lsls	r1, r1, #9
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e02f      	b.n	8000cc8 <HAL_RCC_OscConfig+0xdc>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10c      	bne.n	8000c8a <HAL_RCC_OscConfig+0x9e>
 8000c70:	4ba9      	ldr	r3, [pc, #676]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4ba8      	ldr	r3, [pc, #672]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c76:	49a9      	ldr	r1, [pc, #676]	; (8000f1c <HAL_RCC_OscConfig+0x330>)
 8000c78:	400a      	ands	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	4ba6      	ldr	r3, [pc, #664]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4ba5      	ldr	r3, [pc, #660]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c82:	49a7      	ldr	r1, [pc, #668]	; (8000f20 <HAL_RCC_OscConfig+0x334>)
 8000c84:	400a      	ands	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e01e      	b.n	8000cc8 <HAL_RCC_OscConfig+0xdc>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d10e      	bne.n	8000cb0 <HAL_RCC_OscConfig+0xc4>
 8000c92:	4ba1      	ldr	r3, [pc, #644]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4ba0      	ldr	r3, [pc, #640]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	02c9      	lsls	r1, r1, #11
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	4b9d      	ldr	r3, [pc, #628]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b9c      	ldr	r3, [pc, #624]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0249      	lsls	r1, r1, #9
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e00b      	b.n	8000cc8 <HAL_RCC_OscConfig+0xdc>
 8000cb0:	4b99      	ldr	r3, [pc, #612]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	4999      	ldr	r1, [pc, #612]	; (8000f1c <HAL_RCC_OscConfig+0x330>)
 8000cb8:	400a      	ands	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	4b96      	ldr	r3, [pc, #600]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b95      	ldr	r3, [pc, #596]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000cc2:	4997      	ldr	r1, [pc, #604]	; (8000f20 <HAL_RCC_OscConfig+0x334>)
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d014      	beq.n	8000cfa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fd20 	bl	8000714 <HAL_GetTick>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cda:	f7ff fd1b 	bl	8000714 <HAL_GetTick>
 8000cde:	0002      	movs	r2, r0
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b64      	cmp	r3, #100	; 0x64
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e28a      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0xee>
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fd0b 	bl	8000714 <HAL_GetTick>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d04:	f7ff fd06 	bl	8000714 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b64      	cmp	r3, #100	; 0x64
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e275      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d16:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d1f0      	bne.n	8000d04 <HAL_RCC_OscConfig+0x118>
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <HAL_RCC_OscConfig+0x146>
 8000d30:	e069      	b.n	8000e06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d32:	4b79      	ldr	r3, [pc, #484]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	220c      	movs	r2, #12
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d00b      	beq.n	8000d54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d3c:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	220c      	movs	r2, #12
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d11c      	bne.n	8000d82 <HAL_RCC_OscConfig+0x196>
 8000d48:	4b73      	ldr	r3, [pc, #460]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	025b      	lsls	r3, r3, #9
 8000d50:	4013      	ands	r3, r2
 8000d52:	d116      	bne.n	8000d82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d54:	4b70      	ldr	r3, [pc, #448]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d005      	beq.n	8000d6a <HAL_RCC_OscConfig+0x17e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d001      	beq.n	8000d6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e24b      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6a:	4b6b      	ldr	r3, [pc, #428]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	22f8      	movs	r2, #248	; 0xf8
 8000d70:	4393      	bics	r3, r2
 8000d72:	0019      	movs	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	00da      	lsls	r2, r3, #3
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d80:	e041      	b.n	8000e06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d024      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8a:	4b63      	ldr	r3, [pc, #396]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b62      	ldr	r3, [pc, #392]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fcbd 	bl	8000714 <HAL_GetTick>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da0:	f7ff fcb8 	bl	8000714 <HAL_GetTick>
 8000da4:	0002      	movs	r2, r0
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e227      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	4b59      	ldr	r3, [pc, #356]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d0f1      	beq.n	8000da0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbc:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	22f8      	movs	r2, #248	; 0xf8
 8000dc2:	4393      	bics	r3, r2
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	00da      	lsls	r2, r3, #3
 8000dcc:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e018      	b.n	8000e06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd4:	4b50      	ldr	r3, [pc, #320]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	2101      	movs	r1, #1
 8000ddc:	438a      	bics	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc98 	bl	8000714 <HAL_GetTick>
 8000de4:	0003      	movs	r3, r0
 8000de6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dea:	f7ff fc93 	bl	8000714 <HAL_GetTick>
 8000dee:	0002      	movs	r2, r0
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e202      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2202      	movs	r2, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	d1f1      	bne.n	8000dea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d036      	beq.n	8000e7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d019      	beq.n	8000e4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	430a      	orrs	r2, r1
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc76 	bl	8000714 <HAL_GetTick>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fc71 	bl	8000714 <HAL_GetTick>
 8000e32:	0002      	movs	r2, r0
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e1e0      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e44:	2202      	movs	r2, #2
 8000e46:	4013      	ands	r3, r2
 8000e48:	d0f1      	beq.n	8000e2e <HAL_RCC_OscConfig+0x242>
 8000e4a:	e018      	b.n	8000e7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	2101      	movs	r1, #1
 8000e54:	438a      	bics	r2, r1
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc5c 	bl	8000714 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc57 	bl	8000714 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1c6      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	2202      	movs	r2, #2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d1f1      	bne.n	8000e62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2204      	movs	r2, #4
 8000e84:	4013      	ands	r3, r2
 8000e86:	d100      	bne.n	8000e8a <HAL_RCC_OscConfig+0x29e>
 8000e88:	e0b4      	b.n	8000ff4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8a:	201f      	movs	r0, #31
 8000e8c:	183b      	adds	r3, r7, r0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	69da      	ldr	r2, [r3, #28]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	055b      	lsls	r3, r3, #21
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	d110      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	69da      	ldr	r2, [r3, #28]
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	0549      	lsls	r1, r1, #21
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	61da      	str	r2, [r3, #28]
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	69da      	ldr	r2, [r3, #28]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	055b      	lsls	r3, r3, #21
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000eba:	183b      	adds	r3, r7, r0
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d11a      	bne.n	8000f02 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	0049      	lsls	r1, r1, #1
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fc1b 	bl	8000714 <HAL_GetTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee4:	f7ff fc16 	bl	8000714 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e185      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4013      	ands	r3, r2
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10e      	bne.n	8000f28 <HAL_RCC_OscConfig+0x33c>
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	6a1a      	ldr	r2, [r3, #32]
 8000f0e:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_RCC_OscConfig+0x32c>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	621a      	str	r2, [r3, #32]
 8000f16:	e035      	b.n	8000f84 <HAL_RCC_OscConfig+0x398>
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	fffeffff 	.word	0xfffeffff
 8000f20:	fffbffff 	.word	0xfffbffff
 8000f24:	40007000 	.word	0x40007000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x35e>
 8000f30:	4bb6      	ldr	r3, [pc, #728]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f32:	6a1a      	ldr	r2, [r3, #32]
 8000f34:	4bb5      	ldr	r3, [pc, #724]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f36:	2101      	movs	r1, #1
 8000f38:	438a      	bics	r2, r1
 8000f3a:	621a      	str	r2, [r3, #32]
 8000f3c:	4bb3      	ldr	r3, [pc, #716]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f3e:	6a1a      	ldr	r2, [r3, #32]
 8000f40:	4bb2      	ldr	r3, [pc, #712]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	438a      	bics	r2, r1
 8000f46:	621a      	str	r2, [r3, #32]
 8000f48:	e01c      	b.n	8000f84 <HAL_RCC_OscConfig+0x398>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x380>
 8000f52:	4bae      	ldr	r3, [pc, #696]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f54:	6a1a      	ldr	r2, [r3, #32]
 8000f56:	4bad      	ldr	r3, [pc, #692]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f58:	2104      	movs	r1, #4
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	621a      	str	r2, [r3, #32]
 8000f5e:	4bab      	ldr	r3, [pc, #684]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f60:	6a1a      	ldr	r2, [r3, #32]
 8000f62:	4baa      	ldr	r3, [pc, #680]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	621a      	str	r2, [r3, #32]
 8000f6a:	e00b      	b.n	8000f84 <HAL_RCC_OscConfig+0x398>
 8000f6c:	4ba7      	ldr	r3, [pc, #668]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f6e:	6a1a      	ldr	r2, [r3, #32]
 8000f70:	4ba6      	ldr	r3, [pc, #664]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f72:	2101      	movs	r1, #1
 8000f74:	438a      	bics	r2, r1
 8000f76:	621a      	str	r2, [r3, #32]
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	4ba3      	ldr	r3, [pc, #652]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000f7e:	2104      	movs	r1, #4
 8000f80:	438a      	bics	r2, r1
 8000f82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d014      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fbc2 	bl	8000714 <HAL_GetTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f94:	e009      	b.n	8000faa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f7ff fbbd 	bl	8000714 <HAL_GetTick>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	4a9b      	ldr	r2, [pc, #620]	; (8001210 <HAL_RCC_OscConfig+0x624>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e12b      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000faa:	4b98      	ldr	r3, [pc, #608]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3aa>
 8000fb4:	e013      	b.n	8000fde <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fbad 	bl	8000714 <HAL_GetTick>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbe:	e009      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fba8 	bl	8000714 <HAL_GetTick>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4a91      	ldr	r2, [pc, #580]	; (8001210 <HAL_RCC_OscConfig+0x624>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e116      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	4b8d      	ldr	r3, [pc, #564]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fde:	231f      	movs	r3, #31
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d105      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe8:	4b88      	ldr	r3, [pc, #544]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000fea:	69da      	ldr	r2, [r3, #28]
 8000fec:	4b87      	ldr	r3, [pc, #540]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8000fee:	4989      	ldr	r1, [pc, #548]	; (8001214 <HAL_RCC_OscConfig+0x628>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d063      	beq.n	80010c6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d12a      	bne.n	800105c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001006:	4b81      	ldr	r3, [pc, #516]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100a:	4b80      	ldr	r3, [pc, #512]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800100c:	2104      	movs	r1, #4
 800100e:	430a      	orrs	r2, r1
 8001010:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001012:	4b7e      	ldr	r3, [pc, #504]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001016:	4b7d      	ldr	r3, [pc, #500]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fb79 	bl	8000714 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001028:	f7ff fb74 	bl	8000714 <HAL_GetTick>
 800102c:	0002      	movs	r2, r0
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e0e3      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103a:	4b74      	ldr	r3, [pc, #464]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d0f1      	beq.n	8001028 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001044:	4b71      	ldr	r3, [pc, #452]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	22f8      	movs	r2, #248	; 0xf8
 800104a:	4393      	bics	r3, r2
 800104c:	0019      	movs	r1, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	00da      	lsls	r2, r3, #3
 8001054:	4b6d      	ldr	r3, [pc, #436]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001056:	430a      	orrs	r2, r1
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
 800105a:	e034      	b.n	80010c6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	3305      	adds	r3, #5
 8001062:	d111      	bne.n	8001088 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001064:	4b69      	ldr	r3, [pc, #420]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800106a:	2104      	movs	r1, #4
 800106c:	438a      	bics	r2, r1
 800106e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001070:	4b66      	ldr	r3, [pc, #408]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001074:	22f8      	movs	r2, #248	; 0xf8
 8001076:	4393      	bics	r3, r2
 8001078:	0019      	movs	r1, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	00da      	lsls	r2, r3, #3
 8001080:	4b62      	ldr	r3, [pc, #392]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001082:	430a      	orrs	r2, r1
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
 8001086:	e01e      	b.n	80010c6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001088:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800108a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800108c:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800108e:	2104      	movs	r1, #4
 8001090:	430a      	orrs	r2, r1
 8001092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001094:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001098:	4b5c      	ldr	r3, [pc, #368]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800109a:	2101      	movs	r1, #1
 800109c:	438a      	bics	r2, r1
 800109e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a0:	f7ff fb38 	bl	8000714 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010aa:	f7ff fb33 	bl	8000714 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e0a2      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80010be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c0:	2202      	movs	r2, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f1      	bne.n	80010aa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x4e4>
 80010ce:	e097      	b.n	8001200 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	220c      	movs	r2, #12
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x4f2>
 80010dc:	e06b      	b.n	80011b6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d14c      	bne.n	8001180 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80010ec:	494a      	ldr	r1, [pc, #296]	; (8001218 <HAL_RCC_OscConfig+0x62c>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fb0f 	bl	8000714 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff fb0a 	bl	8000714 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e079      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	049b      	lsls	r3, r3, #18
 8001116:	4013      	ands	r3, r2
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	220f      	movs	r2, #15
 8001120:	4393      	bics	r3, r2
 8001122:	0019      	movs	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800112a:	430a      	orrs	r2, r1
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4a3a      	ldr	r2, [pc, #232]	; (800121c <HAL_RCC_OscConfig+0x630>)
 8001134:	4013      	ands	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	431a      	orrs	r2, r3
 8001142:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <HAL_RCC_OscConfig+0x620>)
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	0449      	lsls	r1, r1, #17
 8001152:	430a      	orrs	r2, r1
 8001154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fadd 	bl	8000714 <HAL_GetTick>
 800115a:	0003      	movs	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fad8 	bl	8000714 <HAL_GetTick>
 8001164:	0002      	movs	r2, r0
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e047      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	049b      	lsls	r3, r3, #18
 800117a:	4013      	ands	r3, r2
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x574>
 800117e:	e03f      	b.n	8001200 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_RCC_OscConfig+0x620>)
 8001186:	4924      	ldr	r1, [pc, #144]	; (8001218 <HAL_RCC_OscConfig+0x62c>)
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fac2 	bl	8000714 <HAL_GetTick>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fabd 	bl	8000714 <HAL_GetTick>
 800119a:	0002      	movs	r2, r0
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e02c      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	049b      	lsls	r3, r3, #18
 80011b0:	4013      	ands	r3, r2
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x5aa>
 80011b4:	e024      	b.n	8001200 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e01f      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_RCC_OscConfig+0x620>)
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	025b      	lsls	r3, r3, #9
 80011d4:	401a      	ands	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	429a      	cmp	r2, r3
 80011dc:	d10e      	bne.n	80011fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	220f      	movs	r2, #15
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d107      	bne.n	80011fc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	23f0      	movs	r3, #240	; 0xf0
 80011f0:	039b      	lsls	r3, r3, #14
 80011f2:	401a      	ands	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b008      	add	sp, #32
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	40021000 	.word	0x40021000
 8001210:	00001388 	.word	0x00001388
 8001214:	efffffff 	.word	0xefffffff
 8001218:	feffffff 	.word	0xfeffffff
 800121c:	ffc2ffff 	.word	0xffc2ffff

08001220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0b3      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d911      	bls.n	8001266 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b58      	ldr	r3, [pc, #352]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	4393      	bics	r3, r2
 800124a:	0019      	movs	r1, r3
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	4013      	ands	r3, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d001      	beq.n	8001266 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e09a      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d015      	beq.n	800129c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2204      	movs	r2, #4
 8001276:	4013      	ands	r3, r2
 8001278:	d006      	beq.n	8001288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001280:	21e0      	movs	r1, #224	; 0xe0
 8001282:	00c9      	lsls	r1, r1, #3
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001288:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	22f0      	movs	r2, #240	; 0xf0
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4013      	ands	r3, r2
 80012a4:	d040      	beq.n	8001328 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	4013      	ands	r3, r2
 80012b8:	d114      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e06e      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	049b      	lsls	r3, r3, #18
 80012ce:	4013      	ands	r3, r2
 80012d0:	d108      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e062      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e05b      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4393      	bics	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 80012f4:	430a      	orrs	r2, r1
 80012f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f8:	f7ff fa0c 	bl	8000714 <HAL_GetTick>
 80012fc:	0003      	movs	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001300:	e009      	b.n	8001316 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001302:	f7ff fa07 	bl	8000714 <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_RCC_ClockConfig+0x18c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e042      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	220c      	movs	r2, #12
 800131c:	401a      	ands	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	429a      	cmp	r2, r3
 8001326:	d1ec      	bne.n	8001302 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d211      	bcs.n	800135a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	4393      	bics	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_RCC_ClockConfig+0x184>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e020      	b.n	800139c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2204      	movs	r2, #4
 8001360:	4013      	ands	r3, r2
 8001362:	d009      	beq.n	8001378 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_RCC_ClockConfig+0x190>)
 800136a:	4013      	ands	r3, r2
 800136c:	0019      	movs	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001378:	f000 f820 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800137c:	0001      	movs	r1, r0
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_RCC_ClockConfig+0x188>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	220f      	movs	r2, #15
 8001386:	4013      	ands	r3, r2
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x194>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	000a      	movs	r2, r1
 800138e:	40da      	lsrs	r2, r3
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x198>)
 8001392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff f977 	bl	8000688 <HAL_InitTick>
  
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b004      	add	sp, #16
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40022000 	.word	0x40022000
 80013a8:	40021000 	.word	0x40021000
 80013ac:	00001388 	.word	0x00001388
 80013b0:	fffff8ff 	.word	0xfffff8ff
 80013b4:	08001ce0 	.word	0x08001ce0
 80013b8:	20000000 	.word	0x20000000

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08f      	sub	sp, #60	; 0x3c
 80013c0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80013c2:	2314      	movs	r3, #20
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	4a2b      	ldr	r2, [pc, #172]	; (8001474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ca:	c313      	stmia	r3!, {r0, r1, r4}
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013d6:	c313      	stmia	r3!, {r0, r1, r4}
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e4:	2300      	movs	r3, #0
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_RCC_GetSysClockFreq+0xc0>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d002      	beq.n	8001406 <HAL_RCC_GetSysClockFreq+0x4a>
 8001400:	2b08      	cmp	r3, #8
 8001402:	d003      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x50>
 8001404:	e02d      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800140a:	e02d      	b.n	8001468 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	220f      	movs	r2, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2214      	movs	r2, #20
 8001416:	18ba      	adds	r2, r7, r2
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_RCC_GetSysClockFreq+0xc0>)
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	220f      	movs	r2, #15
 8001422:	4013      	ands	r3, r2
 8001424:	1d3a      	adds	r2, r7, #4
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800142a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	025b      	lsls	r3, r3, #9
 8001430:	4013      	ands	r3, r2
 8001432:	d009      	beq.n	8001448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001438:	f7fe fe66 	bl	8000108 <__udivsi3>
 800143c:	0003      	movs	r3, r0
 800143e:	001a      	movs	r2, r3
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	4353      	muls	r3, r2
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
 8001446:	e009      	b.n	800145c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800144a:	000a      	movs	r2, r1
 800144c:	0152      	lsls	r2, r2, #5
 800144e:	1a52      	subs	r2, r2, r1
 8001450:	0193      	lsls	r3, r2, #6
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	185b      	adds	r3, r3, r1
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001460:	e002      	b.n	8001468 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001466:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b00f      	add	sp, #60	; 0x3c
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	08001cc0 	.word	0x08001cc0
 8001478:	08001cd0 	.word	0x08001cd0
 800147c:	40021000 	.word	0x40021000
 8001480:	007a1200 	.word	0x007a1200

08001484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <HAL_RCC_GetHCLKFreq+0x10>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	20000000 	.word	0x20000000

08001498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800149c:	f7ff fff2 	bl	8001484 <HAL_RCC_GetHCLKFreq>
 80014a0:	0001      	movs	r1, r0
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	2207      	movs	r2, #7
 80014aa:	4013      	ands	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	40d9      	lsrs	r1, r3
 80014b2:	000b      	movs	r3, r1
}    
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	40021000 	.word	0x40021000
 80014c0:	08001cf0 	.word	0x08001cf0

080014c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80014e0:	e08e      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2017      	movs	r0, #23
 80014e4:	183b      	adds	r3, r7, r0
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	055b      	lsls	r3, r3, #21
 80014f2:	4013      	ands	r3, r2
 80014f4:	d110      	bne.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0549      	lsls	r1, r1, #21
 8001500:	430a      	orrs	r2, r1
 8001502:	61da      	str	r2, [r3, #28]
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	055b      	lsls	r3, r3, #21
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	183b      	adds	r3, r7, r0
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4013      	ands	r3, r2
 8001522:	d11a      	bne.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001524:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	0049      	lsls	r1, r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff f8ef 	bl	8000714 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	e008      	b.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153c:	f7ff f8ea 	bl	8000714 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e077      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4013      	ands	r3, r2
 8001558:	d0f0      	beq.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d034      	beq.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4013      	ands	r3, r2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d02c      	beq.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a33      	ldr	r2, [pc, #204]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001588:	6a1a      	ldr	r2, [r3, #32]
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	0249      	lsls	r1, r1, #9
 8001590:	430a      	orrs	r2, r1
 8001592:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001596:	6a1a      	ldr	r2, [r3, #32]
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800159a:	492e      	ldr	r1, [pc, #184]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800159c:	400a      	ands	r2, r1
 800159e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff f8b1 	bl	8000714 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b6:	e009      	b.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff f8ac 	bl	8000714 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	4a25      	ldr	r2, [pc, #148]	; (8001658 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e038      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80015fa:	4918      	ldr	r1, [pc, #96]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d009      	beq.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	2203      	movs	r2, #3
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800161a:	430a      	orrs	r2, r1
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2220      	movs	r2, #32
 8001624:	4013      	ands	r3, r2
 8001626:	d009      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	2210      	movs	r2, #16
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001638:	430a      	orrs	r2, r1
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b006      	add	sp, #24
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	40007000 	.word	0x40007000
 8001650:	fffffcff 	.word	0xfffffcff
 8001654:	fffeffff 	.word	0xfffeffff
 8001658:	00001388 	.word	0x00001388
 800165c:	efffffff 	.word	0xefffffff

08001660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e044      	b.n	80016fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2274      	movs	r2, #116	; 0x74
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	0018      	movs	r0, r3
 8001686:	f7fe ff73 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2224      	movs	r2, #36	; 0x24
 800168e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2101      	movs	r1, #1
 800169c:	438a      	bics	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f830 	bl	8001708 <UART_SetConfig>
 80016a8:	0003      	movs	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e024      	b.n	80016fc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f94d 	bl	800195c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	490d      	ldr	r1, [pc, #52]	; (8001704 <HAL_UART_Init+0xa4>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	212a      	movs	r1, #42	; 0x2a
 80016de:	438a      	bics	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f9e5 	bl	8001ac4 <UART_CheckIdleState>
 80016fa:	0003      	movs	r3, r0
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	ffffb7ff 	.word	0xffffb7ff

08001708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001710:	231e      	movs	r3, #30
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4313      	orrs	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a84      	ldr	r2, [pc, #528]	; (8001948 <UART_SetConfig+0x240>)
 8001738:	4013      	ands	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a7f      	ldr	r2, [pc, #508]	; (800194c <UART_SetConfig+0x244>)
 800174e:	4013      	ands	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a76      	ldr	r2, [pc, #472]	; (8001950 <UART_SetConfig+0x248>)
 8001776:	4013      	ands	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001784:	4b73      	ldr	r3, [pc, #460]	; (8001954 <UART_SetConfig+0x24c>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	2b03      	cmp	r3, #3
 800178e:	d00d      	beq.n	80017ac <UART_SetConfig+0xa4>
 8001790:	d81b      	bhi.n	80017ca <UART_SetConfig+0xc2>
 8001792:	2b02      	cmp	r3, #2
 8001794:	d014      	beq.n	80017c0 <UART_SetConfig+0xb8>
 8001796:	d818      	bhi.n	80017ca <UART_SetConfig+0xc2>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <UART_SetConfig+0x9a>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d00a      	beq.n	80017b6 <UART_SetConfig+0xae>
 80017a0:	e013      	b.n	80017ca <UART_SetConfig+0xc2>
 80017a2:	231f      	movs	r3, #31
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e012      	b.n	80017d2 <UART_SetConfig+0xca>
 80017ac:	231f      	movs	r3, #31
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	2202      	movs	r2, #2
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e00d      	b.n	80017d2 <UART_SetConfig+0xca>
 80017b6:	231f      	movs	r3, #31
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2204      	movs	r2, #4
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e008      	b.n	80017d2 <UART_SetConfig+0xca>
 80017c0:	231f      	movs	r3, #31
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2208      	movs	r2, #8
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e003      	b.n	80017d2 <UART_SetConfig+0xca>
 80017ca:	231f      	movs	r3, #31
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2210      	movs	r2, #16
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	429a      	cmp	r2, r3
 80017de:	d15d      	bne.n	800189c <UART_SetConfig+0x194>
  {
    switch (clocksource)
 80017e0:	231f      	movs	r3, #31
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d015      	beq.n	8001816 <UART_SetConfig+0x10e>
 80017ea:	dc18      	bgt.n	800181e <UART_SetConfig+0x116>
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00d      	beq.n	800180c <UART_SetConfig+0x104>
 80017f0:	dc15      	bgt.n	800181e <UART_SetConfig+0x116>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <UART_SetConfig+0xf4>
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d005      	beq.n	8001806 <UART_SetConfig+0xfe>
 80017fa:	e010      	b.n	800181e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017fc:	f7ff fe4c 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
 8001800:	0003      	movs	r3, r0
 8001802:	61bb      	str	r3, [r7, #24]
        break;
 8001804:	e012      	b.n	800182c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <UART_SetConfig+0x250>)
 8001808:	61bb      	str	r3, [r7, #24]
        break;
 800180a:	e00f      	b.n	800182c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800180c:	f7ff fdd6 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 8001810:	0003      	movs	r3, r0
 8001812:	61bb      	str	r3, [r7, #24]
        break;
 8001814:	e00a      	b.n	800182c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	61bb      	str	r3, [r7, #24]
        break;
 800181c:	e006      	b.n	800182c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001822:	231e      	movs	r3, #30
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
        break;
 800182a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <UART_SetConfig+0x12c>
 8001832:	e07b      	b.n	800192c <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	005a      	lsls	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	18d2      	adds	r2, r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f7fe fc5e 	bl	8000108 <__udivsi3>
 800184c:	0003      	movs	r3, r0
 800184e:	b29b      	uxth	r3, r3
 8001850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d91c      	bls.n	8001892 <UART_SetConfig+0x18a>
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	429a      	cmp	r2, r3
 8001860:	d217      	bcs.n	8001892 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29a      	uxth	r2, r3
 8001866:	200e      	movs	r0, #14
 8001868:	183b      	adds	r3, r7, r0
 800186a:	210f      	movs	r1, #15
 800186c:	438a      	bics	r2, r1
 800186e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	b29b      	uxth	r3, r3
 8001876:	2207      	movs	r2, #7
 8001878:	4013      	ands	r3, r2
 800187a:	b299      	uxth	r1, r3
 800187c:	183b      	adds	r3, r7, r0
 800187e:	183a      	adds	r2, r7, r0
 8001880:	8812      	ldrh	r2, [r2, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	183a      	adds	r2, r7, r0
 800188c:	8812      	ldrh	r2, [r2, #0]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	e04c      	b.n	800192c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8001892:	231e      	movs	r3, #30
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e047      	b.n	800192c <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 800189c:	231f      	movs	r3, #31
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d015      	beq.n	80018d2 <UART_SetConfig+0x1ca>
 80018a6:	dc18      	bgt.n	80018da <UART_SetConfig+0x1d2>
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d00d      	beq.n	80018c8 <UART_SetConfig+0x1c0>
 80018ac:	dc15      	bgt.n	80018da <UART_SetConfig+0x1d2>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <UART_SetConfig+0x1b0>
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d005      	beq.n	80018c2 <UART_SetConfig+0x1ba>
 80018b6:	e010      	b.n	80018da <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80018b8:	f7ff fdee 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        break;
 80018c0:	e012      	b.n	80018e8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <UART_SetConfig+0x250>)
 80018c4:	61bb      	str	r3, [r7, #24]
        break;
 80018c6:	e00f      	b.n	80018e8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80018c8:	f7ff fd78 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
        break;
 80018d0:	e00a      	b.n	80018e8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	61bb      	str	r3, [r7, #24]
        break;
 80018d8:	e006      	b.n	80018e8 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80018de:	231e      	movs	r3, #30
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
        break;
 80018e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01e      	beq.n	800192c <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	085a      	lsrs	r2, r3, #1
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	18d2      	adds	r2, r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7fe fc02 	bl	8000108 <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	b29b      	uxth	r3, r3
 8001908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d909      	bls.n	8001924 <UART_SetConfig+0x21c>
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	429a      	cmp	r2, r3
 8001918:	d204      	bcs.n	8001924 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e003      	b.n	800192c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8001924:	231e      	movs	r3, #30
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001938:	231e      	movs	r3, #30
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	781b      	ldrb	r3, [r3, #0]
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b008      	add	sp, #32
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	ffff69f3 	.word	0xffff69f3
 800194c:	ffffcfff 	.word	0xffffcfff
 8001950:	fffff4ff 	.word	0xfffff4ff
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200

0800195c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	d00b      	beq.n	8001986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <UART_AdvFeatureConfig+0x144>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d00b      	beq.n	80019a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <UART_AdvFeatureConfig+0x148>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00b      	beq.n	80019ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <UART_AdvFeatureConfig+0x14c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2208      	movs	r2, #8
 80019d0:	4013      	ands	r3, r2
 80019d2:	d00b      	beq.n	80019ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <UART_AdvFeatureConfig+0x150>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d00b      	beq.n	8001a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <UART_AdvFeatureConfig+0x154>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2220      	movs	r2, #32
 8001a14:	4013      	ands	r3, r2
 8001a16:	d00b      	beq.n	8001a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <UART_AdvFeatureConfig+0x158>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	4013      	ands	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <UART_AdvFeatureConfig+0x15c>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	035b      	lsls	r3, r3, #13
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d10b      	bne.n	8001a76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <UART_AdvFeatureConfig+0x160>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d00b      	beq.n	8001a98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <UART_AdvFeatureConfig+0x164>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
  }
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	fffdffff 	.word	0xfffdffff
 8001aa4:	fffeffff 	.word	0xfffeffff
 8001aa8:	fffbffff 	.word	0xfffbffff
 8001aac:	ffff7fff 	.word	0xffff7fff
 8001ab0:	ffffefff 	.word	0xffffefff
 8001ab4:	ffffdfff 	.word	0xffffdfff
 8001ab8:	ffefffff 	.word	0xffefffff
 8001abc:	ff9fffff 	.word	0xff9fffff
 8001ac0:	fff7ffff 	.word	0xfff7ffff

08001ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ad4:	f7fe fe1e 	bl	8000714 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d10c      	bne.n	8001b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0391      	lsls	r1, r2, #14
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <UART_CheckIdleState+0x8c>)
 8001af4:	9200      	str	r2, [sp, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f000 f82c 	bl	8001b54 <UART_WaitOnFlagUntilTimeout>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e021      	b.n	8001b48 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d10c      	bne.n	8001b2c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	03d1      	lsls	r1, r2, #15
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <UART_CheckIdleState+0x8c>)
 8001b1c:	9200      	str	r2, [sp, #0]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f000 f818 	bl	8001b54 <UART_WaitOnFlagUntilTimeout>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d001      	beq.n	8001b2c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e00d      	b.n	8001b48 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2274      	movs	r2, #116	; 0x74
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	01ffffff 	.word	0x01ffffff

08001b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b64:	e05e      	b.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	d05b      	beq.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b6c:	f7fe fdd2 	bl	8000714 <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d302      	bcc.n	8001b82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11b      	bne.n	8001bba <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	492f      	ldr	r1, [pc, #188]	; (8001c4c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	438a      	bics	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2274      	movs	r2, #116	; 0x74
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e044      	b.n	8001c44 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d02e      	beq.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d124      	bne.n	8001c24 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4917      	ldr	r1, [pc, #92]	; (8001c4c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	438a      	bics	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2220      	movs	r2, #32
 8001c08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	2120      	movs	r1, #32
 8001c16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2274      	movs	r2, #116	; 0x74
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e00f      	b.n	8001c44 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	4153      	adcs	r3, r2
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	001a      	movs	r2, r3
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d091      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	fffffe5f 	.word	0xfffffe5f

08001c50 <__libc_init_array>:
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	2600      	movs	r6, #0
 8001c54:	4d0c      	ldr	r5, [pc, #48]	; (8001c88 <__libc_init_array+0x38>)
 8001c56:	4c0d      	ldr	r4, [pc, #52]	; (8001c8c <__libc_init_array+0x3c>)
 8001c58:	1b64      	subs	r4, r4, r5
 8001c5a:	10a4      	asrs	r4, r4, #2
 8001c5c:	42a6      	cmp	r6, r4
 8001c5e:	d109      	bne.n	8001c74 <__libc_init_array+0x24>
 8001c60:	2600      	movs	r6, #0
 8001c62:	f000 f821 	bl	8001ca8 <_init>
 8001c66:	4d0a      	ldr	r5, [pc, #40]	; (8001c90 <__libc_init_array+0x40>)
 8001c68:	4c0a      	ldr	r4, [pc, #40]	; (8001c94 <__libc_init_array+0x44>)
 8001c6a:	1b64      	subs	r4, r4, r5
 8001c6c:	10a4      	asrs	r4, r4, #2
 8001c6e:	42a6      	cmp	r6, r4
 8001c70:	d105      	bne.n	8001c7e <__libc_init_array+0x2e>
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
 8001c74:	00b3      	lsls	r3, r6, #2
 8001c76:	58eb      	ldr	r3, [r5, r3]
 8001c78:	4798      	blx	r3
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	e7ee      	b.n	8001c5c <__libc_init_array+0xc>
 8001c7e:	00b3      	lsls	r3, r6, #2
 8001c80:	58eb      	ldr	r3, [r5, r3]
 8001c82:	4798      	blx	r3
 8001c84:	3601      	adds	r6, #1
 8001c86:	e7f2      	b.n	8001c6e <__libc_init_array+0x1e>
 8001c88:	08001cf8 	.word	0x08001cf8
 8001c8c:	08001cf8 	.word	0x08001cf8
 8001c90:	08001cf8 	.word	0x08001cf8
 8001c94:	08001cfc 	.word	0x08001cfc

08001c98 <memset>:
 8001c98:	0003      	movs	r3, r0
 8001c9a:	1882      	adds	r2, r0, r2
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <memset+0xa>
 8001ca0:	4770      	bx	lr
 8001ca2:	7019      	strb	r1, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	e7f9      	b.n	8001c9c <memset+0x4>

08001ca8 <_init>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr

08001cb4 <_fini>:
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cba:	bc08      	pop	{r3}
 8001cbc:	469e      	mov	lr, r3
 8001cbe:	4770      	bx	lr
