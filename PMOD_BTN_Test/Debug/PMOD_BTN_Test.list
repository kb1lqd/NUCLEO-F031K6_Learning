
PMOD_BTN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007818  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080078d8  080078d8  000178d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007d9c  08007d9c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d9c  08007d9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001e0  08007f84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007f84  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4e0  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002170  00000000  00000000  0002c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122c8  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9bd  00000000  00000000  000421c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068217  00000000  00000000  0004fb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  000b7df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078c0 	.word	0x080078c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	080078c0 	.word	0x080078c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff33 	bl	80012a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe7d 	bl	800114c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff25 	bl	80012a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff1b 	bl	80012a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe9f 	bl	80011c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe95 	bl	80011c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fdbe 	bl	80020d8 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc91 	bl	80020d8 <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa37 	bl	80020d8 <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 fa11 	bl	80020d8 <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	08007924 	.word	0x08007924
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff fa1b 	bl	800024c <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff fa03 	bl	800024c <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9be 	bl	800024c <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f9aa 	bl	800024c <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f856 	bl	80020d8 <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f847 	bl	80020d8 <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe20 	bl	80020d8 <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdf7 	bl	80020d8 <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	08007964 	.word	0x08007964
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc81 	bl	80020d8 <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc73 	bl	80020d8 <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbd8 	bl	80020d8 <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa6b 	bl	80020d8 <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_dcmpun>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	0005      	movs	r5, r0
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <__aeabi_dcmpun+0x38>)
 8001f8a:	030c      	lsls	r4, r1, #12
 8001f8c:	0016      	movs	r6, r2
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	031a      	lsls	r2, r3, #12
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0d49      	lsrs	r1, r1, #21
 8001f98:	0b12      	lsrs	r2, r2, #12
 8001f9a:	0d5b      	lsrs	r3, r3, #21
 8001f9c:	4281      	cmp	r1, r0
 8001f9e:	d008      	beq.n	8001fb2 <__aeabi_dcmpun+0x2e>
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <__aeabi_dcmpun+0x38>)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d103      	bne.n	8001fb0 <__aeabi_dcmpun+0x2c>
 8001fa8:	4332      	orrs	r2, r6
 8001faa:	0010      	movs	r0, r2
 8001fac:	1e42      	subs	r2, r0, #1
 8001fae:	4190      	sbcs	r0, r2
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	432c      	orrs	r4, r5
 8001fb6:	d1fb      	bne.n	8001fb0 <__aeabi_dcmpun+0x2c>
 8001fb8:	e7f2      	b.n	8001fa0 <__aeabi_dcmpun+0x1c>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	000007ff 	.word	0x000007ff

08001fc0 <__aeabi_d2iz>:
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	b530      	push	{r4, r5, lr}
 8001fc4:	4c13      	ldr	r4, [pc, #76]	; (8002014 <__aeabi_d2iz+0x54>)
 8001fc6:	0053      	lsls	r3, r2, #1
 8001fc8:	0309      	lsls	r1, r1, #12
 8001fca:	0005      	movs	r5, r0
 8001fcc:	0b09      	lsrs	r1, r1, #12
 8001fce:	2000      	movs	r0, #0
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	0fd2      	lsrs	r2, r2, #31
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	dd04      	ble.n	8001fe2 <__aeabi_d2iz+0x22>
 8001fd8:	480f      	ldr	r0, [pc, #60]	; (8002018 <__aeabi_d2iz+0x58>)
 8001fda:	4283      	cmp	r3, r0
 8001fdc:	dd02      	ble.n	8001fe4 <__aeabi_d2iz+0x24>
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <__aeabi_d2iz+0x5c>)
 8001fe0:	18d0      	adds	r0, r2, r3
 8001fe2:	bd30      	pop	{r4, r5, pc}
 8001fe4:	2080      	movs	r0, #128	; 0x80
 8001fe6:	0340      	lsls	r0, r0, #13
 8001fe8:	4301      	orrs	r1, r0
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <__aeabi_d2iz+0x60>)
 8001fec:	1ac0      	subs	r0, r0, r3
 8001fee:	281f      	cmp	r0, #31
 8001ff0:	dd08      	ble.n	8002004 <__aeabi_d2iz+0x44>
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <__aeabi_d2iz+0x64>)
 8001ff4:	1ac3      	subs	r3, r0, r3
 8001ff6:	40d9      	lsrs	r1, r3
 8001ff8:	000b      	movs	r3, r1
 8001ffa:	4258      	negs	r0, r3
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <__aeabi_d2iz+0x22>
 8002000:	0018      	movs	r0, r3
 8002002:	e7ee      	b.n	8001fe2 <__aeabi_d2iz+0x22>
 8002004:	4c08      	ldr	r4, [pc, #32]	; (8002028 <__aeabi_d2iz+0x68>)
 8002006:	40c5      	lsrs	r5, r0
 8002008:	46a4      	mov	ip, r4
 800200a:	4463      	add	r3, ip
 800200c:	4099      	lsls	r1, r3
 800200e:	000b      	movs	r3, r1
 8002010:	432b      	orrs	r3, r5
 8002012:	e7f2      	b.n	8001ffa <__aeabi_d2iz+0x3a>
 8002014:	000003fe 	.word	0x000003fe
 8002018:	0000041d 	.word	0x0000041d
 800201c:	7fffffff 	.word	0x7fffffff
 8002020:	00000433 	.word	0x00000433
 8002024:	00000413 	.word	0x00000413
 8002028:	fffffbed 	.word	0xfffffbed

0800202c <__aeabi_i2d>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	2800      	cmp	r0, #0
 8002030:	d016      	beq.n	8002060 <__aeabi_i2d+0x34>
 8002032:	17c3      	asrs	r3, r0, #31
 8002034:	18c5      	adds	r5, r0, r3
 8002036:	405d      	eors	r5, r3
 8002038:	0fc4      	lsrs	r4, r0, #31
 800203a:	0028      	movs	r0, r5
 800203c:	f000 f84c 	bl	80020d8 <__clzsi2>
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <__aeabi_i2d+0x5c>)
 8002042:	1a12      	subs	r2, r2, r0
 8002044:	280a      	cmp	r0, #10
 8002046:	dc16      	bgt.n	8002076 <__aeabi_i2d+0x4a>
 8002048:	0003      	movs	r3, r0
 800204a:	002e      	movs	r6, r5
 800204c:	3315      	adds	r3, #21
 800204e:	409e      	lsls	r6, r3
 8002050:	230b      	movs	r3, #11
 8002052:	1a18      	subs	r0, r3, r0
 8002054:	40c5      	lsrs	r5, r0
 8002056:	0553      	lsls	r3, r2, #21
 8002058:	032d      	lsls	r5, r5, #12
 800205a:	0b2d      	lsrs	r5, r5, #12
 800205c:	0d5b      	lsrs	r3, r3, #21
 800205e:	e003      	b.n	8002068 <__aeabi_i2d+0x3c>
 8002060:	2400      	movs	r4, #0
 8002062:	2300      	movs	r3, #0
 8002064:	2500      	movs	r5, #0
 8002066:	2600      	movs	r6, #0
 8002068:	051b      	lsls	r3, r3, #20
 800206a:	432b      	orrs	r3, r5
 800206c:	07e4      	lsls	r4, r4, #31
 800206e:	4323      	orrs	r3, r4
 8002070:	0030      	movs	r0, r6
 8002072:	0019      	movs	r1, r3
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	380b      	subs	r0, #11
 8002078:	4085      	lsls	r5, r0
 800207a:	0553      	lsls	r3, r2, #21
 800207c:	032d      	lsls	r5, r5, #12
 800207e:	2600      	movs	r6, #0
 8002080:	0b2d      	lsrs	r5, r5, #12
 8002082:	0d5b      	lsrs	r3, r3, #21
 8002084:	e7f0      	b.n	8002068 <__aeabi_i2d+0x3c>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	0000041e 	.word	0x0000041e

0800208c <__aeabi_ui2d>:
 800208c:	b510      	push	{r4, lr}
 800208e:	1e04      	subs	r4, r0, #0
 8002090:	d010      	beq.n	80020b4 <__aeabi_ui2d+0x28>
 8002092:	f000 f821 	bl	80020d8 <__clzsi2>
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <__aeabi_ui2d+0x48>)
 8002098:	1a1b      	subs	r3, r3, r0
 800209a:	280a      	cmp	r0, #10
 800209c:	dc11      	bgt.n	80020c2 <__aeabi_ui2d+0x36>
 800209e:	220b      	movs	r2, #11
 80020a0:	0021      	movs	r1, r4
 80020a2:	1a12      	subs	r2, r2, r0
 80020a4:	40d1      	lsrs	r1, r2
 80020a6:	3015      	adds	r0, #21
 80020a8:	030a      	lsls	r2, r1, #12
 80020aa:	055b      	lsls	r3, r3, #21
 80020ac:	4084      	lsls	r4, r0
 80020ae:	0b12      	lsrs	r2, r2, #12
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	e001      	b.n	80020b8 <__aeabi_ui2d+0x2c>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2200      	movs	r2, #0
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	4313      	orrs	r3, r2
 80020bc:	0020      	movs	r0, r4
 80020be:	0019      	movs	r1, r3
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	0022      	movs	r2, r4
 80020c4:	380b      	subs	r0, #11
 80020c6:	4082      	lsls	r2, r0
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	0312      	lsls	r2, r2, #12
 80020cc:	2400      	movs	r4, #0
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0d5b      	lsrs	r3, r3, #21
 80020d2:	e7f1      	b.n	80020b8 <__aeabi_ui2d+0x2c>
 80020d4:	0000041e 	.word	0x0000041e

080020d8 <__clzsi2>:
 80020d8:	211c      	movs	r1, #28
 80020da:	2301      	movs	r3, #1
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	4298      	cmp	r0, r3
 80020e0:	d301      	bcc.n	80020e6 <__clzsi2+0xe>
 80020e2:	0c00      	lsrs	r0, r0, #16
 80020e4:	3910      	subs	r1, #16
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	4298      	cmp	r0, r3
 80020ea:	d301      	bcc.n	80020f0 <__clzsi2+0x18>
 80020ec:	0a00      	lsrs	r0, r0, #8
 80020ee:	3908      	subs	r1, #8
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d301      	bcc.n	80020fa <__clzsi2+0x22>
 80020f6:	0900      	lsrs	r0, r0, #4
 80020f8:	3904      	subs	r1, #4
 80020fa:	a202      	add	r2, pc, #8	; (adr r2, 8002104 <__clzsi2+0x2c>)
 80020fc:	5c10      	ldrb	r0, [r2, r0]
 80020fe:	1840      	adds	r0, r0, r1
 8002100:	4770      	bx	lr
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	02020304 	.word	0x02020304
 8002108:	01010101 	.word	0x01010101
	...

08002114 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af0a      	add	r7, sp, #40	; 0x28
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	000c      	movs	r4, r1
 800211e:	0010      	movs	r0, r2
 8002120:	0019      	movs	r1, r3
 8002122:	250a      	movs	r5, #10
 8002124:	197b      	adds	r3, r7, r5
 8002126:	1c22      	adds	r2, r4, #0
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	2408      	movs	r4, #8
 800212c:	193b      	adds	r3, r7, r4
 800212e:	1c02      	adds	r2, r0, #0
 8002130:	801a      	strh	r2, [r3, #0]
 8002132:	1dbb      	adds	r3, r7, #6
 8002134:	1c0a      	adds	r2, r1, #0
 8002136:	801a      	strh	r2, [r3, #0]
  if(_fourbit_mode)
 8002138:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <LiquidCrystal+0xcc>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d024      	beq.n	800218a <LiquidCrystal+0x76>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8002140:	193b      	adds	r3, r7, r4
 8002142:	8818      	ldrh	r0, [r3, #0]
 8002144:	197b      	adds	r3, r7, r5
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	2300      	movs	r3, #0
 800214c:	9308      	str	r3, [sp, #32]
 800214e:	2300      	movs	r3, #0
 8002150:	9307      	str	r3, [sp, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	9306      	str	r3, [sp, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	9305      	str	r3, [sp, #20]
 800215a:	232c      	movs	r3, #44	; 0x2c
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	9304      	str	r3, [sp, #16]
 8002162:	2328      	movs	r3, #40	; 0x28
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	9303      	str	r3, [sp, #12]
 800216a:	2324      	movs	r3, #36	; 0x24
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2320      	movs	r3, #32
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	0003      	movs	r3, r0
 8002182:	2001      	movs	r0, #1
 8002184:	f000 f82e 	bl	80021e4 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8002188:	e025      	b.n	80021d6 <LiquidCrystal+0xc2>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800218a:	2308      	movs	r3, #8
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	8818      	ldrh	r0, [r3, #0]
 8002190:	230a      	movs	r3, #10
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	2300      	movs	r3, #0
 800219a:	9308      	str	r3, [sp, #32]
 800219c:	2300      	movs	r3, #0
 800219e:	9307      	str	r3, [sp, #28]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9306      	str	r3, [sp, #24]
 80021a4:	2300      	movs	r3, #0
 80021a6:	9305      	str	r3, [sp, #20]
 80021a8:	232c      	movs	r3, #44	; 0x2c
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	9304      	str	r3, [sp, #16]
 80021b0:	2328      	movs	r3, #40	; 0x28
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	9303      	str	r3, [sp, #12]
 80021b8:	2324      	movs	r3, #36	; 0x24
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	9302      	str	r3, [sp, #8]
 80021c0:	2320      	movs	r3, #32
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	1dbb      	adds	r3, r7, #6
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	0003      	movs	r3, r0
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f807 	bl	80021e4 <init>
}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	20000000 	.word	0x20000000

080021e4 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	0004      	movs	r4, r0
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	0010      	movs	r0, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	250f      	movs	r5, #15
 80021f4:	197b      	adds	r3, r7, r5
 80021f6:	1c22      	adds	r2, r4, #0
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	240c      	movs	r4, #12
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	801a      	strh	r2, [r3, #0]
 8002202:	1dbb      	adds	r3, r7, #6
 8002204:	1c0a      	adds	r2, r1, #0
 8002206:	801a      	strh	r2, [r3, #0]
  _rs_pin = rs;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <init+0xbc>)
 800220a:	193a      	adds	r2, r7, r4
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	801a      	strh	r2, [r3, #0]
  _rw_pin = rw;
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <init+0xc0>)
 8002212:	1dba      	adds	r2, r7, #6
 8002214:	8812      	ldrh	r2, [r2, #0]
 8002216:	801a      	strh	r2, [r3, #0]
  _enable_pin = enable;
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <init+0xc4>)
 800221a:	2320      	movs	r3, #32
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <init+0xc8>)
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	601a      	str	r2, [r3, #0]
  
  _data_pins[0] = d0;
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <init+0xcc>)
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	18ba      	adds	r2, r7, r2
 800222e:	8812      	ldrh	r2, [r2, #0]
 8002230:	801a      	strh	r2, [r3, #0]
  _data_pins[1] = d1;
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <init+0xcc>)
 8002234:	2228      	movs	r2, #40	; 0x28
 8002236:	18ba      	adds	r2, r7, r2
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	805a      	strh	r2, [r3, #2]
  _data_pins[2] = d2;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <init+0xcc>)
 800223e:	222c      	movs	r2, #44	; 0x2c
 8002240:	18ba      	adds	r2, r7, r2
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	809a      	strh	r2, [r3, #4]
  _data_pins[3] = d3; 
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <init+0xcc>)
 8002248:	2230      	movs	r2, #48	; 0x30
 800224a:	18ba      	adds	r2, r7, r2
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	80da      	strh	r2, [r3, #6]
  _data_pins[4] = d4;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <init+0xcc>)
 8002252:	2234      	movs	r2, #52	; 0x34
 8002254:	18ba      	adds	r2, r7, r2
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	811a      	strh	r2, [r3, #8]
  _data_pins[5] = d5;
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <init+0xcc>)
 800225c:	2238      	movs	r2, #56	; 0x38
 800225e:	18ba      	adds	r2, r7, r2
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	815a      	strh	r2, [r3, #10]
  _data_pins[6] = d6;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <init+0xcc>)
 8002266:	223c      	movs	r2, #60	; 0x3c
 8002268:	18ba      	adds	r2, r7, r2
 800226a:	8812      	ldrh	r2, [r2, #0]
 800226c:	819a      	strh	r2, [r3, #12]
  _data_pins[7] = d7;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <init+0xcc>)
 8002270:	2240      	movs	r2, #64	; 0x40
 8002272:	18ba      	adds	r2, r7, r2
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	81da      	strh	r2, [r3, #14]

  if (fourbitmode)
 8002278:	197b      	adds	r3, r7, r5
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <init+0xa4>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <init+0xd0>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e002      	b.n	800228e <init+0xaa>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <init+0xd0>)
 800228a:	2210      	movs	r2, #16
 800228c:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 800228e:	2102      	movs	r1, #2
 8002290:	2010      	movs	r0, #16
 8002292:	f000 f811 	bl	80022b8 <begin>
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b004      	add	sp, #16
 800229c:	bdb0      	pop	{r4, r5, r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20000234 	.word	0x20000234
 80022a4:	20000214 	.word	0x20000214
 80022a8:	20000232 	.word	0x20000232
 80022ac:	20000218 	.word	0x20000218
 80022b0:	20000220 	.word	0x20000220
 80022b4:	20000231 	.word	0x20000231

080022b8 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	701a      	strb	r2, [r3, #0]
  if (lines > 1) {
 80022ca:	1dbb      	adds	r3, r7, #6
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d906      	bls.n	80022e0 <begin+0x28>
    _displayfunction |= LCD_2LINE;
 80022d2:	4b7d      	ldr	r3, [pc, #500]	; (80024c8 <begin+0x210>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2208      	movs	r2, #8
 80022d8:	4313      	orrs	r3, r2
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b7a      	ldr	r3, [pc, #488]	; (80024c8 <begin+0x210>)
 80022de:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80022e0:	4b7a      	ldr	r3, [pc, #488]	; (80024cc <begin+0x214>)
 80022e2:	1dba      	adds	r2, r7, #6
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	701a      	strb	r2, [r3, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3340      	adds	r3, #64	; 0x40
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	2000      	movs	r0, #0
 80022f6:	f000 f95d 	bl	80025b4 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80022fa:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <begin+0x218>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <begin+0x60>
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d106      	bne.n	8002318 <begin+0x60>
    _displayfunction |= LCD_5x10DOTS;
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <begin+0x210>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2204      	movs	r2, #4
 8002310:	4313      	orrs	r3, r2
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <begin+0x210>)
 8002316:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8002318:	f000 f8ec 	bl	80024f4 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 800231c:	210c      	movs	r1, #12
 800231e:	187b      	adds	r3, r7, r1
 8002320:	2203      	movs	r2, #3
 8002322:	60da      	str	r2, [r3, #12]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2201      	movs	r2, #1
 8002328:	605a      	str	r2, [r3, #4]

  if(_fourbit_mode)
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <begin+0x21c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01d      	beq.n	800236e <begin+0xb6>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8002332:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <begin+0x220>)
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	4b69      	ldr	r3, [pc, #420]	; (80024dc <begin+0x224>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	b29a      	uxth	r2, r3
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <begin+0x228>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <begin+0x22c>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <begin+0x22c>)
 8002350:	885b      	ldrh	r3, [r3, #2]
 8002352:	4313      	orrs	r3, r2
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <begin+0x22c>)
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	4313      	orrs	r3, r2
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <begin+0x22c>)
 8002360:	88db      	ldrh	r3, [r3, #6]
 8002362:	4313      	orrs	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	001a      	movs	r2, r3
 8002368:	187b      	adds	r3, r7, r1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e02d      	b.n	80023ca <begin+0x112>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <begin+0x220>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <begin+0x224>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <begin+0x228>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <begin+0x22c>)
 8002384:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002386:	4313      	orrs	r3, r2
 8002388:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <begin+0x22c>)
 800238c:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800238e:	4313      	orrs	r3, r2
 8002390:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <begin+0x22c>)
 8002394:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002396:	4313      	orrs	r3, r2
 8002398:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800239a:	4b52      	ldr	r3, [pc, #328]	; (80024e4 <begin+0x22c>)
 800239c:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800239e:	4313      	orrs	r3, r2
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <begin+0x22c>)
 80023a4:	891b      	ldrh	r3, [r3, #8]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <begin+0x22c>)
 80023ac:	895b      	ldrh	r3, [r3, #10]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <begin+0x22c>)
 80023b4:	899b      	ldrh	r3, [r3, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <begin+0x22c>)
 80023bc:	89db      	ldrh	r3, [r3, #14]
 80023be:	4313      	orrs	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	001a      	movs	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80023c4:	230c      	movs	r3, #12
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(_port, &gpio_init);
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <begin+0x230>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	220c      	movs	r2, #12
 80023d0:	18ba      	adds	r2, r7, r2
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 ff6d 	bl	80032b4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80023da:	2032      	movs	r0, #50	; 0x32
 80023dc:	f000 fe68 	bl	80030b0 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <begin+0x230>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <begin+0x220>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	0019      	movs	r1, r3
 80023ec:	f001 f8ca 	bl	8003584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80023f0:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <begin+0x230>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <begin+0x228>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	0019      	movs	r1, r3
 80023fc:	f001 f8c2 	bl	8003584 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8002400:	4b36      	ldr	r3, [pc, #216]	; (80024dc <begin+0x224>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2bff      	cmp	r3, #255	; 0xff
 8002406:	d007      	beq.n	8002418 <begin+0x160>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002408:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <begin+0x230>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <begin+0x224>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2200      	movs	r2, #0
 8002412:	0019      	movs	r1, r3
 8002414:	f001 f8b6 	bl	8003584 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <begin+0x210>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	001a      	movs	r2, r3
 800241e:	2310      	movs	r3, #16
 8002420:	4013      	ands	r3, r2
 8002422:	d115      	bne.n	8002450 <begin+0x198>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8002424:	2003      	movs	r0, #3
 8002426:	f000 f9f9 	bl	800281c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800242a:	2005      	movs	r0, #5
 800242c:	f000 fe40 	bl	80030b0 <HAL_Delay>

    // second try
    write4bits(0x03);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f9f3 	bl	800281c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8002436:	2005      	movs	r0, #5
 8002438:	f000 fe3a 	bl	80030b0 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f9ed 	bl	800281c <write4bits>
    HAL_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f000 fe34 	bl	80030b0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8002448:	2002      	movs	r0, #2
 800244a:	f000 f9e7 	bl	800281c <write4bits>
 800244e:	e01d      	b.n	800248c <begin+0x1d4>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <begin+0x210>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2220      	movs	r2, #32
 8002456:	4313      	orrs	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f950 	bl	8002700 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8002460:	2005      	movs	r0, #5
 8002462:	f000 fe25 	bl	80030b0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <begin+0x210>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2220      	movs	r2, #32
 800246c:	4313      	orrs	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f945 	bl	8002700 <command>
    HAL_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fe1a 	bl	80030b0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <begin+0x210>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2220      	movs	r2, #32
 8002482:	4313      	orrs	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f93a 	bl	8002700 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <begin+0x210>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2220      	movs	r2, #32
 8002492:	4313      	orrs	r3, r2
 8002494:	b2db      	uxtb	r3, r3
 8002496:	0018      	movs	r0, r3
 8002498:	f000 f932 	bl	8002700 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <begin+0x234>)
 800249e:	2204      	movs	r2, #4
 80024a0:	701a      	strb	r2, [r3, #0]
  display();
 80024a2:	f000 f8eb 	bl	800267c <display>

  // clear it off
  clear();
 80024a6:	f000 f8a3 	bl	80025f0 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <begin+0x238>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <begin+0x238>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2204      	movs	r2, #4
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f920 	bl	8002700 <command>

}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b008      	add	sp, #32
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000231 	.word	0x20000231
 80024cc:	2000021d 	.word	0x2000021d
 80024d0:	200001fc 	.word	0x200001fc
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000234 	.word	0x20000234
 80024dc:	20000214 	.word	0x20000214
 80024e0:	20000232 	.word	0x20000232
 80024e4:	20000220 	.word	0x20000220
 80024e8:	20000218 	.word	0x20000218
 80024ec:	2000021c 	.word	0x2000021c
 80024f0:	20000230 	.word	0x20000230

080024f4 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <enableClock+0xb0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2390      	movs	r3, #144	; 0x90
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	429a      	cmp	r2, r3
 8002504:	d10e      	bne.n	8002524 <enableClock+0x30>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <enableClock+0xb4>)
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <enableClock+0xb4>)
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	0289      	lsls	r1, r1, #10
 8002510:	430a      	orrs	r2, r1
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <enableClock+0xb4>)
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
//		__HAL_RCC_GPIOE_CLK_ENABLE();
//	else if(_port == GPIOF)
//		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8002522:	e03a      	b.n	800259a <enableClock+0xa6>
  else if(_port == GPIOB)
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <enableClock+0xb0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <enableClock+0xb8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10e      	bne.n	800254c <enableClock+0x58>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <enableClock+0xb4>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <enableClock+0xb4>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	02c9      	lsls	r1, r1, #11
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <enableClock+0xb4>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	02db      	lsls	r3, r3, #11
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
}
 800254a:	e026      	b.n	800259a <enableClock+0xa6>
  else if(_port == GPIOB)
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <enableClock+0xb0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a16      	ldr	r2, [pc, #88]	; (80025ac <enableClock+0xb8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10e      	bne.n	8002574 <enableClock+0x80>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <enableClock+0xb4>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <enableClock+0xb4>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	02c9      	lsls	r1, r1, #11
 8002560:	430a      	orrs	r2, r1
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <enableClock+0xb4>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	02db      	lsls	r3, r3, #11
 800256c:	4013      	ands	r3, r2
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
}
 8002572:	e012      	b.n	800259a <enableClock+0xa6>
	else if(_port == GPIOC)
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <enableClock+0xb0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <enableClock+0xbc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10d      	bne.n	800259a <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <enableClock+0xb4>)
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <enableClock+0xb4>)
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0309      	lsls	r1, r1, #12
 8002588:	430a      	orrs	r2, r1
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <enableClock+0xb4>)
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	4013      	ands	r3, r2
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	20000218 	.word	0x20000218
 80025a8:	40021000 	.word	0x40021000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800

080025b4 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <setRowOffsets+0x38>)
 80025c8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <setRowOffsets+0x38>)
 80025d0:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <setRowOffsets+0x38>)
 80025d8:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b03      	ldr	r3, [pc, #12]	; (80025ec <setRowOffsets+0x38>)
 80025e0:	70da      	strb	r2, [r3, #3]
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000210 	.word	0x20000210

080025f0 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 80025f4:	2001      	movs	r0, #1
 80025f6:	f000 f883 	bl	8002700 <command>
  HAL_Delay(2);  // this command takes a long time!
 80025fa:	2002      	movs	r0, #2
 80025fc:	f000 fd58 	bl	80030b0 <HAL_Delay>
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	0002      	movs	r2, r0
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	1c0a      	adds	r2, r1, #0
 8002618:	701a      	strb	r2, [r3, #0]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800261a:	2304      	movs	r3, #4
 800261c:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 800261e:	1dbb      	adds	r3, r7, #6
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d804      	bhi.n	8002632 <setCursor+0x2a>
    row = max_lines - 1;    // we count rows starting w/0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	3a01      	subs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
  }
  if ( row >= _numlines ) {
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <setCursor+0x6c>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	1dba      	adds	r2, r7, #6
 8002638:	7812      	ldrb	r2, [r2, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d304      	bcc.n	8002648 <setCursor+0x40>
    row = _numlines - 1;    // we count rows starting w/0
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <setCursor+0x6c>)
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	1dbb      	adds	r3, r7, #6
 8002644:	3a01      	subs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8002648:	1dbb      	adds	r3, r7, #6
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <setCursor+0x70>)
 800264e:	5cd2      	ldrb	r2, [r2, r3]
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	b25b      	sxtb	r3, r3
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	4252      	negs	r2, r2
 800265e:	4313      	orrs	r3, r2
 8002660:	b25b      	sxtb	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	0018      	movs	r0, r3
 8002666:	f000 f84b 	bl	8002700 <command>
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	2000021d 	.word	0x2000021d
 8002678:	20000210 	.word	0x20000210

0800267c <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <display+0x28>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2204      	movs	r2, #4
 8002686:	4313      	orrs	r3, r2
 8002688:	b2da      	uxtb	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <display+0x28>)
 800268c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <display+0x28>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	4313      	orrs	r3, r2
 8002696:	b2db      	uxtb	r3, r3
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f831 	bl	8002700 <command>
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2000021c 	.word	0x2000021c

080026a8 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <print+0x12>
 80026b6:	2300      	movs	r3, #0
 80026b8:	e01e      	b.n	80026f8 <print+0x50>

  const uint8_t *buffer = (const uint8_t *)str;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7fd fd21 	bl	8000108 <strlen>
 80026c6:	0003      	movs	r3, r0
 80026c8:	613b      	str	r3, [r7, #16]
  size_t n = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80026ce:	e00b      	b.n	80026e8 <print+0x40>
    if (write(*buffer++)) n++;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	617a      	str	r2, [r7, #20]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f821 	bl	8002720 <write>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d008      	beq.n	80026f4 <print+0x4c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3301      	adds	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	613a      	str	r2, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ee      	bne.n	80026d0 <print+0x28>
 80026f2:	e000      	b.n	80026f6 <print+0x4e>
    else break;
 80026f4:	46c0      	nop			; (mov r8, r8)
  }
  return n;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b006      	add	sp, #24
 80026fe:	bd80      	pop	{r7, pc}

08002700 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	0002      	movs	r2, r0
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	701a      	strb	r2, [r3, #0]
  send(value, GPIO_PIN_RESET);
 800270c:	1dfb      	adds	r3, r7, #7
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f816 	bl	8002744 <send>
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <write>:

inline size_t write(uint8_t value) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	0002      	movs	r2, r0
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
  send(value, GPIO_PIN_SET);
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	0018      	movs	r0, r3
 8002734:	f000 f806 	bl	8002744 <send>
  return 1; // assume sucess
 8002738:	2301      	movs	r3, #1
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	1c0a      	adds	r2, r1, #0
 8002754:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <send+0x74>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <send+0x78>)
 800275c:	8819      	ldrh	r1, [r3, #0]
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	001a      	movs	r2, r3
 8002764:	f000 ff0e 	bl	8003584 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <send+0x7c>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	2bff      	cmp	r3, #255	; 0xff
 800276e:	d007      	beq.n	8002780 <send+0x3c>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <send+0x74>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <send+0x7c>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	0019      	movs	r1, r3
 800277c:	f000 ff02 	bl	8003584 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <send+0x80>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	2310      	movs	r3, #16
 8002788:	4013      	ands	r3, r2
 800278a:	d005      	beq.n	8002798 <send+0x54>
    write8bits(value); 
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f86f 	bl	8002874 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8002796:	e00b      	b.n	80027b0 <send+0x6c>
    write4bits(value>>4);
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f83b 	bl	800281c <write4bits>
    write4bits(value);
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 f836 	bl	800281c <write4bits>
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000218 	.word	0x20000218
 80027bc:	20000234 	.word	0x20000234
 80027c0:	20000214 	.word	0x20000214
 80027c4:	20000231 	.word	0x20000231

080027c8 <pulseEnable>:

void pulseEnable(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <pulseEnable+0x4c>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <pulseEnable+0x50>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2200      	movs	r2, #0
 80027d6:	0019      	movs	r1, r3
 80027d8:	f000 fed4 	bl	8003584 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80027dc:	2001      	movs	r0, #1
 80027de:	f000 fc67 	bl	80030b0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <pulseEnable+0x4c>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <pulseEnable+0x50>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	2201      	movs	r2, #1
 80027ec:	0019      	movs	r1, r3
 80027ee:	f000 fec9 	bl	8003584 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80027f2:	2001      	movs	r0, #1
 80027f4:	f000 fc5c 	bl	80030b0 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <pulseEnable+0x4c>)
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <pulseEnable+0x50>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	2200      	movs	r2, #0
 8002802:	0019      	movs	r1, r3
 8002804:	f000 febe 	bl	8003584 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8002808:	2001      	movs	r0, #1
 800280a:	f000 fc51 	bl	80030b0 <HAL_Delay>
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000218 	.word	0x20000218
 8002818:	20000232 	.word	0x20000232

0800281c <write4bits>:

void write4bits(uint8_t value) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	0002      	movs	r2, r0
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e014      	b.n	8002858 <write4bits+0x3c>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <write4bits+0x50>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <write4bits+0x54>)
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	0052      	lsls	r2, r2, #1
 8002838:	5ad1      	ldrh	r1, [r2, r3]
 800283a:	1dfb      	adds	r3, r7, #7
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	411a      	asrs	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	001a      	movs	r2, r3
 800284e:	f000 fe99 	bl	8003584 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b03      	cmp	r3, #3
 800285c:	dde7      	ble.n	800282e <write4bits+0x12>
  }

  pulseEnable();
 800285e:	f7ff ffb3 	bl	80027c8 <pulseEnable>
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000218 	.word	0x20000218
 8002870:	20000220 	.word	0x20000220

08002874 <write8bits>:

void write8bits(uint8_t value) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	0002      	movs	r2, r0
 800287c:	1dfb      	adds	r3, r7, #7
 800287e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; i++) {
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e014      	b.n	80028b0 <write8bits+0x3c>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <write8bits+0x50>)
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <write8bits+0x54>)
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	0052      	lsls	r2, r2, #1
 8002890:	5ad1      	ldrh	r1, [r2, r3]
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	411a      	asrs	r2, r3
 800289a:	0013      	movs	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	001a      	movs	r2, r3
 80028a6:	f000 fe6d 	bl	8003584 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b07      	cmp	r3, #7
 80028b4:	dde7      	ble.n	8002886 <write8bits+0x12>
  }
  
  pulseEnable();
 80028b6:	f7ff ff87 	bl	80027c8 <pulseEnable>
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b004      	add	sp, #16
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000218 	.word	0x20000218
 80028c8:	20000220 	.word	0x20000220

080028cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d2:	240c      	movs	r4, #12
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	0018      	movs	r0, r3
 80028d8:	2314      	movs	r3, #20
 80028da:	001a      	movs	r2, r3
 80028dc:	2100      	movs	r1, #0
 80028de:	f002 f89b 	bl	8004a18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <MX_GPIO_Init+0xc8>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <MX_GPIO_Init+0xc8>)
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0289      	lsls	r1, r1, #10
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <MX_GPIO_Init+0xc8>)
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <MX_GPIO_Init+0xc8>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <MX_GPIO_Init+0xc8>)
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	02c9      	lsls	r1, r1, #11
 8002908:	430a      	orrs	r2, r1
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_GPIO_Init+0xc8>)
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	02db      	lsls	r3, r3, #11
 8002914:	4013      	ands	r3, r2
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 800291a:	491f      	ldr	r1, [pc, #124]	; (8002998 <MX_GPIO_Init+0xcc>)
 800291c:	2390      	movs	r3, #144	; 0x90
 800291e:	05db      	lsls	r3, r3, #23
 8002920:	2200      	movs	r2, #0
 8002922:	0018      	movs	r0, r3
 8002924:	f000 fe2e 	bl	8003584 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PA12 */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 8002928:	193b      	adds	r3, r7, r4
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <MX_GPIO_Init+0xcc>)
 800292c:	601a      	str	r2, [r3, #0]
                          |LCD_DB6_Pin|LCD_DB7_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	2201      	movs	r2, #1
 8002932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	193b      	adds	r3, r7, r4
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	193a      	adds	r2, r7, r4
 8002942:	2390      	movs	r3, #144	; 0x90
 8002944:	05db      	lsls	r3, r3, #23
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fcb3 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PMOD_A_Pin|PMOD_BTN_Pin|PMOD_B_Pin;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	22c1      	movs	r2, #193	; 0xc1
 8002952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <MX_GPIO_Init+0xd0>)
 8002958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	193b      	adds	r3, r7, r4
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <MX_GPIO_Init+0xd4>)
 8002964:	0019      	movs	r1, r3
 8002966:	0010      	movs	r0, r2
 8002968:	f000 fca4 	bl	80032b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2005      	movs	r0, #5
 8002972:	f000 fc6d 	bl	8003250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002976:	2005      	movs	r0, #5
 8002978:	f000 fc7f 	bl	800327a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2007      	movs	r0, #7
 8002982:	f000 fc65 	bl	8003250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002986:	2007      	movs	r0, #7
 8002988:	f000 fc77 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b009      	add	sp, #36	; 0x24
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	0000189b 	.word	0x0000189b
 800299c:	10110000 	.word	0x10110000
 80029a0:	48000400 	.word	0x48000400

080029a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	0002      	movs	r2, r0
 80029ac:	1dbb      	adds	r3, r7, #6
 80029ae:	801a      	strh	r2, [r3, #0]
	/*
	 *
	 * Sense Rotary Encoder Direction
	 *
	 */
	if(GPIO_Pin == PMOD_BTN_Pin)
 80029b0:	1dbb      	adds	r3, r7, #6
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	d101      	bne.n	80029bc <HAL_GPIO_EXTI_Callback+0x18>
	{
		__NOP(); // Push-Button pressed
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	e032      	b.n	8002a22 <HAL_GPIO_EXTI_Callback+0x7e>
	}
	else if(GPIO_Pin == PMOD_A_Pin)
 80029bc:	1dbb      	adds	r3, r7, #6
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d115      	bne.n	80029f0 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		__NOP(); // A signal detected
 80029c4:	46c0      	nop			; (mov r8, r8)

		//Sense direction
		if(b==true)
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x88>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <HAL_GPIO_EXTI_Callback+0x44>
		{
			rotary_val++;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x8c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x8c>)
 80029d8:	601a      	str	r2, [r3, #0]
			a = false;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
			b = false;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x88>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e01c      	b.n	8002a22 <HAL_GPIO_EXTI_Callback+0x7e>
		}
		else
		{
			a = true;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x90>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e018      	b.n	8002a22 <HAL_GPIO_EXTI_Callback+0x7e>
		}



	}
	else if(GPIO_Pin == PMOD_B_Pin)
 80029f0:	1dbb      	adds	r3, r7, #6
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	2b80      	cmp	r3, #128	; 0x80
 80029f6:	d114      	bne.n	8002a22 <HAL_GPIO_EXTI_Callback+0x7e>
	{
		__NOP(); // B signal detected
 80029f8:	46c0      	nop			; (mov r8, r8)

		//Sense direction
		if(a==true)
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x90>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <HAL_GPIO_EXTI_Callback+0x78>
		{
			rotary_val--;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002a0c:	601a      	str	r2, [r3, #0]
			a = false;
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
			b = false;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x88>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_EXTI_Callback+0x7e>
		}
		else
		{
			b = true;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x88>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
		}
	}

	__NOP();
 8002a22:	46c0      	nop			; (mov r8, r8)
	// End Sense Rotary Encoder Direction

}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000237 	.word	0x20000237
 8002a30:	20000200 	.word	0x20000200
 8002a34:	20000238 	.word	0x20000238

08002a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b095      	sub	sp, #84	; 0x54
 8002a3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a3e:	f000 fad3 	bl	8002fe8 <HAL_Init>
  * LCD D5 pin to PA4
  * LCD D6 pin to PA7
  * LCD D7 pin to PA11
  */
  // initialize the library by associating any needed LCD interface pin
  	LiquidCrystal(GPIOA, GPIO_PIN_0, GPIO_PIN_12, GPIO_PIN_1, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_7, GPIO_PIN_11);
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	2390      	movs	r3, #144	; 0x90
 8002a48:	05d8      	lsls	r0, r3, #23
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	9303      	str	r3, [sp, #12]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	2310      	movs	r3, #16
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2308      	movs	r3, #8
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	2101      	movs	r1, #1
 8002a60:	f7ff fb58 	bl	8002114 <LiquidCrystal>
  	print("Hello, World!");
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <main+0xd8>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fe1e 	bl	80026a8 <print>
  	int i = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	char* str;
	unsigned char testvar;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a70:	f000 f85a 	bl	8002b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a74:	f7ff ff2a 	bl	80028cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002a78:	f000 fa0e 	bl	8002e98 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8002a7c:	f000 f9c4 	bl	8002e08 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  //UART
  uart_buf_len = sprintf(uart_buf, "Timer test.\r\n");
 8002a80:	4a24      	ldr	r2, [pc, #144]	; (8002b14 <main+0xdc>)
 8002a82:	003b      	movs	r3, r7
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 fc48 	bl	800531c <siprintf>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	0039      	movs	r1, r7
 8002a96:	4820      	ldr	r0, [pc, #128]	; (8002b18 <main+0xe0>)
 8002a98:	2364      	movs	r3, #100	; 0x64
 8002a9a:	f001 fc45 	bl	8004328 <HAL_UART_Transmit>

  //Start Timer
  HAL_TIM_Base_Start(&htim16);
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <main+0xe4>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f001 fb33 	bl	800410c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Get current time cnt
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <main+0xe4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aac:	2432      	movs	r4, #50	; 0x32
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	801a      	strh	r2, [r3, #0]

	  //Wait
	  HAL_Delay(20);
 8002ab2:	2014      	movs	r0, #20
 8002ab4:	f000 fafc 	bl	80030b0 <HAL_Delay>

	  //Get Time Elapsed
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16) - timer_val;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <main+0xe4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	193a      	adds	r2, r7, r4
 8002ac4:	8812      	ldrh	r2, [r2, #0]
 8002ac6:	1a8a      	subs	r2, r1, r2
 8002ac8:	801a      	strh	r2, [r3, #0]

	  //Send UART
	  //uart_buf_len = sprintf(uart_buf, "Elapsed Time: %u us\r\n", timer_val);
	  uart_buf_len = sprintf(uart_buf, "COUNT: %d\r\n", rotary_val);
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <main+0xe8>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4915      	ldr	r1, [pc, #84]	; (8002b24 <main+0xec>)
 8002ad0:	003b      	movs	r3, r7
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 fc22 	bl	800531c <siprintf>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	0039      	movs	r1, r7
 8002ae2:	480d      	ldr	r0, [pc, #52]	; (8002b18 <main+0xe0>)
 8002ae4:	2364      	movs	r3, #100	; 0x64
 8002ae6:	f001 fc1f 	bl	8004328 <HAL_UART_Transmit>

	  // set the cursor to column 0, line 1
	  // (note: line 1 is the second row, since counting begins with 0):
	  setCursor(0, 1);
 8002aea:	2101      	movs	r1, #1
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff fd8b 	bl	8002608 <setCursor>
	  // print the number of seconds since reset:
	  //sprintf(str, "%d", 10);
	  //print(str);
	  print((uint8_t *)testvar);
 8002af2:	243f      	movs	r4, #63	; 0x3f
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fdd5 	bl	80026a8 <print>
	  HAL_Delay(100);
 8002afe:	2064      	movs	r0, #100	; 0x64
 8002b00:	f000 fad6 	bl	80030b0 <HAL_Delay>
	  testvar++;
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	193b      	adds	r3, r7, r4
 8002b0a:	3201      	adds	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8002b0e:	e7ca      	b.n	8002aa6 <main+0x6e>
 8002b10:	080078d8 	.word	0x080078d8
 8002b14:	080078e8 	.word	0x080078e8
 8002b18:	20000284 	.word	0x20000284
 8002b1c:	2000023c 	.word	0x2000023c
 8002b20:	20000200 	.word	0x20000200
 8002b24:	080078f8 	.word	0x080078f8

08002b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b095      	sub	sp, #84	; 0x54
 8002b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2e:	2420      	movs	r4, #32
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	0018      	movs	r0, r3
 8002b34:	2330      	movs	r3, #48	; 0x30
 8002b36:	001a      	movs	r2, r3
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f001 ff6d 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3e:	2310      	movs	r3, #16
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	0018      	movs	r0, r3
 8002b44:	2310      	movs	r3, #16
 8002b46:	001a      	movs	r2, r3
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f001 ff65 	bl	8004a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b4e:	003b      	movs	r3, r7
 8002b50:	0018      	movs	r0, r3
 8002b52:	2310      	movs	r3, #16
 8002b54:	001a      	movs	r2, r3
 8002b56:	2100      	movs	r1, #0
 8002b58:	f001 ff5e 	bl	8004a18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b5c:	0021      	movs	r1, r4
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2201      	movs	r2, #1
 8002b68:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fd3d 	bl	80035f8 <HAL_RCC_OscConfig>
 8002b7e:	1e03      	subs	r3, r0, #0
 8002b80:	d001      	beq.n	8002b86 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002b82:	f000 f828 	bl	8002bd6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b86:	2110      	movs	r1, #16
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2200      	movs	r2, #0
 8002b92:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f001 f841 	bl	8003c2c <HAL_RCC_ClockConfig>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d001      	beq.n	8002bb2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002bae:	f000 f812 	bl	8002bd6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bb2:	003b      	movs	r3, r7
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002bb8:	003b      	movs	r3, r7
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bbe:	003b      	movs	r3, r7
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f001 f985 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002bca:	f000 f804 	bl	8002bd6 <Error_Handler>
  }
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b015      	add	sp, #84	; 0x54
 8002bd4:	bd90      	pop	{r4, r7, pc}

08002bd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bda:	b672      	cpsid	i
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  __NOP();
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	e7fd      	b.n	8002bde <Error_Handler+0x8>
	...

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_MspInit+0x44>)
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	619a      	str	r2, [r3, #24]
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_MspInit+0x44>)
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_MspInit+0x44>)
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	0549      	lsls	r1, r1, #21
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_MspInit+0x44>)
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	4013      	ands	r3, r2
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	40021000 	.word	0x40021000

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <NMI_Handler+0x4>

08002c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <HardFault_Handler+0x4>

08002c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 fa12 	bl	8003078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f000 fcae 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c6e:	2040      	movs	r0, #64	; 0x40
 8002c70:	f000 fca6 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c74:	2080      	movs	r0, #128	; 0x80
 8002c76:	f000 fca3 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	return 1;
 8002c84:	2301      	movs	r3, #1
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_kill>:

int _kill(int pid, int sig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c96:	f001 fe95 	bl	80049c4 <__errno>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	2216      	movs	r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	425b      	negs	r3, r3
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	425a      	negs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0011      	movs	r1, r2
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff ffe5 	bl	8002c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cc2:	e7fe      	b.n	8002cc2 <_exit+0x16>

08002cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e00a      	b.n	8002cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd6:	e000      	b.n	8002cda <_read+0x16>
 8002cd8:	bf00      	nop
 8002cda:	0001      	movs	r1, r0
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	b2ca      	uxtb	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf0      	blt.n	8002cd6 <_read+0x12>
	}

return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b006      	add	sp, #24
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e009      	b.n	8002d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	e000      	b.n	8002d1e <_write+0x20>
 8002d1c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf1      	blt.n	8002d10 <_write+0x12>
	}
	return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b006      	add	sp, #24
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_close>:

int _close(int file)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	425b      	negs	r3, r3
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	0192      	lsls	r2, r2, #6
 8002d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_isatty>:

int _isatty(int file)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d98:	4a14      	ldr	r2, [pc, #80]	; (8002dec <_sbrk+0x5c>)
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_sbrk+0x60>)
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <_sbrk+0x64>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <_sbrk+0x64>)
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <_sbrk+0x68>)
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_sbrk+0x64>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	18d3      	adds	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d207      	bcs.n	8002dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc0:	f001 fe00 	bl	80049c4 <__errno>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	425b      	negs	r3, r3
 8002dce:	e009      	b.n	8002de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <_sbrk+0x64>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	18d2      	adds	r2, r2, r3
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <_sbrk+0x64>)
 8002de0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20001000 	.word	0x20001000
 8002df0:	00000400 	.word	0x00000400
 8002df4:	20000204 	.word	0x20000204
 8002df8:	20000320 	.word	0x20000320

08002dfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <MX_TIM16_Init+0x48>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8-1;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <MX_TIM16_Init+0x4c>)
 8002e22:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <MX_TIM16_Init+0x44>)
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f001 f917 	bl	800406c <HAL_TIM_Base_Init>
 8002e3e:	1e03      	subs	r3, r0, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002e42:	f7ff fec8 	bl	8002bd6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000023c 	.word	0x2000023c
 8002e50:	40014400 	.word	0x40014400
 8002e54:	0000ffff 	.word	0x0000ffff

08002e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <HAL_TIM_Base_MspInit+0x38>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10d      	bne.n	8002e86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0289      	lsls	r1, r1, #10
 8002e74:	430a      	orrs	r2, r1
 8002e76:	619a      	str	r2, [r3, #24]
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40021000 	.word	0x40021000

08002e98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002e9e:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <MX_USART1_UART_Init+0x5c>)
 8002ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002ea4:	2296      	movs	r2, #150	; 0x96
 8002ea6:	0212      	lsls	r2, r2, #8
 8002ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <MX_USART1_UART_Init+0x58>)
 8002edc:	0018      	movs	r0, r3
 8002ede:	f001 f9cf 	bl	8004280 <HAL_UART_Init>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ee6:	f7ff fe76 	bl	8002bd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000284 	.word	0x20000284
 8002ef4:	40013800 	.word	0x40013800

08002ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b08b      	sub	sp, #44	; 0x2c
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	2414      	movs	r4, #20
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	0018      	movs	r0, r3
 8002f06:	2314      	movs	r3, #20
 8002f08:	001a      	movs	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f001 fd84 	bl	8004a18 <memset>
  if(uartHandle->Instance==USART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_UART_MspInit+0x90>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d132      	bne.n	8002f80 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	01c9      	lsls	r1, r1, #7
 8002f24:	430a      	orrs	r2, r1
 8002f26:	619a      	str	r2, [r3, #24]
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	01db      	lsls	r3, r3, #7
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0289      	lsls	r1, r1, #10
 8002f40:	430a      	orrs	r2, r1
 8002f42:	615a      	str	r2, [r3, #20]
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_UART_MspInit+0x94>)
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002f52:	0021      	movs	r1, r4
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <HAL_UART_MspInit+0x98>)
 8002f58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2201      	movs	r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	187a      	adds	r2, r7, r1
 8002f74:	2390      	movs	r3, #144	; 0x90
 8002f76:	05db      	lsls	r3, r3, #23
 8002f78:	0011      	movs	r1, r2
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f99a 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b00b      	add	sp, #44	; 0x2c
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	00008004 	.word	0x00008004

08002f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopForever+0xe>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopForever+0x16>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fbe:	f7ff ff1d 	bl	8002dfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002fc2:	f001 fd05 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fc6:	f7ff fd37 	bl	8002a38 <main>

08002fca <LoopForever>:

LoopForever:
    b LoopForever
 8002fca:	e7fe      	b.n	8002fca <LoopForever>
  ldr   r0, =_estack
 8002fcc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002fd8:	08007da4 	.word	0x08007da4
  ldr r2, =_sbss
 8002fdc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002fe0:	2000031c 	.word	0x2000031c

08002fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC1_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_Init+0x24>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_Init+0x24>)
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 f809 	bl	8003010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffe:	f7ff fdf1 	bl	8002be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40022000 	.word	0x40022000

08003010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_InitTick+0x5c>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_InitTick+0x60>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	0019      	movs	r1, r3
 8003022:	23fa      	movs	r3, #250	; 0xfa
 8003024:	0098      	lsls	r0, r3, #2
 8003026:	f7fd f88b 	bl	8000140 <__udivsi3>
 800302a:	0003      	movs	r3, r0
 800302c:	0019      	movs	r1, r3
 800302e:	0020      	movs	r0, r4
 8003030:	f7fd f886 	bl	8000140 <__udivsi3>
 8003034:	0003      	movs	r3, r0
 8003036:	0018      	movs	r0, r3
 8003038:	f000 f92f 	bl	800329a <HAL_SYSTICK_Config>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d001      	beq.n	8003044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e00f      	b.n	8003064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d80b      	bhi.n	8003062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	2301      	movs	r3, #1
 800304e:	425b      	negs	r3, r3
 8003050:	2200      	movs	r2, #0
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f8fc 	bl	8003250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_InitTick+0x64>)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b003      	add	sp, #12
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	20000004 	.word	0x20000004
 8003070:	2000000c 	.word	0x2000000c
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_IncTick+0x1c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	001a      	movs	r2, r3
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_IncTick+0x20>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	18d2      	adds	r2, r2, r3
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_IncTick+0x20>)
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	2000000c 	.word	0x2000000c
 8003098:	20000308 	.word	0x20000308

0800309c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  return uwTick;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <HAL_GetTick+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	20000308 	.word	0x20000308

080030b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7ff fff0 	bl	800309c <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	d005      	beq.n	80030d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_Delay+0x44>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	001a      	movs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	f7ff ffe0 	bl	800309c <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d8f7      	bhi.n	80030d8 <HAL_Delay+0x28>
  {
  }
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	0002      	movs	r2, r0
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b7f      	cmp	r3, #127	; 0x7f
 800310a:	d809      	bhi.n	8003120 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	001a      	movs	r2, r3
 8003112:	231f      	movs	r3, #31
 8003114:	401a      	ands	r2, r3
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_EnableIRQ+0x30>)
 8003118:	2101      	movs	r1, #1
 800311a:	4091      	lsls	r1, r2
 800311c:	000a      	movs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
  }
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	0002      	movs	r2, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	1dfb      	adds	r3, r7, #7
 8003138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b7f      	cmp	r3, #127	; 0x7f
 8003140:	d828      	bhi.n	8003194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <__NVIC_SetPriority+0xd4>)
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b25b      	sxtb	r3, r3
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	33c0      	adds	r3, #192	; 0xc0
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	1dfa      	adds	r2, r7, #7
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	0011      	movs	r1, r2
 8003158:	2203      	movs	r2, #3
 800315a:	400a      	ands	r2, r1
 800315c:	00d2      	lsls	r2, r2, #3
 800315e:	21ff      	movs	r1, #255	; 0xff
 8003160:	4091      	lsls	r1, r2
 8003162:	000a      	movs	r2, r1
 8003164:	43d2      	mvns	r2, r2
 8003166:	401a      	ands	r2, r3
 8003168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	401a      	ands	r2, r3
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	0018      	movs	r0, r3
 8003178:	2303      	movs	r3, #3
 800317a:	4003      	ands	r3, r0
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003180:	481f      	ldr	r0, [pc, #124]	; (8003200 <__NVIC_SetPriority+0xd4>)
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b25b      	sxtb	r3, r3
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	430a      	orrs	r2, r1
 800318c:	33c0      	adds	r3, #192	; 0xc0
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003192:	e031      	b.n	80031f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <__NVIC_SetPriority+0xd8>)
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	0019      	movs	r1, r3
 800319c:	230f      	movs	r3, #15
 800319e:	400b      	ands	r3, r1
 80031a0:	3b08      	subs	r3, #8
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3306      	adds	r3, #6
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	3304      	adds	r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1dfa      	adds	r2, r7, #7
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	0011      	movs	r1, r2
 80031b4:	2203      	movs	r2, #3
 80031b6:	400a      	ands	r2, r1
 80031b8:	00d2      	lsls	r2, r2, #3
 80031ba:	21ff      	movs	r1, #255	; 0xff
 80031bc:	4091      	lsls	r1, r2
 80031be:	000a      	movs	r2, r1
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	401a      	ands	r2, r3
 80031c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	401a      	ands	r2, r3
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	0018      	movs	r0, r3
 80031d4:	2303      	movs	r3, #3
 80031d6:	4003      	ands	r3, r0
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031dc:	4809      	ldr	r0, [pc, #36]	; (8003204 <__NVIC_SetPriority+0xd8>)
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	001c      	movs	r4, r3
 80031e4:	230f      	movs	r3, #15
 80031e6:	4023      	ands	r3, r4
 80031e8:	3b08      	subs	r3, #8
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	430a      	orrs	r2, r1
 80031ee:	3306      	adds	r3, #6
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	18c3      	adds	r3, r0, r3
 80031f4:	3304      	adds	r3, #4
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b003      	add	sp, #12
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1e5a      	subs	r2, r3, #1
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	045b      	lsls	r3, r3, #17
 8003218:	429a      	cmp	r2, r3
 800321a:	d301      	bcc.n	8003220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800321c:	2301      	movs	r3, #1
 800321e:	e010      	b.n	8003242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <SysTick_Config+0x44>)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	3a01      	subs	r2, #1
 8003226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003228:	2301      	movs	r3, #1
 800322a:	425b      	negs	r3, r3
 800322c:	2103      	movs	r1, #3
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff7c 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SysTick_Config+0x44>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <SysTick_Config+0x44>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	e000e010 	.word	0xe000e010

08003250 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	210f      	movs	r1, #15
 800325c:	187b      	adds	r3, r7, r1
 800325e:	1c02      	adds	r2, r0, #0
 8003260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	187b      	adds	r3, r7, r1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b25b      	sxtb	r3, r3
 800326a:	0011      	movs	r1, r2
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b004      	add	sp, #16
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	0002      	movs	r2, r0
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b25b      	sxtb	r3, r3
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff ff33 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ffaf 	bl	8003208 <SysTick_Config>
 80032aa:	0003      	movs	r3, r0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c2:	e149      	b.n	8003558 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4091      	lsls	r1, r2
 80032ce:	000a      	movs	r2, r1
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d100      	bne.n	80032dc <HAL_GPIO_Init+0x28>
 80032da:	e13a      	b.n	8003552 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00b      	beq.n	80032fc <HAL_GPIO_Init+0x48>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d007      	beq.n	80032fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f0:	2b11      	cmp	r3, #17
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	409a      	lsls	r2, r3
 800330a:	0013      	movs	r3, r2
 800330c:	43da      	mvns	r2, r3
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	409a      	lsls	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
 8003338:	0013      	movs	r3, r2
 800333a:	43da      	mvns	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	2201      	movs	r2, #1
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
 8003350:	0013      	movs	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0xea>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b12      	cmp	r3, #18
 800339c:	d123      	bne.n	80033e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	0092      	lsls	r2, r2, #2
 80033a8:	58d3      	ldr	r3, [r2, r3]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2207      	movs	r2, #7
 80033b0:	4013      	ands	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	43da      	mvns	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2107      	movs	r1, #7
 80033ca:	400b      	ands	r3, r1
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	409a      	lsls	r2, r3
 80033d0:	0013      	movs	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	0092      	lsls	r2, r2, #2
 80033e2:	6939      	ldr	r1, [r7, #16]
 80033e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	43da      	mvns	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2203      	movs	r2, #3
 8003404:	401a      	ands	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	055b      	lsls	r3, r3, #21
 8003422:	4013      	ands	r3, r2
 8003424:	d100      	bne.n	8003428 <HAL_GPIO_Init+0x174>
 8003426:	e094      	b.n	8003552 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003428:	4b51      	ldr	r3, [pc, #324]	; (8003570 <HAL_GPIO_Init+0x2bc>)
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_GPIO_Init+0x2bc>)
 800342e:	2101      	movs	r1, #1
 8003430:	430a      	orrs	r2, r1
 8003432:	619a      	str	r2, [r3, #24]
 8003434:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_GPIO_Init+0x2bc>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003440:	4a4c      	ldr	r2, [pc, #304]	; (8003574 <HAL_GPIO_Init+0x2c0>)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	589b      	ldr	r3, [r3, r2]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2203      	movs	r2, #3
 8003452:	4013      	ands	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	409a      	lsls	r2, r3
 800345a:	0013      	movs	r3, r2
 800345c:	43da      	mvns	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	2390      	movs	r3, #144	; 0x90
 8003468:	05db      	lsls	r3, r3, #23
 800346a:	429a      	cmp	r2, r3
 800346c:	d00d      	beq.n	800348a <HAL_GPIO_Init+0x1d6>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a41      	ldr	r2, [pc, #260]	; (8003578 <HAL_GPIO_Init+0x2c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d007      	beq.n	8003486 <HAL_GPIO_Init+0x1d2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a40      	ldr	r2, [pc, #256]	; (800357c <HAL_GPIO_Init+0x2c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_GPIO_Init+0x1ce>
 800347e:	2302      	movs	r3, #2
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x1d8>
 8003482:	2305      	movs	r3, #5
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x1d8>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x1d8>
 800348a:	2300      	movs	r3, #0
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	2103      	movs	r1, #3
 8003490:	400a      	ands	r2, r1
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800349c:	4935      	ldr	r1, [pc, #212]	; (8003574 <HAL_GPIO_Init+0x2c0>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034aa:	4b35      	ldr	r3, [pc, #212]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43da      	mvns	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	025b      	lsls	r3, r3, #9
 80034c2:	4013      	ands	r3, r2
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034ce:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43da      	mvns	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	029b      	lsls	r3, r3, #10
 80034ec:	4013      	ands	r3, r2
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43da      	mvns	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	035b      	lsls	r3, r3, #13
 8003516:	4013      	ands	r3, r2
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43da      	mvns	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	039b      	lsls	r3, r3, #14
 8003540:	4013      	ands	r3, r2
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_GPIO_Init+0x2cc>)
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	40da      	lsrs	r2, r3
 8003560:	1e13      	subs	r3, r2, #0
 8003562:	d000      	beq.n	8003566 <HAL_GPIO_Init+0x2b2>
 8003564:	e6ae      	b.n	80032c4 <HAL_GPIO_Init+0x10>
  } 
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b006      	add	sp, #24
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	40010000 	.word	0x40010000
 8003578:	48000400 	.word	0x48000400
 800357c:	48000800 	.word	0x48000800
 8003580:	40010400 	.word	0x40010400

08003584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	0008      	movs	r0, r1
 800358e:	0011      	movs	r1, r2
 8003590:	1cbb      	adds	r3, r7, #2
 8003592:	1c02      	adds	r2, r0, #0
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	1c7b      	adds	r3, r7, #1
 8003598:	1c0a      	adds	r2, r1, #0
 800359a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359c:	1c7b      	adds	r3, r7, #1
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035a4:	1cbb      	adds	r3, r7, #2
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035ac:	e003      	b.n	80035b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	1dba      	adds	r2, r7, #6
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	4013      	ands	r3, r2
 80035d6:	d008      	beq.n	80035ea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80035da:	1dba      	adds	r2, r7, #6
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7ff f9dd 	bl	80029a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e301      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d100      	bne.n	8003616 <HAL_RCC_OscConfig+0x1e>
 8003614:	e08d      	b.n	8003732 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003616:	4bc3      	ldr	r3, [pc, #780]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	220c      	movs	r2, #12
 800361c:	4013      	ands	r3, r2
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00e      	beq.n	8003640 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003622:	4bc0      	ldr	r3, [pc, #768]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	220c      	movs	r2, #12
 8003628:	4013      	ands	r3, r2
 800362a:	2b08      	cmp	r3, #8
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x64>
 800362e:	4bbd      	ldr	r3, [pc, #756]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	025b      	lsls	r3, r3, #9
 8003636:	401a      	ands	r2, r3
 8003638:	2380      	movs	r3, #128	; 0x80
 800363a:	025b      	lsls	r3, r3, #9
 800363c:	429a      	cmp	r2, r3
 800363e:	d10d      	bne.n	800365c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	4bb8      	ldr	r3, [pc, #736]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	029b      	lsls	r3, r3, #10
 8003648:	4013      	ands	r3, r2
 800364a:	d100      	bne.n	800364e <HAL_RCC_OscConfig+0x56>
 800364c:	e070      	b.n	8003730 <HAL_RCC_OscConfig+0x138>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d000      	beq.n	8003658 <HAL_RCC_OscConfig+0x60>
 8003656:	e06b      	b.n	8003730 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e2d8      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c>
 8003664:	4baf      	ldr	r3, [pc, #700]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4bae      	ldr	r3, [pc, #696]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	0249      	lsls	r1, r1, #9
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e02f      	b.n	80036d4 <HAL_RCC_OscConfig+0xdc>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x9e>
 800367c:	4ba9      	ldr	r3, [pc, #676]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4ba8      	ldr	r3, [pc, #672]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003682:	49a9      	ldr	r1, [pc, #676]	; (8003928 <HAL_RCC_OscConfig+0x330>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	4ba6      	ldr	r3, [pc, #664]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4ba5      	ldr	r3, [pc, #660]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800368e:	49a7      	ldr	r1, [pc, #668]	; (800392c <HAL_RCC_OscConfig+0x334>)
 8003690:	400a      	ands	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e01e      	b.n	80036d4 <HAL_RCC_OscConfig+0xdc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10e      	bne.n	80036bc <HAL_RCC_OscConfig+0xc4>
 800369e:	4ba1      	ldr	r3, [pc, #644]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	02c9      	lsls	r1, r1, #11
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	4b9d      	ldr	r3, [pc, #628]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b9c      	ldr	r3, [pc, #624]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	0249      	lsls	r1, r1, #9
 80036b6:	430a      	orrs	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xdc>
 80036bc:	4b99      	ldr	r3, [pc, #612]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b98      	ldr	r3, [pc, #608]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	4999      	ldr	r1, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x330>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	4b96      	ldr	r3, [pc, #600]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b95      	ldr	r3, [pc, #596]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036ce:	4997      	ldr	r1, [pc, #604]	; (800392c <HAL_RCC_OscConfig+0x334>)
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d014      	beq.n	8003706 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7ff fcde 	bl	800309c <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e6:	f7ff fcd9 	bl	800309c <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	; 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e28a      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f8:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	029b      	lsls	r3, r3, #10
 8003700:	4013      	ands	r3, r2
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0xee>
 8003704:	e015      	b.n	8003732 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7ff fcc9 	bl	800309c <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003710:	f7ff fcc4 	bl	800309c <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e275      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b80      	ldr	r3, [pc, #512]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	4013      	ands	r3, r2
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x118>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2202      	movs	r2, #2
 8003738:	4013      	ands	r3, r2
 800373a:	d100      	bne.n	800373e <HAL_RCC_OscConfig+0x146>
 800373c:	e069      	b.n	8003812 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800373e:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	220c      	movs	r2, #12
 8003744:	4013      	ands	r3, r2
 8003746:	d00b      	beq.n	8003760 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003748:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	220c      	movs	r2, #12
 800374e:	4013      	ands	r3, r2
 8003750:	2b08      	cmp	r3, #8
 8003752:	d11c      	bne.n	800378e <HAL_RCC_OscConfig+0x196>
 8003754:	4b73      	ldr	r3, [pc, #460]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	4013      	ands	r3, r2
 800375e:	d116      	bne.n	800378e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003760:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e24b      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b6b      	ldr	r3, [pc, #428]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	22f8      	movs	r2, #248	; 0xf8
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	00da      	lsls	r2, r3, #3
 8003786:	4b67      	ldr	r3, [pc, #412]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378c:	e041      	b.n	8003812 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d024      	beq.n	80037e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b62      	ldr	r3, [pc, #392]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800379c:	2101      	movs	r1, #1
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7ff fc7b 	bl	800309c <HAL_GetTick>
 80037a6:	0003      	movs	r3, r0
 80037a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ac:	f7ff fc76 	bl	800309c <HAL_GetTick>
 80037b0:	0002      	movs	r2, r0
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e227      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037be:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2202      	movs	r2, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d0f1      	beq.n	80037ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b56      	ldr	r3, [pc, #344]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	22f8      	movs	r2, #248	; 0xf8
 80037ce:	4393      	bics	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00da      	lsls	r2, r3, #3
 80037d8:	4b52      	ldr	r3, [pc, #328]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e018      	b.n	8003812 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b4f      	ldr	r3, [pc, #316]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7ff fc56 	bl	800309c <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f6:	f7ff fc51 	bl	800309c <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e202      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2202      	movs	r2, #2
 800380e:	4013      	ands	r3, r2
 8003810:	d1f1      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2208      	movs	r2, #8
 8003818:	4013      	ands	r3, r2
 800381a:	d036      	beq.n	800388a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d019      	beq.n	8003858 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003824:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800382a:	2101      	movs	r1, #1
 800382c:	430a      	orrs	r2, r1
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7ff fc34 	bl	800309c <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383a:	f7ff fc2f 	bl	800309c <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e1e0      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d0f1      	beq.n	800383a <HAL_RCC_OscConfig+0x242>
 8003856:	e018      	b.n	800388a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003858:	4b32      	ldr	r3, [pc, #200]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800385e:	2101      	movs	r1, #1
 8003860:	438a      	bics	r2, r1
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7ff fc1a 	bl	800309c <HAL_GetTick>
 8003868:	0003      	movs	r3, r0
 800386a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386e:	f7ff fc15 	bl	800309c <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1c6      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2202      	movs	r2, #2
 8003886:	4013      	ands	r3, r2
 8003888:	d1f1      	bne.n	800386e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2204      	movs	r2, #4
 8003890:	4013      	ands	r3, r2
 8003892:	d100      	bne.n	8003896 <HAL_RCC_OscConfig+0x29e>
 8003894:	e0b4      	b.n	8003a00 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	201f      	movs	r0, #31
 8003898:	183b      	adds	r3, r7, r0
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	055b      	lsls	r3, r3, #21
 80038a6:	4013      	ands	r3, r2
 80038a8:	d110      	bne.n	80038cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0549      	lsls	r1, r1, #21
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
 80038b8:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	055b      	lsls	r3, r3, #21
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038c6:	183b      	adds	r3, r7, r0
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCC_OscConfig+0x338>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d11a      	bne.n	800390e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x338>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_RCC_OscConfig+0x338>)
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	0049      	lsls	r1, r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7ff fbd9 	bl	800309c <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7ff fbd4 	bl	800309c <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e185      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x338>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4013      	ands	r3, r2
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10e      	bne.n	8003934 <HAL_RCC_OscConfig+0x33c>
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	4b02      	ldr	r3, [pc, #8]	; (8003924 <HAL_RCC_OscConfig+0x32c>)
 800391c:	2101      	movs	r1, #1
 800391e:	430a      	orrs	r2, r1
 8003920:	621a      	str	r2, [r3, #32]
 8003922:	e035      	b.n	8003990 <HAL_RCC_OscConfig+0x398>
 8003924:	40021000 	.word	0x40021000
 8003928:	fffeffff 	.word	0xfffeffff
 800392c:	fffbffff 	.word	0xfffbffff
 8003930:	40007000 	.word	0x40007000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x35e>
 800393c:	4bb6      	ldr	r3, [pc, #728]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800393e:	6a1a      	ldr	r2, [r3, #32]
 8003940:	4bb5      	ldr	r3, [pc, #724]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	621a      	str	r2, [r3, #32]
 8003948:	4bb3      	ldr	r3, [pc, #716]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	4bb2      	ldr	r3, [pc, #712]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800394e:	2104      	movs	r1, #4
 8003950:	438a      	bics	r2, r1
 8003952:	621a      	str	r2, [r3, #32]
 8003954:	e01c      	b.n	8003990 <HAL_RCC_OscConfig+0x398>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x380>
 800395e:	4bae      	ldr	r3, [pc, #696]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	4bad      	ldr	r3, [pc, #692]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	621a      	str	r2, [r3, #32]
 800396a:	4bab      	ldr	r3, [pc, #684]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800396c:	6a1a      	ldr	r2, [r3, #32]
 800396e:	4baa      	ldr	r3, [pc, #680]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003970:	2101      	movs	r1, #1
 8003972:	430a      	orrs	r2, r1
 8003974:	621a      	str	r2, [r3, #32]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0x398>
 8003978:	4ba7      	ldr	r3, [pc, #668]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	4ba6      	ldr	r3, [pc, #664]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	621a      	str	r2, [r3, #32]
 8003984:	4ba4      	ldr	r3, [pc, #656]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	4ba3      	ldr	r3, [pc, #652]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 800398a:	2104      	movs	r1, #4
 800398c:	438a      	bics	r2, r1
 800398e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7ff fb80 	bl	800309c <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e009      	b.n	80039b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7ff fb7b 	bl	800309c <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	4a9b      	ldr	r2, [pc, #620]	; (8003c1c <HAL_RCC_OscConfig+0x624>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e12b      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	4b98      	ldr	r3, [pc, #608]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3aa>
 80039c0:	e013      	b.n	80039ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c2:	f7ff fb6b 	bl	800309c <HAL_GetTick>
 80039c6:	0003      	movs	r3, r0
 80039c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039cc:	f7ff fb66 	bl	800309c <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	4a91      	ldr	r2, [pc, #580]	; (8003c1c <HAL_RCC_OscConfig+0x624>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e116      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e0:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	4b87      	ldr	r3, [pc, #540]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 80039fa:	4989      	ldr	r1, [pc, #548]	; (8003c20 <HAL_RCC_OscConfig+0x628>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2210      	movs	r2, #16
 8003a06:	4013      	ands	r3, r2
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d12a      	bne.n	8003a68 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a12:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a16:	4b80      	ldr	r3, [pc, #512]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a18:	2104      	movs	r1, #4
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003a1e:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7ff fb37 	bl	800309c <HAL_GetTick>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003a34:	f7ff fb32 	bl	800309c <HAL_GetTick>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0e3      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d0f1      	beq.n	8003a34 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a50:	4b71      	ldr	r3, [pc, #452]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	22f8      	movs	r2, #248	; 0xf8
 8003a56:	4393      	bics	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	00da      	lsls	r2, r3, #3
 8003a60:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
 8003a66:	e034      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	3305      	adds	r3, #5
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a74:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a76:	2104      	movs	r1, #4
 8003a78:	438a      	bics	r2, r1
 8003a7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003a7c:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	22f8      	movs	r2, #248	; 0xf8
 8003a82:	4393      	bics	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	00da      	lsls	r2, r3, #3
 8003a8c:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
 8003a92:	e01e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003a94:	4b60      	ldr	r3, [pc, #384]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a98:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003a9a:	2104      	movs	r1, #4
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003aa0:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aa4:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aac:	f7ff faf6 	bl	800309c <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ab6:	f7ff faf1 	bl	800309c <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0a2      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d1f1      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d100      	bne.n	8003adc <HAL_RCC_OscConfig+0x4e4>
 8003ada:	e097      	b.n	8003c0c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003adc:	4b4e      	ldr	r3, [pc, #312]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d100      	bne.n	8003aea <HAL_RCC_OscConfig+0x4f2>
 8003ae8:	e06b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d14c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003af8:	494a      	ldr	r1, [pc, #296]	; (8003c24 <HAL_RCC_OscConfig+0x62c>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7ff facd 	bl	800309c <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7ff fac8 	bl	800309c <HAL_GetTick>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e079      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	049b      	lsls	r3, r3, #18
 8003b22:	4013      	ands	r3, r2
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b26:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	4393      	bics	r3, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b36:	430a      	orrs	r2, r1
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a3a      	ldr	r2, [pc, #232]	; (8003c28 <HAL_RCC_OscConfig+0x630>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	0449      	lsls	r1, r1, #17
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7ff fa9b 	bl	800309c <HAL_GetTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7ff fa96 	bl	800309c <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e047      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	049b      	lsls	r3, r3, #18
 8003b86:	4013      	ands	r3, r2
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x574>
 8003b8a:	e03f      	b.n	8003c0c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003b92:	4924      	ldr	r1, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x62c>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7ff fa80 	bl	800309c <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7ff fa7b 	bl	800309c <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e02c      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb4:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	049b      	lsls	r3, r3, #18
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d1f0      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x5aa>
 8003bc0:	e024      	b.n	8003c0c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01f      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCC_OscConfig+0x620>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	025b      	lsls	r3, r3, #9
 8003be0:	401a      	ands	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d10e      	bne.n	8003c08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	220f      	movs	r2, #15
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	23f0      	movs	r3, #240	; 0xf0
 8003bfc:	039b      	lsls	r3, r3, #14
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b008      	add	sp, #32
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	00001388 	.word	0x00001388
 8003c20:	efffffff 	.word	0xefffffff
 8003c24:	feffffff 	.word	0xfeffffff
 8003c28:	ffc2ffff 	.word	0xffc2ffff

08003c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b3      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b5b      	ldr	r3, [pc, #364]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d911      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b58      	ldr	r3, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	4393      	bics	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4013      	ands	r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e09a      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2202      	movs	r2, #2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2204      	movs	r2, #4
 8003c82:	4013      	ands	r3, r2
 8003c84:	d006      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003c8c:	21e0      	movs	r1, #224	; 0xe0
 8003c8e:	00c9      	lsls	r1, r1, #3
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	22f0      	movs	r2, #240	; 0xf0
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	029b      	lsls	r3, r3, #10
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d114      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06e      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	049b      	lsls	r3, r3, #18
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e062      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e05b      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf0:	4b30      	ldr	r3, [pc, #192]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7ff f9ca 	bl	800309c <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0c:	e009      	b.n	8003d22 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0e:	f7ff f9c5 	bl	800309c <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <HAL_RCC_ClockConfig+0x18c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e042      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	220c      	movs	r2, #12
 8003d28:	401a      	ands	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1ec      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d211      	bcs.n	8003d66 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2201      	movs	r2, #1
 8003d48:	4393      	bics	r3, r2
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x184>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e020      	b.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_RCC_ClockConfig+0x190>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d84:	f000 f820 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d88:	0001      	movs	r1, r0
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x188>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	220f      	movs	r2, #15
 8003d92:	4013      	ands	r3, r2
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x194>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	000a      	movs	r2, r1
 8003d9a:	40da      	lsrs	r2, r3
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x198>)
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7ff f935 	bl	8003010 <HAL_InitTick>
  
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b004      	add	sp, #16
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	00001388 	.word	0x00001388
 8003dbc:	fffff8ff 	.word	0xfffff8ff
 8003dc0:	080079a4 	.word	0x080079a4
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b08f      	sub	sp, #60	; 0x3c
 8003dcc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003dce:	2314      	movs	r3, #20
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dd6:	c313      	stmia	r3!, {r0, r1, r4}
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003de2:	c313      	stmia	r3!, {r0, r1, r4}
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dec:	2300      	movs	r3, #0
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	220c      	movs	r2, #12
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d002      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x4a>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x50>
 8003e10:	e02d      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e12:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e16:	e02d      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	0c9b      	lsrs	r3, r3, #18
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2214      	movs	r2, #20
 8003e22:	18ba      	adds	r2, r7, r2
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e28:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	4013      	ands	r3, r2
 8003e30:	1d3a      	adds	r2, r7, #4
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	025b      	lsls	r3, r3, #9
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	4812      	ldr	r0, [pc, #72]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e44:	f7fc f97c 	bl	8000140 <__udivsi3>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	4353      	muls	r3, r2
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	e009      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e56:	000a      	movs	r2, r1
 8003e58:	0152      	lsls	r2, r2, #5
 8003e5a:	1a52      	subs	r2, r2, r1
 8003e5c:	0193      	lsls	r3, r2, #6
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	185b      	adds	r3, r3, r1
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b00f      	add	sp, #60	; 0x3c
 8003e7c:	bd90      	pop	{r4, r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	08007904 	.word	0x08007904
 8003e84:	08007914 	.word	0x08007914
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	007a1200 	.word	0x007a1200

08003e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ea8:	f7ff fff2 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eac:	0001      	movs	r1, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	2207      	movs	r2, #7
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	40d9      	lsrs	r1, r3
 8003ebe:	000b      	movs	r3, r1
}    
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	080079b4 	.word	0x080079b4

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	025b      	lsls	r3, r3, #9
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d100      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003eec:	e08e      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003eee:	2017      	movs	r0, #23
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4b57      	ldr	r3, [pc, #348]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	055b      	lsls	r3, r3, #21
 8003efe:	4013      	ands	r3, r2
 8003f00:	d110      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4b54      	ldr	r3, [pc, #336]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	0549      	lsls	r1, r1, #21
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
 8003f10:	4b50      	ldr	r3, [pc, #320]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	055b      	lsls	r3, r3, #21
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d11a      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f30:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b48      	ldr	r3, [pc, #288]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	0049      	lsls	r1, r1, #1
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7ff f8ad 	bl	800309c <HAL_GetTick>
 8003f42:	0003      	movs	r3, r0
 8003f44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f46:	e008      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f48:	f7ff f8a8 	bl	800309c <HAL_GetTick>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e077      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4013      	ands	r3, r2
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	23c0      	movs	r3, #192	; 0xc0
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d034      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	23c0      	movs	r3, #192	; 0xc0
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4013      	ands	r3, r2
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d02c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4a33      	ldr	r2, [pc, #204]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	0249      	lsls	r1, r1, #9
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa0:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fa6:	492e      	ldr	r1, [pc, #184]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7ff f86f 	bl	800309c <HAL_GetTick>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f7ff f86a 	bl	800309c <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	4a25      	ldr	r2, [pc, #148]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e038      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff6:	2317      	movs	r3, #23
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004006:	4918      	ldr	r1, [pc, #96]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004008:	400a      	ands	r2, r1
 800400a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	4013      	ands	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	2203      	movs	r2, #3
 800401c:	4393      	bics	r3, r2
 800401e:	0019      	movs	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004026:	430a      	orrs	r2, r1
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	4013      	ands	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	2210      	movs	r2, #16
 800403a:	4393      	bics	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004044:	430a      	orrs	r2, r1
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b006      	add	sp, #24
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	fffffcff 	.word	0xfffffcff
 8004060:	fffeffff 	.word	0xfffeffff
 8004064:	00001388 	.word	0x00001388
 8004068:	efffffff 	.word	0xefffffff

0800406c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e042      	b.n	8004104 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	223d      	movs	r2, #61	; 0x3d
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	223c      	movs	r2, #60	; 0x3c
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7fe fedf 	bl	8002e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	223d      	movs	r2, #61	; 0x3d
 800409e:	2102      	movs	r1, #2
 80040a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	0019      	movs	r1, r3
 80040ac:	0010      	movs	r0, r2
 80040ae:	f000 f871 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2246      	movs	r2, #70	; 0x46
 80040b6:	2101      	movs	r1, #1
 80040b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	223e      	movs	r2, #62	; 0x3e
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223f      	movs	r2, #63	; 0x3f
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2240      	movs	r2, #64	; 0x40
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2241      	movs	r2, #65	; 0x41
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2242      	movs	r2, #66	; 0x42
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2243      	movs	r2, #67	; 0x43
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2244      	movs	r2, #68	; 0x44
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2245      	movs	r2, #69	; 0x45
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	223d      	movs	r2, #61	; 0x3d
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	223d      	movs	r2, #61	; 0x3d
 8004118:	5c9b      	ldrb	r3, [r3, r2]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d001      	beq.n	8004124 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e02e      	b.n	8004182 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	223d      	movs	r2, #61	; 0x3d
 8004128:	2102      	movs	r1, #2
 800412a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <HAL_TIM_Base_Start+0x80>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00a      	beq.n	800414c <HAL_TIM_Base_Start+0x40>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	429a      	cmp	r2, r3
 8004140:	d004      	beq.n	800414c <HAL_TIM_Base_Start+0x40>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a12      	ldr	r2, [pc, #72]	; (8004190 <HAL_TIM_Base_Start+0x84>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d111      	bne.n	8004170 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2207      	movs	r2, #7
 8004154:	4013      	ands	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b06      	cmp	r3, #6
 800415c:	d010      	beq.n	8004180 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2101      	movs	r1, #1
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416e:	e007      	b.n	8004180 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	0018      	movs	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40000400 	.word	0x40000400

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a30      	ldr	r2, [pc, #192]	; (8004268 <TIM_Base_SetConfig+0xd4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d008      	beq.n	80041be <TIM_Base_SetConfig+0x2a>
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x2a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <TIM_Base_SetConfig+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2270      	movs	r2, #112	; 0x70
 80041c2:	4393      	bics	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_Base_SetConfig+0xd4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d014      	beq.n	8004202 <TIM_Base_SetConfig+0x6e>
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	05db      	lsls	r3, r3, #23
 80041de:	429a      	cmp	r2, r3
 80041e0:	d00f      	beq.n	8004202 <TIM_Base_SetConfig+0x6e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <TIM_Base_SetConfig+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_Base_SetConfig+0x6e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a20      	ldr	r2, [pc, #128]	; (8004270 <TIM_Base_SetConfig+0xdc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_Base_SetConfig+0x6e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <TIM_Base_SetConfig+0xe0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_Base_SetConfig+0x6e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <TIM_Base_SetConfig+0xe8>)
 8004206:	4013      	ands	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	4393      	bics	r3, r2
 800421a:	001a      	movs	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <TIM_Base_SetConfig+0xd4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0xbe>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <TIM_Base_SetConfig+0xe0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0xbe>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a0a      	ldr	r2, [pc, #40]	; (8004278 <TIM_Base_SetConfig+0xe4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d103      	bne.n	800425a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	615a      	str	r2, [r3, #20]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40002000 	.word	0x40002000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800
 800427c:	fffffcff 	.word	0xfffffcff

08004280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e044      	b.n	800431c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2274      	movs	r2, #116	; 0x74
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fe fe27 	bl	8002ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2224      	movs	r2, #36	; 0x24
 80042ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	438a      	bics	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 f8da 	bl	800447c <UART_SetConfig>
 80042c8:	0003      	movs	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e024      	b.n	800431c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f9f7 	bl	80046d0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	490d      	ldr	r1, [pc, #52]	; (8004324 <HAL_UART_Init+0xa4>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	212a      	movs	r1, #42	; 0x2a
 80042fe:	438a      	bics	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2101      	movs	r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f000 fa8f 	bl	8004838 <UART_CheckIdleState>
 800431a:	0003      	movs	r3, r0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}
 8004324:	ffffb7ff 	.word	0xffffb7ff

08004328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	1dbb      	adds	r3, r7, #6
 8004336:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433c:	2b20      	cmp	r3, #32
 800433e:	d000      	beq.n	8004342 <HAL_UART_Transmit+0x1a>
 8004340:	e096      	b.n	8004470 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_UART_Transmit+0x28>
 8004348:	1dbb      	adds	r3, r7, #6
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e08e      	b.n	8004472 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	015b      	lsls	r3, r3, #5
 800435c:	429a      	cmp	r2, r3
 800435e:	d109      	bne.n	8004374 <HAL_UART_Transmit+0x4c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2201      	movs	r2, #1
 800436c:	4013      	ands	r3, r2
 800436e:	d001      	beq.n	8004374 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e07e      	b.n	8004472 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2274      	movs	r2, #116	; 0x74
 8004378:	5c9b      	ldrb	r3, [r3, r2]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit+0x5a>
 800437e:	2302      	movs	r3, #2
 8004380:	e077      	b.n	8004472 <HAL_UART_Transmit+0x14a>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2274      	movs	r2, #116	; 0x74
 8004386:	2101      	movs	r1, #1
 8004388:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	2100      	movs	r1, #0
 8004390:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	; 0x21
 8004396:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004398:	f7fe fe80 	bl	800309c <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1dba      	adds	r2, r7, #6
 80043a4:	2150      	movs	r1, #80	; 0x50
 80043a6:	8812      	ldrh	r2, [r2, #0]
 80043a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1dba      	adds	r2, r7, #6
 80043ae:	2152      	movs	r1, #82	; 0x52
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	015b      	lsls	r3, r3, #5
 80043bc:	429a      	cmp	r2, r3
 80043be:	d108      	bne.n	80043d2 <HAL_UART_Transmit+0xaa>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e003      	b.n	80043da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2274      	movs	r2, #116	; 0x74
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80043e2:	e02d      	b.n	8004440 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	0013      	movs	r3, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	f000 fa69 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e039      	b.n	8004472 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	05d2      	lsls	r2, r2, #23
 800440e:	0dd2      	lsrs	r2, r2, #23
 8004410:	b292      	uxth	r2, r2
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	3302      	adds	r3, #2
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e008      	b.n	800442e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b292      	uxth	r2, r2
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	3301      	adds	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2252      	movs	r2, #82	; 0x52
 8004432:	5a9b      	ldrh	r3, [r3, r2]
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b299      	uxth	r1, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2252      	movs	r2, #82	; 0x52
 800443e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2252      	movs	r2, #82	; 0x52
 8004444:	5a9b      	ldrh	r3, [r3, r2]
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1cb      	bne.n	80043e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	0013      	movs	r3, r2
 8004456:	2200      	movs	r2, #0
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	f000 fa35 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 800445e:	1e03      	subs	r3, r0, #0
 8004460:	d001      	beq.n	8004466 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e005      	b.n	8004472 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e000      	b.n	8004472 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b008      	add	sp, #32
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004484:	231e      	movs	r3, #30
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a84      	ldr	r2, [pc, #528]	; (80046bc <UART_SetConfig+0x240>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4a7f      	ldr	r2, [pc, #508]	; (80046c0 <UART_SetConfig+0x244>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a76      	ldr	r2, [pc, #472]	; (80046c4 <UART_SetConfig+0x248>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f8:	4b73      	ldr	r3, [pc, #460]	; (80046c8 <UART_SetConfig+0x24c>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	2203      	movs	r2, #3
 80044fe:	4013      	ands	r3, r2
 8004500:	2b03      	cmp	r3, #3
 8004502:	d00d      	beq.n	8004520 <UART_SetConfig+0xa4>
 8004504:	d81b      	bhi.n	800453e <UART_SetConfig+0xc2>
 8004506:	2b02      	cmp	r3, #2
 8004508:	d014      	beq.n	8004534 <UART_SetConfig+0xb8>
 800450a:	d818      	bhi.n	800453e <UART_SetConfig+0xc2>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <UART_SetConfig+0x9a>
 8004510:	2b01      	cmp	r3, #1
 8004512:	d00a      	beq.n	800452a <UART_SetConfig+0xae>
 8004514:	e013      	b.n	800453e <UART_SetConfig+0xc2>
 8004516:	231f      	movs	r3, #31
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e012      	b.n	8004546 <UART_SetConfig+0xca>
 8004520:	231f      	movs	r3, #31
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	2202      	movs	r2, #2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e00d      	b.n	8004546 <UART_SetConfig+0xca>
 800452a:	231f      	movs	r3, #31
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	2204      	movs	r2, #4
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e008      	b.n	8004546 <UART_SetConfig+0xca>
 8004534:	231f      	movs	r3, #31
 8004536:	18fb      	adds	r3, r7, r3
 8004538:	2208      	movs	r2, #8
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e003      	b.n	8004546 <UART_SetConfig+0xca>
 800453e:	231f      	movs	r3, #31
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2210      	movs	r2, #16
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	429a      	cmp	r2, r3
 8004552:	d15d      	bne.n	8004610 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8004554:	231f      	movs	r3, #31
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d015      	beq.n	800458a <UART_SetConfig+0x10e>
 800455e:	dc18      	bgt.n	8004592 <UART_SetConfig+0x116>
 8004560:	2b04      	cmp	r3, #4
 8004562:	d00d      	beq.n	8004580 <UART_SetConfig+0x104>
 8004564:	dc15      	bgt.n	8004592 <UART_SetConfig+0x116>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <UART_SetConfig+0xf4>
 800456a:	2b02      	cmp	r3, #2
 800456c:	d005      	beq.n	800457a <UART_SetConfig+0xfe>
 800456e:	e010      	b.n	8004592 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7ff fc98 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004574:	0003      	movs	r3, r0
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e012      	b.n	80045a0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457a:	4b54      	ldr	r3, [pc, #336]	; (80046cc <UART_SetConfig+0x250>)
 800457c:	61bb      	str	r3, [r7, #24]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004580:	f7ff fc22 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8004584:	0003      	movs	r3, r0
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e00a      	b.n	80045a0 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e006      	b.n	80045a0 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004596:	231e      	movs	r3, #30
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
        break;
 800459e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d100      	bne.n	80045a8 <UART_SetConfig+0x12c>
 80045a6:	e07b      	b.n	80046a0 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	005a      	lsls	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	18d2      	adds	r2, r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	0019      	movs	r1, r3
 80045ba:	0010      	movs	r0, r2
 80045bc:	f7fb fdc0 	bl	8000140 <__udivsi3>
 80045c0:	0003      	movs	r3, r0
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b0f      	cmp	r3, #15
 80045ca:	d91c      	bls.n	8004606 <UART_SetConfig+0x18a>
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	025b      	lsls	r3, r3, #9
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d217      	bcs.n	8004606 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	200e      	movs	r0, #14
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	210f      	movs	r1, #15
 80045e0:	438a      	bics	r2, r1
 80045e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2207      	movs	r2, #7
 80045ec:	4013      	ands	r3, r2
 80045ee:	b299      	uxth	r1, r3
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	183a      	adds	r2, r7, r0
 80045f4:	8812      	ldrh	r2, [r2, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	183a      	adds	r2, r7, r0
 8004600:	8812      	ldrh	r2, [r2, #0]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e04c      	b.n	80046a0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004606:	231e      	movs	r3, #30
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e047      	b.n	80046a0 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004610:	231f      	movs	r3, #31
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b08      	cmp	r3, #8
 8004618:	d015      	beq.n	8004646 <UART_SetConfig+0x1ca>
 800461a:	dc18      	bgt.n	800464e <UART_SetConfig+0x1d2>
 800461c:	2b04      	cmp	r3, #4
 800461e:	d00d      	beq.n	800463c <UART_SetConfig+0x1c0>
 8004620:	dc15      	bgt.n	800464e <UART_SetConfig+0x1d2>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <UART_SetConfig+0x1b0>
 8004626:	2b02      	cmp	r3, #2
 8004628:	d005      	beq.n	8004636 <UART_SetConfig+0x1ba>
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7ff fc3a 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8004630:	0003      	movs	r3, r0
 8004632:	61bb      	str	r3, [r7, #24]
        break;
 8004634:	e012      	b.n	800465c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <UART_SetConfig+0x250>)
 8004638:	61bb      	str	r3, [r7, #24]
        break;
 800463a:	e00f      	b.n	800465c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463c:	f7ff fbc4 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8004640:	0003      	movs	r3, r0
 8004642:	61bb      	str	r3, [r7, #24]
        break;
 8004644:	e00a      	b.n	800465c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	61bb      	str	r3, [r7, #24]
        break;
 800464c:	e006      	b.n	800465c <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004652:	231e      	movs	r3, #30
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
        break;
 800465a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d01e      	beq.n	80046a0 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	085a      	lsrs	r2, r3, #1
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	18d2      	adds	r2, r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0019      	movs	r1, r3
 8004672:	0010      	movs	r0, r2
 8004674:	f7fb fd64 	bl	8000140 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	b29b      	uxth	r3, r3
 800467c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d909      	bls.n	8004698 <UART_SetConfig+0x21c>
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	025b      	lsls	r3, r3, #9
 800468a:	429a      	cmp	r2, r3
 800468c:	d204      	bcs.n	8004698 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e003      	b.n	80046a0 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8004698:	231e      	movs	r3, #30
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046ac:	231e      	movs	r3, #30
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b008      	add	sp, #32
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	ffff69f3 	.word	0xffff69f3
 80046c0:	ffffcfff 	.word	0xffffcfff
 80046c4:	fffff4ff 	.word	0xfffff4ff
 80046c8:	40021000 	.word	0x40021000
 80046cc:	007a1200 	.word	0x007a1200

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	2201      	movs	r2, #1
 80046de:	4013      	ands	r3, r2
 80046e0:	d00b      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <UART_AdvFeatureConfig+0x144>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2202      	movs	r2, #2
 8004700:	4013      	ands	r3, r2
 8004702:	d00b      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a43      	ldr	r2, [pc, #268]	; (8004818 <UART_AdvFeatureConfig+0x148>)
 800470c:	4013      	ands	r3, r2
 800470e:	0019      	movs	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2204      	movs	r2, #4
 8004722:	4013      	ands	r3, r2
 8004724:	d00b      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4a3b      	ldr	r2, [pc, #236]	; (800481c <UART_AdvFeatureConfig+0x14c>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2208      	movs	r2, #8
 8004744:	4013      	ands	r3, r2
 8004746:	d00b      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4a34      	ldr	r2, [pc, #208]	; (8004820 <UART_AdvFeatureConfig+0x150>)
 8004750:	4013      	ands	r3, r2
 8004752:	0019      	movs	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2210      	movs	r2, #16
 8004766:	4013      	ands	r3, r2
 8004768:	d00b      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <UART_AdvFeatureConfig+0x154>)
 8004772:	4013      	ands	r3, r2
 8004774:	0019      	movs	r1, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2220      	movs	r2, #32
 8004788:	4013      	ands	r3, r2
 800478a:	d00b      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4a25      	ldr	r2, [pc, #148]	; (8004828 <UART_AdvFeatureConfig+0x158>)
 8004794:	4013      	ands	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2240      	movs	r2, #64	; 0x40
 80047aa:	4013      	ands	r3, r2
 80047ac:	d01d      	beq.n	80047ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	; (800482c <UART_AdvFeatureConfig+0x15c>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	035b      	lsls	r3, r3, #13
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10b      	bne.n	80047ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4a15      	ldr	r2, [pc, #84]	; (8004830 <UART_AdvFeatureConfig+0x160>)
 80047da:	4013      	ands	r3, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	4013      	ands	r3, r2
 80047f2:	d00b      	beq.n	800480c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <UART_AdvFeatureConfig+0x164>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	0019      	movs	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}
 8004814:	fffdffff 	.word	0xfffdffff
 8004818:	fffeffff 	.word	0xfffeffff
 800481c:	fffbffff 	.word	0xfffbffff
 8004820:	ffff7fff 	.word	0xffff7fff
 8004824:	ffffefff 	.word	0xffffefff
 8004828:	ffffdfff 	.word	0xffffdfff
 800482c:	ffefffff 	.word	0xffefffff
 8004830:	ff9fffff 	.word	0xff9fffff
 8004834:	fff7ffff 	.word	0xfff7ffff

08004838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	2100      	movs	r1, #0
 8004846:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004848:	f7fe fc28 	bl	800309c <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2208      	movs	r2, #8
 8004858:	4013      	ands	r3, r2
 800485a:	2b08      	cmp	r3, #8
 800485c:	d10c      	bne.n	8004878 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	0391      	lsls	r1, r2, #14
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <UART_CheckIdleState+0x8c>)
 8004868:	9200      	str	r2, [sp, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	f000 f82c 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d001      	beq.n	8004878 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e021      	b.n	80048bc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2204      	movs	r2, #4
 8004880:	4013      	ands	r3, r2
 8004882:	2b04      	cmp	r3, #4
 8004884:	d10c      	bne.n	80048a0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	03d1      	lsls	r1, r2, #15
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <UART_CheckIdleState+0x8c>)
 8004890:	9200      	str	r2, [sp, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	f000 f818 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e00d      	b.n	80048bc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2274      	movs	r2, #116	; 0x74
 80048b6:	2100      	movs	r1, #0
 80048b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b004      	add	sp, #16
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	01ffffff 	.word	0x01ffffff

080048c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	e05e      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3301      	adds	r3, #1
 80048de:	d05b      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e0:	f7fe fbdc 	bl	800309c <HAL_GetTick>
 80048e4:	0002      	movs	r2, r0
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11b      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	492f      	ldr	r1, [pc, #188]	; (80049c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004902:	400a      	ands	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	438a      	bics	r2, r1
 8004914:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2274      	movs	r2, #116	; 0x74
 8004926:	2100      	movs	r1, #0
 8004928:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e044      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2204      	movs	r2, #4
 8004936:	4013      	ands	r3, r2
 8004938:	d02e      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	401a      	ands	r2, r3
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	429a      	cmp	r2, r3
 800494c:	d124      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4917      	ldr	r1, [pc, #92]	; (80049c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2101      	movs	r1, #1
 8004974:	438a      	bics	r2, r1
 8004976:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	2120      	movs	r1, #32
 800498a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2274      	movs	r2, #116	; 0x74
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e00f      	b.n	80049b8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	425a      	negs	r2, r3
 80049a8:	4153      	adcs	r3, r2
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	001a      	movs	r2, r3
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d091      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b004      	add	sp, #16
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	fffffe5f 	.word	0xfffffe5f

080049c4 <__errno>:
 80049c4:	4b01      	ldr	r3, [pc, #4]	; (80049cc <__errno+0x8>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	4770      	bx	lr
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20000010 	.word	0x20000010

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	2600      	movs	r6, #0
 80049d4:	4d0c      	ldr	r5, [pc, #48]	; (8004a08 <__libc_init_array+0x38>)
 80049d6:	4c0d      	ldr	r4, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	2600      	movs	r6, #0
 80049e2:	f002 ff6d 	bl	80078c0 <_init>
 80049e6:	4d0a      	ldr	r5, [pc, #40]	; (8004a10 <__libc_init_array+0x40>)
 80049e8:	4c0a      	ldr	r4, [pc, #40]	; (8004a14 <__libc_init_array+0x44>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	00b3      	lsls	r3, r6, #2
 80049f6:	58eb      	ldr	r3, [r5, r3]
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	00b3      	lsls	r3, r6, #2
 8004a00:	58eb      	ldr	r3, [r5, r3]
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08007d9c 	.word	0x08007d9c
 8004a0c:	08007d9c 	.word	0x08007d9c
 8004a10:	08007d9c 	.word	0x08007d9c
 8004a14:	08007da0 	.word	0x08007da0

08004a18 <memset>:
 8004a18:	0003      	movs	r3, r0
 8004a1a:	1882      	adds	r2, r0, r2
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	7019      	strb	r1, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <__cvt>:
 8004a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2a:	001e      	movs	r6, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	0014      	movs	r4, r2
 8004a30:	b08b      	sub	sp, #44	; 0x2c
 8004a32:	429e      	cmp	r6, r3
 8004a34:	da04      	bge.n	8004a40 <__cvt+0x18>
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0609      	lsls	r1, r1, #24
 8004a3a:	1873      	adds	r3, r6, r1
 8004a3c:	001e      	movs	r6, r3
 8004a3e:	232d      	movs	r3, #45	; 0x2d
 8004a40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a44:	7013      	strb	r3, [r2, #0]
 8004a46:	2320      	movs	r3, #32
 8004a48:	2203      	movs	r2, #3
 8004a4a:	439f      	bics	r7, r3
 8004a4c:	2f46      	cmp	r7, #70	; 0x46
 8004a4e:	d007      	beq.n	8004a60 <__cvt+0x38>
 8004a50:	003b      	movs	r3, r7
 8004a52:	3b45      	subs	r3, #69	; 0x45
 8004a54:	4259      	negs	r1, r3
 8004a56:	414b      	adcs	r3, r1
 8004a58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	18cb      	adds	r3, r1, r3
 8004a5e:	9310      	str	r3, [sp, #64]	; 0x40
 8004a60:	ab09      	add	r3, sp, #36	; 0x24
 8004a62:	9304      	str	r3, [sp, #16]
 8004a64:	ab08      	add	r3, sp, #32
 8004a66:	9303      	str	r3, [sp, #12]
 8004a68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a6a:	9200      	str	r2, [sp, #0]
 8004a6c:	9302      	str	r3, [sp, #8]
 8004a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a70:	0022      	movs	r2, r4
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	0033      	movs	r3, r6
 8004a76:	f000 fcfd 	bl	8005474 <_dtoa_r>
 8004a7a:	0005      	movs	r5, r0
 8004a7c:	2f47      	cmp	r7, #71	; 0x47
 8004a7e:	d102      	bne.n	8004a86 <__cvt+0x5e>
 8004a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d528      	bpl.n	8004ad8 <__cvt+0xb0>
 8004a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a88:	18eb      	adds	r3, r5, r3
 8004a8a:	9307      	str	r3, [sp, #28]
 8004a8c:	2f46      	cmp	r7, #70	; 0x46
 8004a8e:	d114      	bne.n	8004aba <__cvt+0x92>
 8004a90:	782b      	ldrb	r3, [r5, #0]
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d10c      	bne.n	8004ab0 <__cvt+0x88>
 8004a96:	2200      	movs	r2, #0
 8004a98:	2300      	movs	r3, #0
 8004a9a:	0020      	movs	r0, r4
 8004a9c:	0031      	movs	r1, r6
 8004a9e:	f7fb fcd5 	bl	800044c <__aeabi_dcmpeq>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d104      	bne.n	8004ab0 <__cvt+0x88>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ab2:	9a07      	ldr	r2, [sp, #28]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	18d3      	adds	r3, r2, r3
 8004ab8:	9307      	str	r3, [sp, #28]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	0020      	movs	r0, r4
 8004ac0:	0031      	movs	r1, r6
 8004ac2:	f7fb fcc3 	bl	800044c <__aeabi_dcmpeq>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d001      	beq.n	8004ace <__cvt+0xa6>
 8004aca:	9b07      	ldr	r3, [sp, #28]
 8004acc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ace:	2230      	movs	r2, #48	; 0x30
 8004ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad2:	9907      	ldr	r1, [sp, #28]
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	d306      	bcc.n	8004ae6 <__cvt+0xbe>
 8004ad8:	0028      	movs	r0, r5
 8004ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004adc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ade:	1b5b      	subs	r3, r3, r5
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	b00b      	add	sp, #44	; 0x2c
 8004ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e7f0      	b.n	8004ad0 <__cvt+0xa8>

08004aee <__exponent>:
 8004aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af0:	1c83      	adds	r3, r0, #2
 8004af2:	b087      	sub	sp, #28
 8004af4:	9303      	str	r3, [sp, #12]
 8004af6:	0005      	movs	r5, r0
 8004af8:	000c      	movs	r4, r1
 8004afa:	232b      	movs	r3, #43	; 0x2b
 8004afc:	7002      	strb	r2, [r0, #0]
 8004afe:	2900      	cmp	r1, #0
 8004b00:	da01      	bge.n	8004b06 <__exponent+0x18>
 8004b02:	424c      	negs	r4, r1
 8004b04:	3302      	adds	r3, #2
 8004b06:	706b      	strb	r3, [r5, #1]
 8004b08:	2c09      	cmp	r4, #9
 8004b0a:	dd31      	ble.n	8004b70 <__exponent+0x82>
 8004b0c:	270a      	movs	r7, #10
 8004b0e:	ab04      	add	r3, sp, #16
 8004b10:	1dde      	adds	r6, r3, #7
 8004b12:	0020      	movs	r0, r4
 8004b14:	0039      	movs	r1, r7
 8004b16:	9601      	str	r6, [sp, #4]
 8004b18:	f7fb fc82 	bl	8000420 <__aeabi_idivmod>
 8004b1c:	3e01      	subs	r6, #1
 8004b1e:	3130      	adds	r1, #48	; 0x30
 8004b20:	0020      	movs	r0, r4
 8004b22:	7031      	strb	r1, [r6, #0]
 8004b24:	0039      	movs	r1, r7
 8004b26:	9402      	str	r4, [sp, #8]
 8004b28:	f7fb fb94 	bl	8000254 <__divsi3>
 8004b2c:	9b02      	ldr	r3, [sp, #8]
 8004b2e:	0004      	movs	r4, r0
 8004b30:	2b63      	cmp	r3, #99	; 0x63
 8004b32:	dcee      	bgt.n	8004b12 <__exponent+0x24>
 8004b34:	9b01      	ldr	r3, [sp, #4]
 8004b36:	3430      	adds	r4, #48	; 0x30
 8004b38:	1e9a      	subs	r2, r3, #2
 8004b3a:	0013      	movs	r3, r2
 8004b3c:	9903      	ldr	r1, [sp, #12]
 8004b3e:	7014      	strb	r4, [r2, #0]
 8004b40:	a804      	add	r0, sp, #16
 8004b42:	3007      	adds	r0, #7
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d80e      	bhi.n	8004b66 <__exponent+0x78>
 8004b48:	ab04      	add	r3, sp, #16
 8004b4a:	3307      	adds	r3, #7
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d804      	bhi.n	8004b5c <__exponent+0x6e>
 8004b52:	ab04      	add	r3, sp, #16
 8004b54:	3009      	adds	r0, #9
 8004b56:	18c0      	adds	r0, r0, r3
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	1ac0      	subs	r0, r0, r3
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	1818      	adds	r0, r3, r0
 8004b60:	1b40      	subs	r0, r0, r5
 8004b62:	b007      	add	sp, #28
 8004b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b66:	7818      	ldrb	r0, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	7008      	strb	r0, [r1, #0]
 8004b6c:	3101      	adds	r1, #1
 8004b6e:	e7e7      	b.n	8004b40 <__exponent+0x52>
 8004b70:	2330      	movs	r3, #48	; 0x30
 8004b72:	18e4      	adds	r4, r4, r3
 8004b74:	70ab      	strb	r3, [r5, #2]
 8004b76:	1d28      	adds	r0, r5, #4
 8004b78:	70ec      	strb	r4, [r5, #3]
 8004b7a:	e7f1      	b.n	8004b60 <__exponent+0x72>

08004b7c <_printf_float>:
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b095      	sub	sp, #84	; 0x54
 8004b80:	000c      	movs	r4, r1
 8004b82:	9208      	str	r2, [sp, #32]
 8004b84:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004b86:	9309      	str	r3, [sp, #36]	; 0x24
 8004b88:	0007      	movs	r7, r0
 8004b8a:	f001 fa91 	bl	80060b0 <_localeconv_r>
 8004b8e:	6803      	ldr	r3, [r0, #0]
 8004b90:	0018      	movs	r0, r3
 8004b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b94:	f7fb fab8 	bl	8000108 <strlen>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9312      	str	r3, [sp, #72]	; 0x48
 8004b9c:	7e23      	ldrb	r3, [r4, #24]
 8004b9e:	2207      	movs	r2, #7
 8004ba0:	001e      	movs	r6, r3
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	900d      	str	r0, [sp, #52]	; 0x34
 8004ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ba8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	05c9      	lsls	r1, r1, #23
 8004bae:	d547      	bpl.n	8004c40 <_printf_float+0xc4>
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	4393      	bics	r3, r2
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	3208      	adds	r2, #8
 8004bb8:	602a      	str	r2, [r5, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	64a2      	str	r2, [r4, #72]	; 0x48
 8004bc0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004bc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8004bca:	006b      	lsls	r3, r5, #1
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	930e      	str	r3, [sp, #56]	; 0x38
 8004bd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004bd2:	4ba8      	ldr	r3, [pc, #672]	; (8004e74 <_printf_float+0x2f8>)
 8004bd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004bd6:	4252      	negs	r2, r2
 8004bd8:	f7fd f9d4 	bl	8001f84 <__aeabi_dcmpun>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d131      	bne.n	8004c44 <_printf_float+0xc8>
 8004be0:	2201      	movs	r2, #1
 8004be2:	4ba4      	ldr	r3, [pc, #656]	; (8004e74 <_printf_float+0x2f8>)
 8004be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004be6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004be8:	4252      	negs	r2, r2
 8004bea:	f7fb fc3f 	bl	800046c <__aeabi_dcmple>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d128      	bne.n	8004c44 <_printf_float+0xc8>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	0029      	movs	r1, r5
 8004bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004bfa:	f7fb fc2d 	bl	8000458 <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d003      	beq.n	8004c0a <_printf_float+0x8e>
 8004c02:	0023      	movs	r3, r4
 8004c04:	222d      	movs	r2, #45	; 0x2d
 8004c06:	3343      	adds	r3, #67	; 0x43
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	4d9b      	ldr	r5, [pc, #620]	; (8004e78 <_printf_float+0x2fc>)
 8004c0c:	2e47      	cmp	r6, #71	; 0x47
 8004c0e:	d900      	bls.n	8004c12 <_printf_float+0x96>
 8004c10:	4d9a      	ldr	r5, [pc, #616]	; (8004e7c <_printf_float+0x300>)
 8004c12:	2303      	movs	r3, #3
 8004c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	439a      	bics	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6022      	str	r2, [r4, #0]
 8004c20:	930a      	str	r3, [sp, #40]	; 0x28
 8004c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c24:	0021      	movs	r1, r4
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	0038      	movs	r0, r7
 8004c2a:	9b08      	ldr	r3, [sp, #32]
 8004c2c:	aa13      	add	r2, sp, #76	; 0x4c
 8004c2e:	f000 f9f3 	bl	8005018 <_printf_common>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d000      	beq.n	8004c38 <_printf_float+0xbc>
 8004c36:	e09e      	b.n	8004d76 <_printf_float+0x1fa>
 8004c38:	2001      	movs	r0, #1
 8004c3a:	4240      	negs	r0, r0
 8004c3c:	b015      	add	sp, #84	; 0x54
 8004c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c40:	3307      	adds	r3, #7
 8004c42:	e7b6      	b.n	8004bb2 <_printf_float+0x36>
 8004c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c46:	002b      	movs	r3, r5
 8004c48:	0010      	movs	r0, r2
 8004c4a:	0029      	movs	r1, r5
 8004c4c:	f7fd f99a 	bl	8001f84 <__aeabi_dcmpun>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d00a      	beq.n	8004c6a <_printf_float+0xee>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	da03      	bge.n	8004c60 <_printf_float+0xe4>
 8004c58:	0023      	movs	r3, r4
 8004c5a:	222d      	movs	r2, #45	; 0x2d
 8004c5c:	3343      	adds	r3, #67	; 0x43
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	4d87      	ldr	r5, [pc, #540]	; (8004e80 <_printf_float+0x304>)
 8004c62:	2e47      	cmp	r6, #71	; 0x47
 8004c64:	d9d5      	bls.n	8004c12 <_printf_float+0x96>
 8004c66:	4d87      	ldr	r5, [pc, #540]	; (8004e84 <_printf_float+0x308>)
 8004c68:	e7d3      	b.n	8004c12 <_printf_float+0x96>
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	0031      	movs	r1, r6
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	4391      	bics	r1, r2
 8004c72:	910e      	str	r1, [sp, #56]	; 0x38
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	d147      	bne.n	8004d08 <_printf_float+0x18c>
 8004c78:	3307      	adds	r3, #7
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4313      	orrs	r3, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	9206      	str	r2, [sp, #24]
 8004c88:	aa12      	add	r2, sp, #72	; 0x48
 8004c8a:	9205      	str	r2, [sp, #20]
 8004c8c:	aa11      	add	r2, sp, #68	; 0x44
 8004c8e:	9203      	str	r2, [sp, #12]
 8004c90:	2223      	movs	r2, #35	; 0x23
 8004c92:	a908      	add	r1, sp, #32
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	1852      	adds	r2, r2, r1
 8004c9c:	9202      	str	r2, [sp, #8]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	0038      	movs	r0, r7
 8004ca2:	002b      	movs	r3, r5
 8004ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca6:	9604      	str	r6, [sp, #16]
 8004ca8:	f7ff febe 	bl	8004a28 <__cvt>
 8004cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cae:	0005      	movs	r5, r0
 8004cb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004cb2:	2b47      	cmp	r3, #71	; 0x47
 8004cb4:	d108      	bne.n	8004cc8 <_printf_float+0x14c>
 8004cb6:	1ccb      	adds	r3, r1, #3
 8004cb8:	db02      	blt.n	8004cc0 <_printf_float+0x144>
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	dd46      	ble.n	8004d4e <_printf_float+0x1d2>
 8004cc0:	0033      	movs	r3, r6
 8004cc2:	3b02      	subs	r3, #2
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	001e      	movs	r6, r3
 8004cc8:	2e65      	cmp	r6, #101	; 0x65
 8004cca:	d824      	bhi.n	8004d16 <_printf_float+0x19a>
 8004ccc:	0020      	movs	r0, r4
 8004cce:	0032      	movs	r2, r6
 8004cd0:	3901      	subs	r1, #1
 8004cd2:	3050      	adds	r0, #80	; 0x50
 8004cd4:	9111      	str	r1, [sp, #68]	; 0x44
 8004cd6:	f7ff ff0a 	bl	8004aee <__exponent>
 8004cda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cdc:	900a      	str	r0, [sp, #40]	; 0x28
 8004cde:	1813      	adds	r3, r2, r0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	2a01      	cmp	r2, #1
 8004ce4:	dc02      	bgt.n	8004cec <_printf_float+0x170>
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	07d2      	lsls	r2, r2, #31
 8004cea:	d501      	bpl.n	8004cf0 <_printf_float+0x174>
 8004cec:	3301      	adds	r3, #1
 8004cee:	6123      	str	r3, [r4, #16]
 8004cf0:	2323      	movs	r3, #35	; 0x23
 8004cf2:	aa08      	add	r2, sp, #32
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d100      	bne.n	8004cfe <_printf_float+0x182>
 8004cfc:	e791      	b.n	8004c22 <_printf_float+0xa6>
 8004cfe:	0023      	movs	r3, r4
 8004d00:	222d      	movs	r2, #45	; 0x2d
 8004d02:	3343      	adds	r3, #67	; 0x43
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e78c      	b.n	8004c22 <_printf_float+0xa6>
 8004d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d0a:	2a47      	cmp	r2, #71	; 0x47
 8004d0c:	d1b6      	bne.n	8004c7c <_printf_float+0x100>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1b4      	bne.n	8004c7c <_printf_float+0x100>
 8004d12:	3301      	adds	r3, #1
 8004d14:	e7b1      	b.n	8004c7a <_printf_float+0xfe>
 8004d16:	2e66      	cmp	r6, #102	; 0x66
 8004d18:	d11b      	bne.n	8004d52 <_printf_float+0x1d6>
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	dd0d      	ble.n	8004d3c <_printf_float+0x1c0>
 8004d20:	6121      	str	r1, [r4, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <_printf_float+0x1b0>
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	07d2      	lsls	r2, r2, #31
 8004d2a:	d502      	bpl.n	8004d32 <_printf_float+0x1b6>
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	1859      	adds	r1, r3, r1
 8004d30:	6121      	str	r1, [r4, #16]
 8004d32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d34:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d36:	2300      	movs	r3, #0
 8004d38:	930a      	str	r3, [sp, #40]	; 0x28
 8004d3a:	e7d9      	b.n	8004cf0 <_printf_float+0x174>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <_printf_float+0x1cc>
 8004d40:	2201      	movs	r2, #1
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	4211      	tst	r1, r2
 8004d46:	d000      	beq.n	8004d4a <_printf_float+0x1ce>
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	6122      	str	r2, [r4, #16]
 8004d4c:	e7f1      	b.n	8004d32 <_printf_float+0x1b6>
 8004d4e:	2367      	movs	r3, #103	; 0x67
 8004d50:	001e      	movs	r6, r3
 8004d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d56:	4293      	cmp	r3, r2
 8004d58:	db06      	blt.n	8004d68 <_printf_float+0x1ec>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	07d2      	lsls	r2, r2, #31
 8004d60:	d5e7      	bpl.n	8004d32 <_printf_float+0x1b6>
 8004d62:	3301      	adds	r3, #1
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	e7e4      	b.n	8004d32 <_printf_float+0x1b6>
 8004d68:	2101      	movs	r1, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dc01      	bgt.n	8004d72 <_printf_float+0x1f6>
 8004d6e:	1849      	adds	r1, r1, r1
 8004d70:	1ac9      	subs	r1, r1, r3
 8004d72:	1852      	adds	r2, r2, r1
 8004d74:	e7e9      	b.n	8004d4a <_printf_float+0x1ce>
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	0553      	lsls	r3, r2, #21
 8004d7a:	d408      	bmi.n	8004d8e <_printf_float+0x212>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	002a      	movs	r2, r5
 8004d80:	0038      	movs	r0, r7
 8004d82:	9908      	ldr	r1, [sp, #32]
 8004d84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d86:	47a8      	blx	r5
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d129      	bne.n	8004de0 <_printf_float+0x264>
 8004d8c:	e754      	b.n	8004c38 <_printf_float+0xbc>
 8004d8e:	2e65      	cmp	r6, #101	; 0x65
 8004d90:	d800      	bhi.n	8004d94 <_printf_float+0x218>
 8004d92:	e0ec      	b.n	8004f6e <_printf_float+0x3f2>
 8004d94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004d96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f7fb fb56 	bl	800044c <__aeabi_dcmpeq>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d034      	beq.n	8004e0e <_printf_float+0x292>
 8004da4:	2301      	movs	r3, #1
 8004da6:	0038      	movs	r0, r7
 8004da8:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <_printf_float+0x30c>)
 8004daa:	9908      	ldr	r1, [sp, #32]
 8004dac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dae:	47a8      	blx	r5
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d100      	bne.n	8004db6 <_printf_float+0x23a>
 8004db4:	e740      	b.n	8004c38 <_printf_float+0xbc>
 8004db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004db8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	db02      	blt.n	8004dc4 <_printf_float+0x248>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	07db      	lsls	r3, r3, #31
 8004dc2:	d50d      	bpl.n	8004de0 <_printf_float+0x264>
 8004dc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dc6:	0038      	movs	r0, r7
 8004dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dcc:	9908      	ldr	r1, [sp, #32]
 8004dce:	47a8      	blx	r5
 8004dd0:	2500      	movs	r5, #0
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d100      	bne.n	8004dd8 <_printf_float+0x25c>
 8004dd6:	e72f      	b.n	8004c38 <_printf_float+0xbc>
 8004dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	42ab      	cmp	r3, r5
 8004dde:	dc0a      	bgt.n	8004df6 <_printf_float+0x27a>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	d500      	bpl.n	8004de8 <_printf_float+0x26c>
 8004de6:	e114      	b.n	8005012 <_printf_float+0x496>
 8004de8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dea:	68e0      	ldr	r0, [r4, #12]
 8004dec:	4298      	cmp	r0, r3
 8004dee:	db00      	blt.n	8004df2 <_printf_float+0x276>
 8004df0:	e724      	b.n	8004c3c <_printf_float+0xc0>
 8004df2:	0018      	movs	r0, r3
 8004df4:	e722      	b.n	8004c3c <_printf_float+0xc0>
 8004df6:	0022      	movs	r2, r4
 8004df8:	2301      	movs	r3, #1
 8004dfa:	0038      	movs	r0, r7
 8004dfc:	9908      	ldr	r1, [sp, #32]
 8004dfe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e00:	321a      	adds	r2, #26
 8004e02:	47b0      	blx	r6
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d100      	bne.n	8004e0a <_printf_float+0x28e>
 8004e08:	e716      	b.n	8004c38 <_printf_float+0xbc>
 8004e0a:	3501      	adds	r5, #1
 8004e0c:	e7e4      	b.n	8004dd8 <_printf_float+0x25c>
 8004e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	dc3b      	bgt.n	8004e8c <_printf_float+0x310>
 8004e14:	2301      	movs	r3, #1
 8004e16:	0038      	movs	r0, r7
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <_printf_float+0x30c>)
 8004e1a:	9908      	ldr	r1, [sp, #32]
 8004e1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e1e:	47b0      	blx	r6
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d100      	bne.n	8004e26 <_printf_float+0x2aa>
 8004e24:	e708      	b.n	8004c38 <_printf_float+0xbc>
 8004e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	d102      	bne.n	8004e34 <_printf_float+0x2b8>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d5d5      	bpl.n	8004de0 <_printf_float+0x264>
 8004e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e36:	0038      	movs	r0, r7
 8004e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e3a:	9908      	ldr	r1, [sp, #32]
 8004e3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e3e:	47b0      	blx	r6
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d100      	bne.n	8004e46 <_printf_float+0x2ca>
 8004e44:	e6f8      	b.n	8004c38 <_printf_float+0xbc>
 8004e46:	2300      	movs	r3, #0
 8004e48:	930a      	str	r3, [sp, #40]	; 0x28
 8004e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e4e:	425b      	negs	r3, r3
 8004e50:	4293      	cmp	r3, r2
 8004e52:	dc01      	bgt.n	8004e58 <_printf_float+0x2dc>
 8004e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e56:	e792      	b.n	8004d7e <_printf_float+0x202>
 8004e58:	0022      	movs	r2, r4
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	0038      	movs	r0, r7
 8004e5e:	9908      	ldr	r1, [sp, #32]
 8004e60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004e62:	321a      	adds	r2, #26
 8004e64:	47b0      	blx	r6
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d100      	bne.n	8004e6c <_printf_float+0x2f0>
 8004e6a:	e6e5      	b.n	8004c38 <_printf_float+0xbc>
 8004e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6e:	3301      	adds	r3, #1
 8004e70:	e7ea      	b.n	8004e48 <_printf_float+0x2cc>
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	7fefffff 	.word	0x7fefffff
 8004e78:	080079c0 	.word	0x080079c0
 8004e7c:	080079c4 	.word	0x080079c4
 8004e80:	080079c8 	.word	0x080079c8
 8004e84:	080079cc 	.word	0x080079cc
 8004e88:	080079d0 	.word	0x080079d0
 8004e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e90:	920a      	str	r2, [sp, #40]	; 0x28
 8004e92:	429a      	cmp	r2, r3
 8004e94:	dd00      	ble.n	8004e98 <_printf_float+0x31c>
 8004e96:	930a      	str	r3, [sp, #40]	; 0x28
 8004e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	dc3d      	bgt.n	8004f1a <_printf_float+0x39e>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	17db      	asrs	r3, r3, #31
 8004ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004eae:	930c      	str	r3, [sp, #48]	; 0x30
 8004eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	dc36      	bgt.n	8004f2c <_printf_float+0x3b0>
 8004ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	db40      	blt.n	8004f48 <_printf_float+0x3cc>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	07db      	lsls	r3, r3, #31
 8004eca:	d43d      	bmi.n	8004f48 <_printf_float+0x3cc>
 8004ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ed0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	1a52      	subs	r2, r2, r1
 8004ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	dd00      	ble.n	8004ede <_printf_float+0x362>
 8004edc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dc3a      	bgt.n	8004f5a <_printf_float+0x3de>
 8004ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	17db      	asrs	r3, r3, #31
 8004eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ef8:	400a      	ands	r2, r1
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dc00      	bgt.n	8004f02 <_printf_float+0x386>
 8004f00:	e76e      	b.n	8004de0 <_printf_float+0x264>
 8004f02:	0022      	movs	r2, r4
 8004f04:	2301      	movs	r3, #1
 8004f06:	0038      	movs	r0, r7
 8004f08:	9908      	ldr	r1, [sp, #32]
 8004f0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f0c:	321a      	adds	r2, #26
 8004f0e:	47b0      	blx	r6
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d100      	bne.n	8004f16 <_printf_float+0x39a>
 8004f14:	e690      	b.n	8004c38 <_printf_float+0xbc>
 8004f16:	3501      	adds	r5, #1
 8004f18:	e7e9      	b.n	8004eee <_printf_float+0x372>
 8004f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f1c:	002a      	movs	r2, r5
 8004f1e:	0038      	movs	r0, r7
 8004f20:	9908      	ldr	r1, [sp, #32]
 8004f22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f24:	47b0      	blx	r6
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d1b9      	bne.n	8004e9e <_printf_float+0x322>
 8004f2a:	e685      	b.n	8004c38 <_printf_float+0xbc>
 8004f2c:	0022      	movs	r2, r4
 8004f2e:	2301      	movs	r3, #1
 8004f30:	0038      	movs	r0, r7
 8004f32:	9908      	ldr	r1, [sp, #32]
 8004f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f36:	321a      	adds	r2, #26
 8004f38:	47b0      	blx	r6
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d100      	bne.n	8004f40 <_printf_float+0x3c4>
 8004f3e:	e67b      	b.n	8004c38 <_printf_float+0xbc>
 8004f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f42:	3301      	adds	r3, #1
 8004f44:	930e      	str	r3, [sp, #56]	; 0x38
 8004f46:	e7b0      	b.n	8004eaa <_printf_float+0x32e>
 8004f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f4a:	0038      	movs	r0, r7
 8004f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f4e:	9908      	ldr	r1, [sp, #32]
 8004f50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f52:	47b0      	blx	r6
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d1b9      	bne.n	8004ecc <_printf_float+0x350>
 8004f58:	e66e      	b.n	8004c38 <_printf_float+0xbc>
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	0038      	movs	r0, r7
 8004f5e:	18ea      	adds	r2, r5, r3
 8004f60:	9908      	ldr	r1, [sp, #32]
 8004f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f66:	47a8      	blx	r5
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d1bb      	bne.n	8004ee4 <_printf_float+0x368>
 8004f6c:	e664      	b.n	8004c38 <_printf_float+0xbc>
 8004f6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	dc02      	bgt.n	8004f7a <_printf_float+0x3fe>
 8004f74:	2301      	movs	r3, #1
 8004f76:	421a      	tst	r2, r3
 8004f78:	d038      	beq.n	8004fec <_printf_float+0x470>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	002a      	movs	r2, r5
 8004f7e:	0038      	movs	r0, r7
 8004f80:	9908      	ldr	r1, [sp, #32]
 8004f82:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f84:	47b0      	blx	r6
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d100      	bne.n	8004f8c <_printf_float+0x410>
 8004f8a:	e655      	b.n	8004c38 <_printf_float+0xbc>
 8004f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f8e:	0038      	movs	r0, r7
 8004f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f92:	9908      	ldr	r1, [sp, #32]
 8004f94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f96:	47b0      	blx	r6
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d100      	bne.n	8004f9e <_printf_float+0x422>
 8004f9c:	e64c      	b.n	8004c38 <_printf_float+0xbc>
 8004f9e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004fa0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f7fb fa51 	bl	800044c <__aeabi_dcmpeq>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d11c      	bne.n	8004fe8 <_printf_float+0x46c>
 8004fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fb0:	1c6a      	adds	r2, r5, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	0038      	movs	r0, r7
 8004fb6:	9908      	ldr	r1, [sp, #32]
 8004fb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004fba:	47a8      	blx	r5
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d10f      	bne.n	8004fe0 <_printf_float+0x464>
 8004fc0:	e63a      	b.n	8004c38 <_printf_float+0xbc>
 8004fc2:	0022      	movs	r2, r4
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	0038      	movs	r0, r7
 8004fc8:	9908      	ldr	r1, [sp, #32]
 8004fca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004fcc:	321a      	adds	r2, #26
 8004fce:	47b0      	blx	r6
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d100      	bne.n	8004fd6 <_printf_float+0x45a>
 8004fd4:	e630      	b.n	8004c38 <_printf_float+0xbc>
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dcf0      	bgt.n	8004fc2 <_printf_float+0x446>
 8004fe0:	0022      	movs	r2, r4
 8004fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe4:	3250      	adds	r2, #80	; 0x50
 8004fe6:	e6cb      	b.n	8004d80 <_printf_float+0x204>
 8004fe8:	2500      	movs	r5, #0
 8004fea:	e7f5      	b.n	8004fd8 <_printf_float+0x45c>
 8004fec:	002a      	movs	r2, r5
 8004fee:	e7e1      	b.n	8004fb4 <_printf_float+0x438>
 8004ff0:	0022      	movs	r2, r4
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	0038      	movs	r0, r7
 8004ff6:	9908      	ldr	r1, [sp, #32]
 8004ff8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004ffa:	3219      	adds	r2, #25
 8004ffc:	47b0      	blx	r6
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	d100      	bne.n	8005004 <_printf_float+0x488>
 8005002:	e619      	b.n	8004c38 <_printf_float+0xbc>
 8005004:	3501      	adds	r5, #1
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	42ab      	cmp	r3, r5
 800500e:	dcef      	bgt.n	8004ff0 <_printf_float+0x474>
 8005010:	e6ea      	b.n	8004de8 <_printf_float+0x26c>
 8005012:	2500      	movs	r5, #0
 8005014:	e7f7      	b.n	8005006 <_printf_float+0x48a>
 8005016:	46c0      	nop			; (mov r8, r8)

08005018 <_printf_common>:
 8005018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800501a:	0015      	movs	r5, r2
 800501c:	9301      	str	r3, [sp, #4]
 800501e:	688a      	ldr	r2, [r1, #8]
 8005020:	690b      	ldr	r3, [r1, #16]
 8005022:	000c      	movs	r4, r1
 8005024:	9000      	str	r0, [sp, #0]
 8005026:	4293      	cmp	r3, r2
 8005028:	da00      	bge.n	800502c <_printf_common+0x14>
 800502a:	0013      	movs	r3, r2
 800502c:	0022      	movs	r2, r4
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	3243      	adds	r2, #67	; 0x43
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	2a00      	cmp	r2, #0
 8005036:	d001      	beq.n	800503c <_printf_common+0x24>
 8005038:	3301      	adds	r3, #1
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	069b      	lsls	r3, r3, #26
 8005040:	d502      	bpl.n	8005048 <_printf_common+0x30>
 8005042:	682b      	ldr	r3, [r5, #0]
 8005044:	3302      	adds	r3, #2
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	2306      	movs	r3, #6
 800504c:	0017      	movs	r7, r2
 800504e:	401f      	ands	r7, r3
 8005050:	421a      	tst	r2, r3
 8005052:	d027      	beq.n	80050a4 <_printf_common+0x8c>
 8005054:	0023      	movs	r3, r4
 8005056:	3343      	adds	r3, #67	; 0x43
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	1e5a      	subs	r2, r3, #1
 800505c:	4193      	sbcs	r3, r2
 800505e:	6822      	ldr	r2, [r4, #0]
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d430      	bmi.n	80050c6 <_printf_common+0xae>
 8005064:	0022      	movs	r2, r4
 8005066:	9901      	ldr	r1, [sp, #4]
 8005068:	9800      	ldr	r0, [sp, #0]
 800506a:	9e08      	ldr	r6, [sp, #32]
 800506c:	3243      	adds	r2, #67	; 0x43
 800506e:	47b0      	blx	r6
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d025      	beq.n	80050c0 <_printf_common+0xa8>
 8005074:	2306      	movs	r3, #6
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	682a      	ldr	r2, [r5, #0]
 800507a:	68e1      	ldr	r1, [r4, #12]
 800507c:	2500      	movs	r5, #0
 800507e:	4003      	ands	r3, r0
 8005080:	2b04      	cmp	r3, #4
 8005082:	d103      	bne.n	800508c <_printf_common+0x74>
 8005084:	1a8d      	subs	r5, r1, r2
 8005086:	43eb      	mvns	r3, r5
 8005088:	17db      	asrs	r3, r3, #31
 800508a:	401d      	ands	r5, r3
 800508c:	68a3      	ldr	r3, [r4, #8]
 800508e:	6922      	ldr	r2, [r4, #16]
 8005090:	4293      	cmp	r3, r2
 8005092:	dd01      	ble.n	8005098 <_printf_common+0x80>
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	18ed      	adds	r5, r5, r3
 8005098:	2700      	movs	r7, #0
 800509a:	42bd      	cmp	r5, r7
 800509c:	d120      	bne.n	80050e0 <_printf_common+0xc8>
 800509e:	2000      	movs	r0, #0
 80050a0:	e010      	b.n	80050c4 <_printf_common+0xac>
 80050a2:	3701      	adds	r7, #1
 80050a4:	68e3      	ldr	r3, [r4, #12]
 80050a6:	682a      	ldr	r2, [r5, #0]
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	42bb      	cmp	r3, r7
 80050ac:	ddd2      	ble.n	8005054 <_printf_common+0x3c>
 80050ae:	0022      	movs	r2, r4
 80050b0:	2301      	movs	r3, #1
 80050b2:	9901      	ldr	r1, [sp, #4]
 80050b4:	9800      	ldr	r0, [sp, #0]
 80050b6:	9e08      	ldr	r6, [sp, #32]
 80050b8:	3219      	adds	r2, #25
 80050ba:	47b0      	blx	r6
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d1f0      	bne.n	80050a2 <_printf_common+0x8a>
 80050c0:	2001      	movs	r0, #1
 80050c2:	4240      	negs	r0, r0
 80050c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050c6:	2030      	movs	r0, #48	; 0x30
 80050c8:	18e1      	adds	r1, r4, r3
 80050ca:	3143      	adds	r1, #67	; 0x43
 80050cc:	7008      	strb	r0, [r1, #0]
 80050ce:	0021      	movs	r1, r4
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	3145      	adds	r1, #69	; 0x45
 80050d4:	7809      	ldrb	r1, [r1, #0]
 80050d6:	18a2      	adds	r2, r4, r2
 80050d8:	3243      	adds	r2, #67	; 0x43
 80050da:	3302      	adds	r3, #2
 80050dc:	7011      	strb	r1, [r2, #0]
 80050de:	e7c1      	b.n	8005064 <_printf_common+0x4c>
 80050e0:	0022      	movs	r2, r4
 80050e2:	2301      	movs	r3, #1
 80050e4:	9901      	ldr	r1, [sp, #4]
 80050e6:	9800      	ldr	r0, [sp, #0]
 80050e8:	9e08      	ldr	r6, [sp, #32]
 80050ea:	321a      	adds	r2, #26
 80050ec:	47b0      	blx	r6
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	d0e6      	beq.n	80050c0 <_printf_common+0xa8>
 80050f2:	3701      	adds	r7, #1
 80050f4:	e7d1      	b.n	800509a <_printf_common+0x82>
	...

080050f8 <_printf_i>:
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	b08b      	sub	sp, #44	; 0x2c
 80050fc:	9206      	str	r2, [sp, #24]
 80050fe:	000a      	movs	r2, r1
 8005100:	3243      	adds	r2, #67	; 0x43
 8005102:	9307      	str	r3, [sp, #28]
 8005104:	9005      	str	r0, [sp, #20]
 8005106:	9204      	str	r2, [sp, #16]
 8005108:	7e0a      	ldrb	r2, [r1, #24]
 800510a:	000c      	movs	r4, r1
 800510c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800510e:	2a78      	cmp	r2, #120	; 0x78
 8005110:	d806      	bhi.n	8005120 <_printf_i+0x28>
 8005112:	2a62      	cmp	r2, #98	; 0x62
 8005114:	d808      	bhi.n	8005128 <_printf_i+0x30>
 8005116:	2a00      	cmp	r2, #0
 8005118:	d100      	bne.n	800511c <_printf_i+0x24>
 800511a:	e0c0      	b.n	800529e <_printf_i+0x1a6>
 800511c:	2a58      	cmp	r2, #88	; 0x58
 800511e:	d052      	beq.n	80051c6 <_printf_i+0xce>
 8005120:	0026      	movs	r6, r4
 8005122:	3642      	adds	r6, #66	; 0x42
 8005124:	7032      	strb	r2, [r6, #0]
 8005126:	e022      	b.n	800516e <_printf_i+0x76>
 8005128:	0010      	movs	r0, r2
 800512a:	3863      	subs	r0, #99	; 0x63
 800512c:	2815      	cmp	r0, #21
 800512e:	d8f7      	bhi.n	8005120 <_printf_i+0x28>
 8005130:	f7fa fffc 	bl	800012c <__gnu_thumb1_case_shi>
 8005134:	001f0016 	.word	0x001f0016
 8005138:	fff6fff6 	.word	0xfff6fff6
 800513c:	fff6fff6 	.word	0xfff6fff6
 8005140:	fff6001f 	.word	0xfff6001f
 8005144:	fff6fff6 	.word	0xfff6fff6
 8005148:	00a8fff6 	.word	0x00a8fff6
 800514c:	009a0036 	.word	0x009a0036
 8005150:	fff6fff6 	.word	0xfff6fff6
 8005154:	fff600b9 	.word	0xfff600b9
 8005158:	fff60036 	.word	0xfff60036
 800515c:	009efff6 	.word	0x009efff6
 8005160:	0026      	movs	r6, r4
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	3642      	adds	r6, #66	; 0x42
 8005166:	1d11      	adds	r1, r2, #4
 8005168:	6019      	str	r1, [r3, #0]
 800516a:	6813      	ldr	r3, [r2, #0]
 800516c:	7033      	strb	r3, [r6, #0]
 800516e:	2301      	movs	r3, #1
 8005170:	e0a7      	b.n	80052c2 <_printf_i+0x1ca>
 8005172:	6808      	ldr	r0, [r1, #0]
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	1d0a      	adds	r2, r1, #4
 8005178:	0605      	lsls	r5, r0, #24
 800517a:	d50b      	bpl.n	8005194 <_printf_i+0x9c>
 800517c:	680d      	ldr	r5, [r1, #0]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	2d00      	cmp	r5, #0
 8005182:	da03      	bge.n	800518c <_printf_i+0x94>
 8005184:	232d      	movs	r3, #45	; 0x2d
 8005186:	9a04      	ldr	r2, [sp, #16]
 8005188:	426d      	negs	r5, r5
 800518a:	7013      	strb	r3, [r2, #0]
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <_printf_i+0x21c>)
 800518e:	270a      	movs	r7, #10
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	e032      	b.n	80051fa <_printf_i+0x102>
 8005194:	680d      	ldr	r5, [r1, #0]
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	0641      	lsls	r1, r0, #25
 800519a:	d5f1      	bpl.n	8005180 <_printf_i+0x88>
 800519c:	b22d      	sxth	r5, r5
 800519e:	e7ef      	b.n	8005180 <_printf_i+0x88>
 80051a0:	680d      	ldr	r5, [r1, #0]
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	1d08      	adds	r0, r1, #4
 80051a6:	6018      	str	r0, [r3, #0]
 80051a8:	062e      	lsls	r6, r5, #24
 80051aa:	d501      	bpl.n	80051b0 <_printf_i+0xb8>
 80051ac:	680d      	ldr	r5, [r1, #0]
 80051ae:	e003      	b.n	80051b8 <_printf_i+0xc0>
 80051b0:	066d      	lsls	r5, r5, #25
 80051b2:	d5fb      	bpl.n	80051ac <_printf_i+0xb4>
 80051b4:	680d      	ldr	r5, [r1, #0]
 80051b6:	b2ad      	uxth	r5, r5
 80051b8:	4b56      	ldr	r3, [pc, #344]	; (8005314 <_printf_i+0x21c>)
 80051ba:	270a      	movs	r7, #10
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	2a6f      	cmp	r2, #111	; 0x6f
 80051c0:	d117      	bne.n	80051f2 <_printf_i+0xfa>
 80051c2:	2708      	movs	r7, #8
 80051c4:	e015      	b.n	80051f2 <_printf_i+0xfa>
 80051c6:	3145      	adds	r1, #69	; 0x45
 80051c8:	700a      	strb	r2, [r1, #0]
 80051ca:	4a52      	ldr	r2, [pc, #328]	; (8005314 <_printf_i+0x21c>)
 80051cc:	9203      	str	r2, [sp, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	6821      	ldr	r1, [r4, #0]
 80051d2:	ca20      	ldmia	r2!, {r5}
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	0608      	lsls	r0, r1, #24
 80051d8:	d550      	bpl.n	800527c <_printf_i+0x184>
 80051da:	07cb      	lsls	r3, r1, #31
 80051dc:	d502      	bpl.n	80051e4 <_printf_i+0xec>
 80051de:	2320      	movs	r3, #32
 80051e0:	4319      	orrs	r1, r3
 80051e2:	6021      	str	r1, [r4, #0]
 80051e4:	2710      	movs	r7, #16
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	d103      	bne.n	80051f2 <_printf_i+0xfa>
 80051ea:	2320      	movs	r3, #32
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	439a      	bics	r2, r3
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	0023      	movs	r3, r4
 80051f4:	2200      	movs	r2, #0
 80051f6:	3343      	adds	r3, #67	; 0x43
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	db03      	blt.n	800520a <_printf_i+0x112>
 8005202:	2204      	movs	r2, #4
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	4391      	bics	r1, r2
 8005208:	6021      	str	r1, [r4, #0]
 800520a:	2d00      	cmp	r5, #0
 800520c:	d102      	bne.n	8005214 <_printf_i+0x11c>
 800520e:	9e04      	ldr	r6, [sp, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <_printf_i+0x136>
 8005214:	9e04      	ldr	r6, [sp, #16]
 8005216:	0028      	movs	r0, r5
 8005218:	0039      	movs	r1, r7
 800521a:	f7fb f817 	bl	800024c <__aeabi_uidivmod>
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	3e01      	subs	r6, #1
 8005222:	5c5b      	ldrb	r3, [r3, r1]
 8005224:	7033      	strb	r3, [r6, #0]
 8005226:	002b      	movs	r3, r5
 8005228:	0005      	movs	r5, r0
 800522a:	429f      	cmp	r7, r3
 800522c:	d9f3      	bls.n	8005216 <_printf_i+0x11e>
 800522e:	2f08      	cmp	r7, #8
 8005230:	d109      	bne.n	8005246 <_printf_i+0x14e>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	07db      	lsls	r3, r3, #31
 8005236:	d506      	bpl.n	8005246 <_printf_i+0x14e>
 8005238:	6863      	ldr	r3, [r4, #4]
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	4293      	cmp	r3, r2
 800523e:	dc02      	bgt.n	8005246 <_printf_i+0x14e>
 8005240:	2330      	movs	r3, #48	; 0x30
 8005242:	3e01      	subs	r6, #1
 8005244:	7033      	strb	r3, [r6, #0]
 8005246:	9b04      	ldr	r3, [sp, #16]
 8005248:	1b9b      	subs	r3, r3, r6
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	9b07      	ldr	r3, [sp, #28]
 800524e:	0021      	movs	r1, r4
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	9805      	ldr	r0, [sp, #20]
 8005254:	9b06      	ldr	r3, [sp, #24]
 8005256:	aa09      	add	r2, sp, #36	; 0x24
 8005258:	f7ff fede 	bl	8005018 <_printf_common>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d135      	bne.n	80052cc <_printf_i+0x1d4>
 8005260:	2001      	movs	r0, #1
 8005262:	4240      	negs	r0, r0
 8005264:	b00b      	add	sp, #44	; 0x2c
 8005266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005268:	2220      	movs	r2, #32
 800526a:	6809      	ldr	r1, [r1, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	6022      	str	r2, [r4, #0]
 8005270:	0022      	movs	r2, r4
 8005272:	2178      	movs	r1, #120	; 0x78
 8005274:	3245      	adds	r2, #69	; 0x45
 8005276:	7011      	strb	r1, [r2, #0]
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <_printf_i+0x220>)
 800527a:	e7a7      	b.n	80051cc <_printf_i+0xd4>
 800527c:	0648      	lsls	r0, r1, #25
 800527e:	d5ac      	bpl.n	80051da <_printf_i+0xe2>
 8005280:	b2ad      	uxth	r5, r5
 8005282:	e7aa      	b.n	80051da <_printf_i+0xe2>
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	680d      	ldr	r5, [r1, #0]
 8005288:	1d10      	adds	r0, r2, #4
 800528a:	6949      	ldr	r1, [r1, #20]
 800528c:	6018      	str	r0, [r3, #0]
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	062e      	lsls	r6, r5, #24
 8005292:	d501      	bpl.n	8005298 <_printf_i+0x1a0>
 8005294:	6019      	str	r1, [r3, #0]
 8005296:	e002      	b.n	800529e <_printf_i+0x1a6>
 8005298:	066d      	lsls	r5, r5, #25
 800529a:	d5fb      	bpl.n	8005294 <_printf_i+0x19c>
 800529c:	8019      	strh	r1, [r3, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	9e04      	ldr	r6, [sp, #16]
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	e7d2      	b.n	800524c <_printf_i+0x154>
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	1d11      	adds	r1, r2, #4
 80052aa:	6019      	str	r1, [r3, #0]
 80052ac:	6816      	ldr	r6, [r2, #0]
 80052ae:	2100      	movs	r1, #0
 80052b0:	0030      	movs	r0, r6
 80052b2:	6862      	ldr	r2, [r4, #4]
 80052b4:	f000 ff0a 	bl	80060cc <memchr>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d001      	beq.n	80052c0 <_printf_i+0x1c8>
 80052bc:	1b80      	subs	r0, r0, r6
 80052be:	6060      	str	r0, [r4, #4]
 80052c0:	6863      	ldr	r3, [r4, #4]
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	2300      	movs	r3, #0
 80052c6:	9a04      	ldr	r2, [sp, #16]
 80052c8:	7013      	strb	r3, [r2, #0]
 80052ca:	e7bf      	b.n	800524c <_printf_i+0x154>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	0032      	movs	r2, r6
 80052d0:	9906      	ldr	r1, [sp, #24]
 80052d2:	9805      	ldr	r0, [sp, #20]
 80052d4:	9d07      	ldr	r5, [sp, #28]
 80052d6:	47a8      	blx	r5
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d0c1      	beq.n	8005260 <_printf_i+0x168>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	079b      	lsls	r3, r3, #30
 80052e0:	d415      	bmi.n	800530e <_printf_i+0x216>
 80052e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e4:	68e0      	ldr	r0, [r4, #12]
 80052e6:	4298      	cmp	r0, r3
 80052e8:	dabc      	bge.n	8005264 <_printf_i+0x16c>
 80052ea:	0018      	movs	r0, r3
 80052ec:	e7ba      	b.n	8005264 <_printf_i+0x16c>
 80052ee:	0022      	movs	r2, r4
 80052f0:	2301      	movs	r3, #1
 80052f2:	9906      	ldr	r1, [sp, #24]
 80052f4:	9805      	ldr	r0, [sp, #20]
 80052f6:	9e07      	ldr	r6, [sp, #28]
 80052f8:	3219      	adds	r2, #25
 80052fa:	47b0      	blx	r6
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d0af      	beq.n	8005260 <_printf_i+0x168>
 8005300:	3501      	adds	r5, #1
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	42ab      	cmp	r3, r5
 800530a:	dcf0      	bgt.n	80052ee <_printf_i+0x1f6>
 800530c:	e7e9      	b.n	80052e2 <_printf_i+0x1ea>
 800530e:	2500      	movs	r5, #0
 8005310:	e7f7      	b.n	8005302 <_printf_i+0x20a>
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	080079d2 	.word	0x080079d2
 8005318:	080079e3 	.word	0x080079e3

0800531c <siprintf>:
 800531c:	b40e      	push	{r1, r2, r3}
 800531e:	b500      	push	{lr}
 8005320:	490b      	ldr	r1, [pc, #44]	; (8005350 <siprintf+0x34>)
 8005322:	b09c      	sub	sp, #112	; 0x70
 8005324:	ab1d      	add	r3, sp, #116	; 0x74
 8005326:	9002      	str	r0, [sp, #8]
 8005328:	9006      	str	r0, [sp, #24]
 800532a:	9107      	str	r1, [sp, #28]
 800532c:	9104      	str	r1, [sp, #16]
 800532e:	4809      	ldr	r0, [pc, #36]	; (8005354 <siprintf+0x38>)
 8005330:	4909      	ldr	r1, [pc, #36]	; (8005358 <siprintf+0x3c>)
 8005332:	cb04      	ldmia	r3!, {r2}
 8005334:	9105      	str	r1, [sp, #20]
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	a902      	add	r1, sp, #8
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	f001 fb90 	bl	8006a60 <_svfiprintf_r>
 8005340:	2300      	movs	r3, #0
 8005342:	9a02      	ldr	r2, [sp, #8]
 8005344:	7013      	strb	r3, [r2, #0]
 8005346:	b01c      	add	sp, #112	; 0x70
 8005348:	bc08      	pop	{r3}
 800534a:	b003      	add	sp, #12
 800534c:	4718      	bx	r3
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	7fffffff 	.word	0x7fffffff
 8005354:	20000010 	.word	0x20000010
 8005358:	ffff0208 	.word	0xffff0208

0800535c <quorem>:
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	0006      	movs	r6, r0
 8005360:	690d      	ldr	r5, [r1, #16]
 8005362:	6933      	ldr	r3, [r6, #16]
 8005364:	b087      	sub	sp, #28
 8005366:	2000      	movs	r0, #0
 8005368:	9102      	str	r1, [sp, #8]
 800536a:	42ab      	cmp	r3, r5
 800536c:	db6b      	blt.n	8005446 <quorem+0xea>
 800536e:	000b      	movs	r3, r1
 8005370:	3d01      	subs	r5, #1
 8005372:	00ac      	lsls	r4, r5, #2
 8005374:	3314      	adds	r3, #20
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	191b      	adds	r3, r3, r4
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	0033      	movs	r3, r6
 800537e:	3314      	adds	r3, #20
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	191c      	adds	r4, r3, r4
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	6827      	ldr	r7, [r4, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	0038      	movs	r0, r7
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	0019      	movs	r1, r3
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	f7fa fed4 	bl	8000140 <__udivsi3>
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	9000      	str	r0, [sp, #0]
 800539c:	429f      	cmp	r7, r3
 800539e:	d329      	bcc.n	80053f4 <quorem+0x98>
 80053a0:	2300      	movs	r3, #0
 80053a2:	469c      	mov	ip, r3
 80053a4:	9801      	ldr	r0, [sp, #4]
 80053a6:	9f05      	ldr	r7, [sp, #20]
 80053a8:	9304      	str	r3, [sp, #16]
 80053aa:	cf08      	ldmia	r7!, {r3}
 80053ac:	9a00      	ldr	r2, [sp, #0]
 80053ae:	b299      	uxth	r1, r3
 80053b0:	4351      	muls	r1, r2
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	4353      	muls	r3, r2
 80053b6:	4461      	add	r1, ip
 80053b8:	0c0a      	lsrs	r2, r1, #16
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	0c1a      	lsrs	r2, r3, #16
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	6803      	ldr	r3, [r0, #0]
 80053c2:	4694      	mov	ip, r2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	9b04      	ldr	r3, [sp, #16]
 80053c8:	b289      	uxth	r1, r1
 80053ca:	18d2      	adds	r2, r2, r3
 80053cc:	6803      	ldr	r3, [r0, #0]
 80053ce:	1a52      	subs	r2, r2, r1
 80053d0:	0c19      	lsrs	r1, r3, #16
 80053d2:	466b      	mov	r3, sp
 80053d4:	8a9b      	ldrh	r3, [r3, #20]
 80053d6:	1acb      	subs	r3, r1, r3
 80053d8:	1411      	asrs	r1, r2, #16
 80053da:	185b      	adds	r3, r3, r1
 80053dc:	1419      	asrs	r1, r3, #16
 80053de:	b292      	uxth	r2, r2
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	9b03      	ldr	r3, [sp, #12]
 80053e6:	9104      	str	r1, [sp, #16]
 80053e8:	c004      	stmia	r0!, {r2}
 80053ea:	42bb      	cmp	r3, r7
 80053ec:	d2dd      	bcs.n	80053aa <quorem+0x4e>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02e      	beq.n	8005452 <quorem+0xf6>
 80053f4:	0030      	movs	r0, r6
 80053f6:	9902      	ldr	r1, [sp, #8]
 80053f8:	f001 f902 	bl	8006600 <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	db21      	blt.n	8005444 <quorem+0xe8>
 8005400:	0030      	movs	r0, r6
 8005402:	2400      	movs	r4, #0
 8005404:	9b00      	ldr	r3, [sp, #0]
 8005406:	9902      	ldr	r1, [sp, #8]
 8005408:	3301      	adds	r3, #1
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	3014      	adds	r0, #20
 800540e:	3114      	adds	r1, #20
 8005410:	6802      	ldr	r2, [r0, #0]
 8005412:	c908      	ldmia	r1!, {r3}
 8005414:	b292      	uxth	r2, r2
 8005416:	1914      	adds	r4, r2, r4
 8005418:	b29a      	uxth	r2, r3
 800541a:	1aa2      	subs	r2, r4, r2
 800541c:	6804      	ldr	r4, [r0, #0]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	0c24      	lsrs	r4, r4, #16
 8005422:	1ae3      	subs	r3, r4, r3
 8005424:	1414      	asrs	r4, r2, #16
 8005426:	191b      	adds	r3, r3, r4
 8005428:	141c      	asrs	r4, r3, #16
 800542a:	b292      	uxth	r2, r2
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	4313      	orrs	r3, r2
 8005430:	c008      	stmia	r0!, {r3}
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	428b      	cmp	r3, r1
 8005436:	d2eb      	bcs.n	8005410 <quorem+0xb4>
 8005438:	9a01      	ldr	r2, [sp, #4]
 800543a:	00ab      	lsls	r3, r5, #2
 800543c:	18d3      	adds	r3, r2, r3
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2a00      	cmp	r2, #0
 8005442:	d010      	beq.n	8005466 <quorem+0x10a>
 8005444:	9800      	ldr	r0, [sp, #0]
 8005446:	b007      	add	sp, #28
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <quorem+0xfe>
 8005450:	3d01      	subs	r5, #1
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	3c04      	subs	r4, #4
 8005456:	42a3      	cmp	r3, r4
 8005458:	d3f7      	bcc.n	800544a <quorem+0xee>
 800545a:	6135      	str	r5, [r6, #16]
 800545c:	e7ca      	b.n	80053f4 <quorem+0x98>
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2a00      	cmp	r2, #0
 8005462:	d104      	bne.n	800546e <quorem+0x112>
 8005464:	3d01      	subs	r5, #1
 8005466:	9a01      	ldr	r2, [sp, #4]
 8005468:	3b04      	subs	r3, #4
 800546a:	429a      	cmp	r2, r3
 800546c:	d3f7      	bcc.n	800545e <quorem+0x102>
 800546e:	6135      	str	r5, [r6, #16]
 8005470:	e7e8      	b.n	8005444 <quorem+0xe8>
	...

08005474 <_dtoa_r>:
 8005474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005476:	b09d      	sub	sp, #116	; 0x74
 8005478:	9202      	str	r2, [sp, #8]
 800547a:	9303      	str	r3, [sp, #12]
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	9c03      	ldr	r4, [sp, #12]
 8005480:	930a      	str	r3, [sp, #40]	; 0x28
 8005482:	940b      	str	r4, [sp, #44]	; 0x2c
 8005484:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005486:	0007      	movs	r7, r0
 8005488:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800548a:	2c00      	cmp	r4, #0
 800548c:	d10e      	bne.n	80054ac <_dtoa_r+0x38>
 800548e:	2010      	movs	r0, #16
 8005490:	f000 fe12 	bl	80060b8 <malloc>
 8005494:	1e02      	subs	r2, r0, #0
 8005496:	6278      	str	r0, [r7, #36]	; 0x24
 8005498:	d104      	bne.n	80054a4 <_dtoa_r+0x30>
 800549a:	21ea      	movs	r1, #234	; 0xea
 800549c:	4bc0      	ldr	r3, [pc, #768]	; (80057a0 <_dtoa_r+0x32c>)
 800549e:	48c1      	ldr	r0, [pc, #772]	; (80057a4 <_dtoa_r+0x330>)
 80054a0:	f001 fbf0 	bl	8006c84 <__assert_func>
 80054a4:	6044      	str	r4, [r0, #4]
 80054a6:	6084      	str	r4, [r0, #8]
 80054a8:	6004      	str	r4, [r0, #0]
 80054aa:	60c4      	str	r4, [r0, #12]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d00a      	beq.n	80054ca <_dtoa_r+0x56>
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	2301      	movs	r3, #1
 80054b8:	4093      	lsls	r3, r2
 80054ba:	604a      	str	r2, [r1, #4]
 80054bc:	608b      	str	r3, [r1, #8]
 80054be:	0038      	movs	r0, r7
 80054c0:	f000 fe5c 	bl	800617c <_Bfree>
 80054c4:	2200      	movs	r2, #0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	9b03      	ldr	r3, [sp, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da21      	bge.n	8005514 <_dtoa_r+0xa0>
 80054d0:	2301      	movs	r3, #1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	930b      	str	r3, [sp, #44]	; 0x2c
 80054dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80054de:	4bb2      	ldr	r3, [pc, #712]	; (80057a8 <_dtoa_r+0x334>)
 80054e0:	002a      	movs	r2, r5
 80054e2:	9318      	str	r3, [sp, #96]	; 0x60
 80054e4:	401a      	ands	r2, r3
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d117      	bne.n	800551a <_dtoa_r+0xa6>
 80054ea:	4bb0      	ldr	r3, [pc, #704]	; (80057ac <_dtoa_r+0x338>)
 80054ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054ee:	0328      	lsls	r0, r5, #12
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	9b02      	ldr	r3, [sp, #8]
 80054f4:	0b00      	lsrs	r0, r0, #12
 80054f6:	4318      	orrs	r0, r3
 80054f8:	d101      	bne.n	80054fe <_dtoa_r+0x8a>
 80054fa:	f000 fdc3 	bl	8006084 <_dtoa_r+0xc10>
 80054fe:	48ac      	ldr	r0, [pc, #688]	; (80057b0 <_dtoa_r+0x33c>)
 8005500:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005502:	9005      	str	r0, [sp, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <_dtoa_r+0x9a>
 8005508:	4baa      	ldr	r3, [pc, #680]	; (80057b4 <_dtoa_r+0x340>)
 800550a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	9805      	ldr	r0, [sp, #20]
 8005510:	b01d      	add	sp, #116	; 0x74
 8005512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005514:	2300      	movs	r3, #0
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	e7e0      	b.n	80054dc <_dtoa_r+0x68>
 800551a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800551e:	9312      	str	r3, [sp, #72]	; 0x48
 8005520:	9413      	str	r4, [sp, #76]	; 0x4c
 8005522:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005524:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005526:	2200      	movs	r2, #0
 8005528:	2300      	movs	r3, #0
 800552a:	f7fa ff8f 	bl	800044c <__aeabi_dcmpeq>
 800552e:	1e04      	subs	r4, r0, #0
 8005530:	d00b      	beq.n	800554a <_dtoa_r+0xd6>
 8005532:	2301      	movs	r3, #1
 8005534:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b9f      	ldr	r3, [pc, #636]	; (80057b8 <_dtoa_r+0x344>)
 800553a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800553c:	9305      	str	r3, [sp, #20]
 800553e:	2a00      	cmp	r2, #0
 8005540:	d0e5      	beq.n	800550e <_dtoa_r+0x9a>
 8005542:	4a9e      	ldr	r2, [pc, #632]	; (80057bc <_dtoa_r+0x348>)
 8005544:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005546:	600a      	str	r2, [r1, #0]
 8005548:	e7e1      	b.n	800550e <_dtoa_r+0x9a>
 800554a:	ab1a      	add	r3, sp, #104	; 0x68
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	0038      	movs	r0, r7
 8005554:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005558:	f001 f906 	bl	8006768 <__d2b>
 800555c:	006e      	lsls	r6, r5, #1
 800555e:	9004      	str	r0, [sp, #16]
 8005560:	0d76      	lsrs	r6, r6, #21
 8005562:	d100      	bne.n	8005566 <_dtoa_r+0xf2>
 8005564:	e07c      	b.n	8005660 <_dtoa_r+0x1ec>
 8005566:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005568:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800556a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800556c:	4a94      	ldr	r2, [pc, #592]	; (80057c0 <_dtoa_r+0x34c>)
 800556e:	031b      	lsls	r3, r3, #12
 8005570:	0b1b      	lsrs	r3, r3, #12
 8005572:	431a      	orrs	r2, r3
 8005574:	0011      	movs	r1, r2
 8005576:	4b93      	ldr	r3, [pc, #588]	; (80057c4 <_dtoa_r+0x350>)
 8005578:	9416      	str	r4, [sp, #88]	; 0x58
 800557a:	18f6      	adds	r6, r6, r3
 800557c:	2200      	movs	r2, #0
 800557e:	4b92      	ldr	r3, [pc, #584]	; (80057c8 <_dtoa_r+0x354>)
 8005580:	f7fc f96e 	bl	8001860 <__aeabi_dsub>
 8005584:	4a91      	ldr	r2, [pc, #580]	; (80057cc <_dtoa_r+0x358>)
 8005586:	4b92      	ldr	r3, [pc, #584]	; (80057d0 <_dtoa_r+0x35c>)
 8005588:	f7fb fefe 	bl	8001388 <__aeabi_dmul>
 800558c:	4a91      	ldr	r2, [pc, #580]	; (80057d4 <_dtoa_r+0x360>)
 800558e:	4b92      	ldr	r3, [pc, #584]	; (80057d8 <_dtoa_r+0x364>)
 8005590:	f7fa ff8a 	bl	80004a8 <__aeabi_dadd>
 8005594:	0004      	movs	r4, r0
 8005596:	0030      	movs	r0, r6
 8005598:	000d      	movs	r5, r1
 800559a:	f7fc fd47 	bl	800202c <__aeabi_i2d>
 800559e:	4a8f      	ldr	r2, [pc, #572]	; (80057dc <_dtoa_r+0x368>)
 80055a0:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <_dtoa_r+0x36c>)
 80055a2:	f7fb fef1 	bl	8001388 <__aeabi_dmul>
 80055a6:	0002      	movs	r2, r0
 80055a8:	000b      	movs	r3, r1
 80055aa:	0020      	movs	r0, r4
 80055ac:	0029      	movs	r1, r5
 80055ae:	f7fa ff7b 	bl	80004a8 <__aeabi_dadd>
 80055b2:	0004      	movs	r4, r0
 80055b4:	000d      	movs	r5, r1
 80055b6:	f7fc fd03 	bl	8001fc0 <__aeabi_d2iz>
 80055ba:	2200      	movs	r2, #0
 80055bc:	9002      	str	r0, [sp, #8]
 80055be:	2300      	movs	r3, #0
 80055c0:	0020      	movs	r0, r4
 80055c2:	0029      	movs	r1, r5
 80055c4:	f7fa ff48 	bl	8000458 <__aeabi_dcmplt>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d00b      	beq.n	80055e4 <_dtoa_r+0x170>
 80055cc:	9802      	ldr	r0, [sp, #8]
 80055ce:	f7fc fd2d 	bl	800202c <__aeabi_i2d>
 80055d2:	002b      	movs	r3, r5
 80055d4:	0022      	movs	r2, r4
 80055d6:	f7fa ff39 	bl	800044c <__aeabi_dcmpeq>
 80055da:	4243      	negs	r3, r0
 80055dc:	4158      	adcs	r0, r3
 80055de:	9b02      	ldr	r3, [sp, #8]
 80055e0:	1a1b      	subs	r3, r3, r0
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	2301      	movs	r3, #1
 80055e6:	9315      	str	r3, [sp, #84]	; 0x54
 80055e8:	9b02      	ldr	r3, [sp, #8]
 80055ea:	2b16      	cmp	r3, #22
 80055ec:	d80f      	bhi.n	800560e <_dtoa_r+0x19a>
 80055ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80055f0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80055f2:	00da      	lsls	r2, r3, #3
 80055f4:	4b7b      	ldr	r3, [pc, #492]	; (80057e4 <_dtoa_r+0x370>)
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f7fa ff2c 	bl	8000458 <__aeabi_dcmplt>
 8005600:	2800      	cmp	r0, #0
 8005602:	d049      	beq.n	8005698 <_dtoa_r+0x224>
 8005604:	9b02      	ldr	r3, [sp, #8]
 8005606:	3b01      	subs	r3, #1
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	2300      	movs	r3, #0
 800560c:	9315      	str	r3, [sp, #84]	; 0x54
 800560e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005610:	1b9e      	subs	r6, r3, r6
 8005612:	2300      	movs	r3, #0
 8005614:	9308      	str	r3, [sp, #32]
 8005616:	0033      	movs	r3, r6
 8005618:	3b01      	subs	r3, #1
 800561a:	930d      	str	r3, [sp, #52]	; 0x34
 800561c:	d504      	bpl.n	8005628 <_dtoa_r+0x1b4>
 800561e:	2301      	movs	r3, #1
 8005620:	1b9b      	subs	r3, r3, r6
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	2300      	movs	r3, #0
 8005626:	930d      	str	r3, [sp, #52]	; 0x34
 8005628:	9b02      	ldr	r3, [sp, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	db36      	blt.n	800569c <_dtoa_r+0x228>
 800562e:	9a02      	ldr	r2, [sp, #8]
 8005630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005632:	4694      	mov	ip, r2
 8005634:	4463      	add	r3, ip
 8005636:	930d      	str	r3, [sp, #52]	; 0x34
 8005638:	2300      	movs	r3, #0
 800563a:	9214      	str	r2, [sp, #80]	; 0x50
 800563c:	930e      	str	r3, [sp, #56]	; 0x38
 800563e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005640:	2401      	movs	r4, #1
 8005642:	2b09      	cmp	r3, #9
 8005644:	d862      	bhi.n	800570c <_dtoa_r+0x298>
 8005646:	2b05      	cmp	r3, #5
 8005648:	dd02      	ble.n	8005650 <_dtoa_r+0x1dc>
 800564a:	2400      	movs	r4, #0
 800564c:	3b04      	subs	r3, #4
 800564e:	9322      	str	r3, [sp, #136]	; 0x88
 8005650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005652:	1e98      	subs	r0, r3, #2
 8005654:	2803      	cmp	r0, #3
 8005656:	d862      	bhi.n	800571e <_dtoa_r+0x2aa>
 8005658:	f7fa fd5e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800565c:	56343629 	.word	0x56343629
 8005660:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005662:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005664:	189e      	adds	r6, r3, r2
 8005666:	4b60      	ldr	r3, [pc, #384]	; (80057e8 <_dtoa_r+0x374>)
 8005668:	18f2      	adds	r2, r6, r3
 800566a:	2a20      	cmp	r2, #32
 800566c:	dd0f      	ble.n	800568e <_dtoa_r+0x21a>
 800566e:	2340      	movs	r3, #64	; 0x40
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	409d      	lsls	r5, r3
 8005674:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <_dtoa_r+0x378>)
 8005676:	9802      	ldr	r0, [sp, #8]
 8005678:	18f3      	adds	r3, r6, r3
 800567a:	40d8      	lsrs	r0, r3
 800567c:	4328      	orrs	r0, r5
 800567e:	f7fc fd05 	bl	800208c <__aeabi_ui2d>
 8005682:	2301      	movs	r3, #1
 8005684:	4c5a      	ldr	r4, [pc, #360]	; (80057f0 <_dtoa_r+0x37c>)
 8005686:	3e01      	subs	r6, #1
 8005688:	1909      	adds	r1, r1, r4
 800568a:	9316      	str	r3, [sp, #88]	; 0x58
 800568c:	e776      	b.n	800557c <_dtoa_r+0x108>
 800568e:	2320      	movs	r3, #32
 8005690:	9802      	ldr	r0, [sp, #8]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	4098      	lsls	r0, r3
 8005696:	e7f2      	b.n	800567e <_dtoa_r+0x20a>
 8005698:	9015      	str	r0, [sp, #84]	; 0x54
 800569a:	e7b8      	b.n	800560e <_dtoa_r+0x19a>
 800569c:	9b08      	ldr	r3, [sp, #32]
 800569e:	9a02      	ldr	r2, [sp, #8]
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	9308      	str	r3, [sp, #32]
 80056a4:	4253      	negs	r3, r2
 80056a6:	930e      	str	r3, [sp, #56]	; 0x38
 80056a8:	2300      	movs	r3, #0
 80056aa:	9314      	str	r3, [sp, #80]	; 0x50
 80056ac:	e7c7      	b.n	800563e <_dtoa_r+0x1ca>
 80056ae:	2300      	movs	r3, #0
 80056b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80056b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc36      	bgt.n	8005726 <_dtoa_r+0x2b2>
 80056b8:	2301      	movs	r3, #1
 80056ba:	001a      	movs	r2, r3
 80056bc:	930c      	str	r3, [sp, #48]	; 0x30
 80056be:	9306      	str	r3, [sp, #24]
 80056c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80056c2:	e00d      	b.n	80056e0 <_dtoa_r+0x26c>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e7f3      	b.n	80056b0 <_dtoa_r+0x23c>
 80056c8:	2300      	movs	r3, #0
 80056ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80056cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80056ce:	4694      	mov	ip, r2
 80056d0:	9b02      	ldr	r3, [sp, #8]
 80056d2:	4463      	add	r3, ip
 80056d4:	930c      	str	r3, [sp, #48]	; 0x30
 80056d6:	3301      	adds	r3, #1
 80056d8:	9306      	str	r3, [sp, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc00      	bgt.n	80056e0 <_dtoa_r+0x26c>
 80056de:	2301      	movs	r3, #1
 80056e0:	2200      	movs	r2, #0
 80056e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e4:	6042      	str	r2, [r0, #4]
 80056e6:	3204      	adds	r2, #4
 80056e8:	0015      	movs	r5, r2
 80056ea:	3514      	adds	r5, #20
 80056ec:	6841      	ldr	r1, [r0, #4]
 80056ee:	429d      	cmp	r5, r3
 80056f0:	d91d      	bls.n	800572e <_dtoa_r+0x2ba>
 80056f2:	0038      	movs	r0, r7
 80056f4:	f000 fcfe 	bl	80060f4 <_Balloc>
 80056f8:	9005      	str	r0, [sp, #20]
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d11b      	bne.n	8005736 <_dtoa_r+0x2c2>
 80056fe:	21d5      	movs	r1, #213	; 0xd5
 8005700:	0002      	movs	r2, r0
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <_dtoa_r+0x380>)
 8005704:	0049      	lsls	r1, r1, #1
 8005706:	e6ca      	b.n	800549e <_dtoa_r+0x2a>
 8005708:	2301      	movs	r3, #1
 800570a:	e7de      	b.n	80056ca <_dtoa_r+0x256>
 800570c:	2300      	movs	r3, #0
 800570e:	940f      	str	r4, [sp, #60]	; 0x3c
 8005710:	9322      	str	r3, [sp, #136]	; 0x88
 8005712:	3b01      	subs	r3, #1
 8005714:	930c      	str	r3, [sp, #48]	; 0x30
 8005716:	9306      	str	r3, [sp, #24]
 8005718:	2200      	movs	r2, #0
 800571a:	3313      	adds	r3, #19
 800571c:	e7d0      	b.n	80056c0 <_dtoa_r+0x24c>
 800571e:	2301      	movs	r3, #1
 8005720:	930f      	str	r3, [sp, #60]	; 0x3c
 8005722:	3b02      	subs	r3, #2
 8005724:	e7f6      	b.n	8005714 <_dtoa_r+0x2a0>
 8005726:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005728:	930c      	str	r3, [sp, #48]	; 0x30
 800572a:	9306      	str	r3, [sp, #24]
 800572c:	e7d8      	b.n	80056e0 <_dtoa_r+0x26c>
 800572e:	3101      	adds	r1, #1
 8005730:	6041      	str	r1, [r0, #4]
 8005732:	0052      	lsls	r2, r2, #1
 8005734:	e7d8      	b.n	80056e8 <_dtoa_r+0x274>
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	9a05      	ldr	r2, [sp, #20]
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	9b06      	ldr	r3, [sp, #24]
 800573e:	2b0e      	cmp	r3, #14
 8005740:	d900      	bls.n	8005744 <_dtoa_r+0x2d0>
 8005742:	e0eb      	b.n	800591c <_dtoa_r+0x4a8>
 8005744:	2c00      	cmp	r4, #0
 8005746:	d100      	bne.n	800574a <_dtoa_r+0x2d6>
 8005748:	e0e8      	b.n	800591c <_dtoa_r+0x4a8>
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd68      	ble.n	8005822 <_dtoa_r+0x3ae>
 8005750:	001a      	movs	r2, r3
 8005752:	210f      	movs	r1, #15
 8005754:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <_dtoa_r+0x370>)
 8005756:	400a      	ands	r2, r1
 8005758:	00d2      	lsls	r2, r2, #3
 800575a:	189b      	adds	r3, r3, r2
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	685e      	ldr	r6, [r3, #4]
 8005760:	9b02      	ldr	r3, [sp, #8]
 8005762:	111c      	asrs	r4, r3, #4
 8005764:	2302      	movs	r3, #2
 8005766:	9310      	str	r3, [sp, #64]	; 0x40
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	05db      	lsls	r3, r3, #23
 800576c:	d50b      	bpl.n	8005786 <_dtoa_r+0x312>
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <_dtoa_r+0x384>)
 8005770:	400c      	ands	r4, r1
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005778:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800577a:	f7fb f9ff 	bl	8000b7c <__aeabi_ddiv>
 800577e:	2303      	movs	r3, #3
 8005780:	900a      	str	r0, [sp, #40]	; 0x28
 8005782:	910b      	str	r1, [sp, #44]	; 0x2c
 8005784:	9310      	str	r3, [sp, #64]	; 0x40
 8005786:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <_dtoa_r+0x384>)
 8005788:	9307      	str	r3, [sp, #28]
 800578a:	2c00      	cmp	r4, #0
 800578c:	d136      	bne.n	80057fc <_dtoa_r+0x388>
 800578e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005792:	002a      	movs	r2, r5
 8005794:	0033      	movs	r3, r6
 8005796:	f7fb f9f1 	bl	8000b7c <__aeabi_ddiv>
 800579a:	900a      	str	r0, [sp, #40]	; 0x28
 800579c:	910b      	str	r1, [sp, #44]	; 0x2c
 800579e:	e05c      	b.n	800585a <_dtoa_r+0x3e6>
 80057a0:	08007a01 	.word	0x08007a01
 80057a4:	08007a18 	.word	0x08007a18
 80057a8:	7ff00000 	.word	0x7ff00000
 80057ac:	0000270f 	.word	0x0000270f
 80057b0:	080079fd 	.word	0x080079fd
 80057b4:	08007a00 	.word	0x08007a00
 80057b8:	080079d0 	.word	0x080079d0
 80057bc:	080079d1 	.word	0x080079d1
 80057c0:	3ff00000 	.word	0x3ff00000
 80057c4:	fffffc01 	.word	0xfffffc01
 80057c8:	3ff80000 	.word	0x3ff80000
 80057cc:	636f4361 	.word	0x636f4361
 80057d0:	3fd287a7 	.word	0x3fd287a7
 80057d4:	8b60c8b3 	.word	0x8b60c8b3
 80057d8:	3fc68a28 	.word	0x3fc68a28
 80057dc:	509f79fb 	.word	0x509f79fb
 80057e0:	3fd34413 	.word	0x3fd34413
 80057e4:	08007b10 	.word	0x08007b10
 80057e8:	00000432 	.word	0x00000432
 80057ec:	00000412 	.word	0x00000412
 80057f0:	fe100000 	.word	0xfe100000
 80057f4:	08007a77 	.word	0x08007a77
 80057f8:	08007ae8 	.word	0x08007ae8
 80057fc:	2301      	movs	r3, #1
 80057fe:	421c      	tst	r4, r3
 8005800:	d00b      	beq.n	800581a <_dtoa_r+0x3a6>
 8005802:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005804:	0028      	movs	r0, r5
 8005806:	3301      	adds	r3, #1
 8005808:	9310      	str	r3, [sp, #64]	; 0x40
 800580a:	9b07      	ldr	r3, [sp, #28]
 800580c:	0031      	movs	r1, r6
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f7fb fdb9 	bl	8001388 <__aeabi_dmul>
 8005816:	0005      	movs	r5, r0
 8005818:	000e      	movs	r6, r1
 800581a:	9b07      	ldr	r3, [sp, #28]
 800581c:	1064      	asrs	r4, r4, #1
 800581e:	3308      	adds	r3, #8
 8005820:	e7b2      	b.n	8005788 <_dtoa_r+0x314>
 8005822:	2302      	movs	r3, #2
 8005824:	9310      	str	r3, [sp, #64]	; 0x40
 8005826:	9b02      	ldr	r3, [sp, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d016      	beq.n	800585a <_dtoa_r+0x3e6>
 800582c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800582e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005830:	425c      	negs	r4, r3
 8005832:	230f      	movs	r3, #15
 8005834:	4ab5      	ldr	r2, [pc, #724]	; (8005b0c <_dtoa_r+0x698>)
 8005836:	4023      	ands	r3, r4
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	18d3      	adds	r3, r2, r3
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f7fb fda2 	bl	8001388 <__aeabi_dmul>
 8005844:	2601      	movs	r6, #1
 8005846:	2300      	movs	r3, #0
 8005848:	900a      	str	r0, [sp, #40]	; 0x28
 800584a:	910b      	str	r1, [sp, #44]	; 0x2c
 800584c:	4db0      	ldr	r5, [pc, #704]	; (8005b10 <_dtoa_r+0x69c>)
 800584e:	1124      	asrs	r4, r4, #4
 8005850:	2c00      	cmp	r4, #0
 8005852:	d000      	beq.n	8005856 <_dtoa_r+0x3e2>
 8005854:	e094      	b.n	8005980 <_dtoa_r+0x50c>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d19f      	bne.n	800579a <_dtoa_r+0x326>
 800585a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d100      	bne.n	8005862 <_dtoa_r+0x3ee>
 8005860:	e09b      	b.n	800599a <_dtoa_r+0x526>
 8005862:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005864:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005866:	2200      	movs	r2, #0
 8005868:	0020      	movs	r0, r4
 800586a:	0029      	movs	r1, r5
 800586c:	4ba9      	ldr	r3, [pc, #676]	; (8005b14 <_dtoa_r+0x6a0>)
 800586e:	f7fa fdf3 	bl	8000458 <__aeabi_dcmplt>
 8005872:	2800      	cmp	r0, #0
 8005874:	d100      	bne.n	8005878 <_dtoa_r+0x404>
 8005876:	e090      	b.n	800599a <_dtoa_r+0x526>
 8005878:	9b06      	ldr	r3, [sp, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d100      	bne.n	8005880 <_dtoa_r+0x40c>
 800587e:	e08c      	b.n	800599a <_dtoa_r+0x526>
 8005880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	dd46      	ble.n	8005914 <_dtoa_r+0x4a0>
 8005886:	9b02      	ldr	r3, [sp, #8]
 8005888:	2200      	movs	r2, #0
 800588a:	0020      	movs	r0, r4
 800588c:	0029      	movs	r1, r5
 800588e:	1e5e      	subs	r6, r3, #1
 8005890:	4ba1      	ldr	r3, [pc, #644]	; (8005b18 <_dtoa_r+0x6a4>)
 8005892:	f7fb fd79 	bl	8001388 <__aeabi_dmul>
 8005896:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005898:	900a      	str	r0, [sp, #40]	; 0x28
 800589a:	910b      	str	r1, [sp, #44]	; 0x2c
 800589c:	3301      	adds	r3, #1
 800589e:	9310      	str	r3, [sp, #64]	; 0x40
 80058a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80058a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80058a8:	9307      	str	r3, [sp, #28]
 80058aa:	f7fc fbbf 	bl	800202c <__aeabi_i2d>
 80058ae:	0022      	movs	r2, r4
 80058b0:	002b      	movs	r3, r5
 80058b2:	f7fb fd69 	bl	8001388 <__aeabi_dmul>
 80058b6:	2200      	movs	r2, #0
 80058b8:	4b98      	ldr	r3, [pc, #608]	; (8005b1c <_dtoa_r+0x6a8>)
 80058ba:	f7fa fdf5 	bl	80004a8 <__aeabi_dadd>
 80058be:	9010      	str	r0, [sp, #64]	; 0x40
 80058c0:	9111      	str	r1, [sp, #68]	; 0x44
 80058c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058c6:	920a      	str	r2, [sp, #40]	; 0x28
 80058c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ca:	4a95      	ldr	r2, [pc, #596]	; (8005b20 <_dtoa_r+0x6ac>)
 80058cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ce:	4694      	mov	ip, r2
 80058d0:	4463      	add	r3, ip
 80058d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80058d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d161      	bne.n	80059a0 <_dtoa_r+0x52c>
 80058dc:	2200      	movs	r2, #0
 80058de:	0020      	movs	r0, r4
 80058e0:	0029      	movs	r1, r5
 80058e2:	4b90      	ldr	r3, [pc, #576]	; (8005b24 <_dtoa_r+0x6b0>)
 80058e4:	f7fb ffbc 	bl	8001860 <__aeabi_dsub>
 80058e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ec:	0004      	movs	r4, r0
 80058ee:	000d      	movs	r5, r1
 80058f0:	f7fa fdc6 	bl	8000480 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d000      	beq.n	80058fa <_dtoa_r+0x486>
 80058f8:	e2b5      	b.n	8005e66 <_dtoa_r+0x9f2>
 80058fa:	488b      	ldr	r0, [pc, #556]	; (8005b28 <_dtoa_r+0x6b4>)
 80058fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80058fe:	4684      	mov	ip, r0
 8005900:	4461      	add	r1, ip
 8005902:	000b      	movs	r3, r1
 8005904:	0020      	movs	r0, r4
 8005906:	0029      	movs	r1, r5
 8005908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800590a:	f7fa fda5 	bl	8000458 <__aeabi_dcmplt>
 800590e:	2800      	cmp	r0, #0
 8005910:	d000      	beq.n	8005914 <_dtoa_r+0x4a0>
 8005912:	e2a5      	b.n	8005e60 <_dtoa_r+0x9ec>
 8005914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005916:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005918:	930a      	str	r3, [sp, #40]	; 0x28
 800591a:	940b      	str	r4, [sp, #44]	; 0x2c
 800591c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800591e:	2b00      	cmp	r3, #0
 8005920:	da00      	bge.n	8005924 <_dtoa_r+0x4b0>
 8005922:	e171      	b.n	8005c08 <_dtoa_r+0x794>
 8005924:	9a02      	ldr	r2, [sp, #8]
 8005926:	2a0e      	cmp	r2, #14
 8005928:	dd00      	ble.n	800592c <_dtoa_r+0x4b8>
 800592a:	e16d      	b.n	8005c08 <_dtoa_r+0x794>
 800592c:	4b77      	ldr	r3, [pc, #476]	; (8005b0c <_dtoa_r+0x698>)
 800592e:	00d2      	lsls	r2, r2, #3
 8005930:	189b      	adds	r3, r3, r2
 8005932:	685c      	ldr	r4, [r3, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	9308      	str	r3, [sp, #32]
 8005938:	9409      	str	r4, [sp, #36]	; 0x24
 800593a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800593c:	2b00      	cmp	r3, #0
 800593e:	db00      	blt.n	8005942 <_dtoa_r+0x4ce>
 8005940:	e0f6      	b.n	8005b30 <_dtoa_r+0x6bc>
 8005942:	9b06      	ldr	r3, [sp, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dd00      	ble.n	800594a <_dtoa_r+0x4d6>
 8005948:	e0f2      	b.n	8005b30 <_dtoa_r+0x6bc>
 800594a:	d000      	beq.n	800594e <_dtoa_r+0x4da>
 800594c:	e288      	b.n	8005e60 <_dtoa_r+0x9ec>
 800594e:	9808      	ldr	r0, [sp, #32]
 8005950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005952:	2200      	movs	r2, #0
 8005954:	4b73      	ldr	r3, [pc, #460]	; (8005b24 <_dtoa_r+0x6b0>)
 8005956:	f7fb fd17 	bl	8001388 <__aeabi_dmul>
 800595a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595e:	f7fa fd99 	bl	8000494 <__aeabi_dcmpge>
 8005962:	9e06      	ldr	r6, [sp, #24]
 8005964:	0035      	movs	r5, r6
 8005966:	2800      	cmp	r0, #0
 8005968:	d000      	beq.n	800596c <_dtoa_r+0x4f8>
 800596a:	e25f      	b.n	8005e2c <_dtoa_r+0x9b8>
 800596c:	9b05      	ldr	r3, [sp, #20]
 800596e:	9a05      	ldr	r2, [sp, #20]
 8005970:	3301      	adds	r3, #1
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	2331      	movs	r3, #49	; 0x31
 8005976:	7013      	strb	r3, [r2, #0]
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	3301      	adds	r3, #1
 800597c:	9302      	str	r3, [sp, #8]
 800597e:	e25a      	b.n	8005e36 <_dtoa_r+0x9c2>
 8005980:	4234      	tst	r4, r6
 8005982:	d007      	beq.n	8005994 <_dtoa_r+0x520>
 8005984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005986:	3301      	adds	r3, #1
 8005988:	9310      	str	r3, [sp, #64]	; 0x40
 800598a:	682a      	ldr	r2, [r5, #0]
 800598c:	686b      	ldr	r3, [r5, #4]
 800598e:	f7fb fcfb 	bl	8001388 <__aeabi_dmul>
 8005992:	0033      	movs	r3, r6
 8005994:	1064      	asrs	r4, r4, #1
 8005996:	3508      	adds	r5, #8
 8005998:	e75a      	b.n	8005850 <_dtoa_r+0x3dc>
 800599a:	9e02      	ldr	r6, [sp, #8]
 800599c:	9b06      	ldr	r3, [sp, #24]
 800599e:	e780      	b.n	80058a2 <_dtoa_r+0x42e>
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	4b59      	ldr	r3, [pc, #356]	; (8005b0c <_dtoa_r+0x698>)
 80059a8:	00d2      	lsls	r2, r2, #3
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d051      	beq.n	8005a58 <_dtoa_r+0x5e4>
 80059b4:	2000      	movs	r0, #0
 80059b6:	495d      	ldr	r1, [pc, #372]	; (8005b2c <_dtoa_r+0x6b8>)
 80059b8:	f7fb f8e0 	bl	8000b7c <__aeabi_ddiv>
 80059bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c0:	f7fb ff4e 	bl	8001860 <__aeabi_dsub>
 80059c4:	9a05      	ldr	r2, [sp, #20]
 80059c6:	9b05      	ldr	r3, [sp, #20]
 80059c8:	4694      	mov	ip, r2
 80059ca:	9310      	str	r3, [sp, #64]	; 0x40
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	900a      	str	r0, [sp, #40]	; 0x28
 80059d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80059d2:	4463      	add	r3, ip
 80059d4:	9319      	str	r3, [sp, #100]	; 0x64
 80059d6:	0029      	movs	r1, r5
 80059d8:	0020      	movs	r0, r4
 80059da:	f7fc faf1 	bl	8001fc0 <__aeabi_d2iz>
 80059de:	9017      	str	r0, [sp, #92]	; 0x5c
 80059e0:	f7fc fb24 	bl	800202c <__aeabi_i2d>
 80059e4:	0002      	movs	r2, r0
 80059e6:	000b      	movs	r3, r1
 80059e8:	0020      	movs	r0, r4
 80059ea:	0029      	movs	r1, r5
 80059ec:	f7fb ff38 	bl	8001860 <__aeabi_dsub>
 80059f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059f4:	3301      	adds	r3, #1
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059fa:	0004      	movs	r4, r0
 80059fc:	3330      	adds	r3, #48	; 0x30
 80059fe:	7013      	strb	r3, [r2, #0]
 8005a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a04:	000d      	movs	r5, r1
 8005a06:	f7fa fd27 	bl	8000458 <__aeabi_dcmplt>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d175      	bne.n	8005afa <_dtoa_r+0x686>
 8005a0e:	0022      	movs	r2, r4
 8005a10:	002b      	movs	r3, r5
 8005a12:	2000      	movs	r0, #0
 8005a14:	493f      	ldr	r1, [pc, #252]	; (8005b14 <_dtoa_r+0x6a0>)
 8005a16:	f7fb ff23 	bl	8001860 <__aeabi_dsub>
 8005a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1e:	f7fa fd1b 	bl	8000458 <__aeabi_dcmplt>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d000      	beq.n	8005a28 <_dtoa_r+0x5b4>
 8005a26:	e0d1      	b.n	8005bcc <_dtoa_r+0x758>
 8005a28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a2a:	9a07      	ldr	r2, [sp, #28]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <_dtoa_r+0x5be>
 8005a30:	e770      	b.n	8005914 <_dtoa_r+0x4a0>
 8005a32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a36:	2200      	movs	r2, #0
 8005a38:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <_dtoa_r+0x6a4>)
 8005a3a:	f7fb fca5 	bl	8001388 <__aeabi_dmul>
 8005a3e:	4b36      	ldr	r3, [pc, #216]	; (8005b18 <_dtoa_r+0x6a4>)
 8005a40:	900a      	str	r0, [sp, #40]	; 0x28
 8005a42:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a44:	2200      	movs	r2, #0
 8005a46:	0020      	movs	r0, r4
 8005a48:	0029      	movs	r1, r5
 8005a4a:	f7fb fc9d 	bl	8001388 <__aeabi_dmul>
 8005a4e:	9b07      	ldr	r3, [sp, #28]
 8005a50:	0004      	movs	r4, r0
 8005a52:	000d      	movs	r5, r1
 8005a54:	9310      	str	r3, [sp, #64]	; 0x40
 8005a56:	e7be      	b.n	80059d6 <_dtoa_r+0x562>
 8005a58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a5c:	f7fb fc94 	bl	8001388 <__aeabi_dmul>
 8005a60:	9a05      	ldr	r2, [sp, #20]
 8005a62:	9b05      	ldr	r3, [sp, #20]
 8005a64:	4694      	mov	ip, r2
 8005a66:	930a      	str	r3, [sp, #40]	; 0x28
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	9010      	str	r0, [sp, #64]	; 0x40
 8005a6c:	9111      	str	r1, [sp, #68]	; 0x44
 8005a6e:	4463      	add	r3, ip
 8005a70:	9319      	str	r3, [sp, #100]	; 0x64
 8005a72:	0029      	movs	r1, r5
 8005a74:	0020      	movs	r0, r4
 8005a76:	f7fc faa3 	bl	8001fc0 <__aeabi_d2iz>
 8005a7a:	9017      	str	r0, [sp, #92]	; 0x5c
 8005a7c:	f7fc fad6 	bl	800202c <__aeabi_i2d>
 8005a80:	0002      	movs	r2, r0
 8005a82:	000b      	movs	r3, r1
 8005a84:	0020      	movs	r0, r4
 8005a86:	0029      	movs	r1, r5
 8005a88:	f7fb feea 	bl	8001860 <__aeabi_dsub>
 8005a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a90:	3330      	adds	r3, #48	; 0x30
 8005a92:	7013      	strb	r3, [r2, #0]
 8005a94:	0013      	movs	r3, r2
 8005a96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a98:	3301      	adds	r3, #1
 8005a9a:	0004      	movs	r4, r0
 8005a9c:	000d      	movs	r5, r1
 8005a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d12c      	bne.n	8005afe <_dtoa_r+0x68a>
 8005aa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005aa6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005aa8:	9a05      	ldr	r2, [sp, #20]
 8005aaa:	9b07      	ldr	r3, [sp, #28]
 8005aac:	4694      	mov	ip, r2
 8005aae:	4463      	add	r3, ip
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <_dtoa_r+0x6b8>)
 8005ab6:	f7fa fcf7 	bl	80004a8 <__aeabi_dadd>
 8005aba:	0002      	movs	r2, r0
 8005abc:	000b      	movs	r3, r1
 8005abe:	0020      	movs	r0, r4
 8005ac0:	0029      	movs	r1, r5
 8005ac2:	f7fa fcdd 	bl	8000480 <__aeabi_dcmpgt>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d000      	beq.n	8005acc <_dtoa_r+0x658>
 8005aca:	e07f      	b.n	8005bcc <_dtoa_r+0x758>
 8005acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	4916      	ldr	r1, [pc, #88]	; (8005b2c <_dtoa_r+0x6b8>)
 8005ad4:	f7fb fec4 	bl	8001860 <__aeabi_dsub>
 8005ad8:	0002      	movs	r2, r0
 8005ada:	000b      	movs	r3, r1
 8005adc:	0020      	movs	r0, r4
 8005ade:	0029      	movs	r1, r5
 8005ae0:	f7fa fcba 	bl	8000458 <__aeabi_dcmplt>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d100      	bne.n	8005aea <_dtoa_r+0x676>
 8005ae8:	e714      	b.n	8005914 <_dtoa_r+0x4a0>
 8005aea:	9b07      	ldr	r3, [sp, #28]
 8005aec:	001a      	movs	r2, r3
 8005aee:	3a01      	subs	r2, #1
 8005af0:	9207      	str	r2, [sp, #28]
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	2a30      	cmp	r2, #48	; 0x30
 8005af6:	d0f8      	beq.n	8005aea <_dtoa_r+0x676>
 8005af8:	9307      	str	r3, [sp, #28]
 8005afa:	9602      	str	r6, [sp, #8]
 8005afc:	e054      	b.n	8005ba8 <_dtoa_r+0x734>
 8005afe:	2200      	movs	r2, #0
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <_dtoa_r+0x6a4>)
 8005b02:	f7fb fc41 	bl	8001388 <__aeabi_dmul>
 8005b06:	0004      	movs	r4, r0
 8005b08:	000d      	movs	r5, r1
 8005b0a:	e7b2      	b.n	8005a72 <_dtoa_r+0x5fe>
 8005b0c:	08007b10 	.word	0x08007b10
 8005b10:	08007ae8 	.word	0x08007ae8
 8005b14:	3ff00000 	.word	0x3ff00000
 8005b18:	40240000 	.word	0x40240000
 8005b1c:	401c0000 	.word	0x401c0000
 8005b20:	fcc00000 	.word	0xfcc00000
 8005b24:	40140000 	.word	0x40140000
 8005b28:	7cc00000 	.word	0x7cc00000
 8005b2c:	3fe00000 	.word	0x3fe00000
 8005b30:	9b06      	ldr	r3, [sp, #24]
 8005b32:	9e05      	ldr	r6, [sp, #20]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	199b      	adds	r3, r3, r6
 8005b38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b3e:	9a08      	ldr	r2, [sp, #32]
 8005b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b42:	0020      	movs	r0, r4
 8005b44:	0029      	movs	r1, r5
 8005b46:	f7fb f819 	bl	8000b7c <__aeabi_ddiv>
 8005b4a:	f7fc fa39 	bl	8001fc0 <__aeabi_d2iz>
 8005b4e:	9006      	str	r0, [sp, #24]
 8005b50:	f7fc fa6c 	bl	800202c <__aeabi_i2d>
 8005b54:	9a08      	ldr	r2, [sp, #32]
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	f7fb fc16 	bl	8001388 <__aeabi_dmul>
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	000b      	movs	r3, r1
 8005b60:	0020      	movs	r0, r4
 8005b62:	0029      	movs	r1, r5
 8005b64:	f7fb fe7c 	bl	8001860 <__aeabi_dsub>
 8005b68:	0033      	movs	r3, r6
 8005b6a:	9a06      	ldr	r2, [sp, #24]
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	3230      	adds	r2, #48	; 0x30
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b74:	9607      	str	r6, [sp, #28]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d139      	bne.n	8005bee <_dtoa_r+0x77a>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	000b      	movs	r3, r1
 8005b7e:	f7fa fc93 	bl	80004a8 <__aeabi_dadd>
 8005b82:	9a08      	ldr	r2, [sp, #32]
 8005b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b86:	0004      	movs	r4, r0
 8005b88:	000d      	movs	r5, r1
 8005b8a:	f7fa fc79 	bl	8000480 <__aeabi_dcmpgt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d11b      	bne.n	8005bca <_dtoa_r+0x756>
 8005b92:	9a08      	ldr	r2, [sp, #32]
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	0020      	movs	r0, r4
 8005b98:	0029      	movs	r1, r5
 8005b9a:	f7fa fc57 	bl	800044c <__aeabi_dcmpeq>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d002      	beq.n	8005ba8 <_dtoa_r+0x734>
 8005ba2:	9b06      	ldr	r3, [sp, #24]
 8005ba4:	07db      	lsls	r3, r3, #31
 8005ba6:	d410      	bmi.n	8005bca <_dtoa_r+0x756>
 8005ba8:	0038      	movs	r0, r7
 8005baa:	9904      	ldr	r1, [sp, #16]
 8005bac:	f000 fae6 	bl	800617c <_Bfree>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9a07      	ldr	r2, [sp, #28]
 8005bb4:	9802      	ldr	r0, [sp, #8]
 8005bb6:	7013      	strb	r3, [r2, #0]
 8005bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005bba:	3001      	adds	r0, #1
 8005bbc:	6018      	str	r0, [r3, #0]
 8005bbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d100      	bne.n	8005bc6 <_dtoa_r+0x752>
 8005bc4:	e4a3      	b.n	800550e <_dtoa_r+0x9a>
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e4a1      	b.n	800550e <_dtoa_r+0x9a>
 8005bca:	9e02      	ldr	r6, [sp, #8]
 8005bcc:	9b07      	ldr	r3, [sp, #28]
 8005bce:	9307      	str	r3, [sp, #28]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	2a39      	cmp	r2, #57	; 0x39
 8005bd6:	d106      	bne.n	8005be6 <_dtoa_r+0x772>
 8005bd8:	9a05      	ldr	r2, [sp, #20]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1f7      	bne.n	8005bce <_dtoa_r+0x75a>
 8005bde:	2230      	movs	r2, #48	; 0x30
 8005be0:	9905      	ldr	r1, [sp, #20]
 8005be2:	3601      	adds	r6, #1
 8005be4:	700a      	strb	r2, [r1, #0]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	3201      	adds	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	e785      	b.n	8005afa <_dtoa_r+0x686>
 8005bee:	2200      	movs	r2, #0
 8005bf0:	4bad      	ldr	r3, [pc, #692]	; (8005ea8 <_dtoa_r+0xa34>)
 8005bf2:	f7fb fbc9 	bl	8001388 <__aeabi_dmul>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	0004      	movs	r4, r0
 8005bfc:	000d      	movs	r5, r1
 8005bfe:	f7fa fc25 	bl	800044c <__aeabi_dcmpeq>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d09b      	beq.n	8005b3e <_dtoa_r+0x6ca>
 8005c06:	e7cf      	b.n	8005ba8 <_dtoa_r+0x734>
 8005c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c0a:	2a00      	cmp	r2, #0
 8005c0c:	d100      	bne.n	8005c10 <_dtoa_r+0x79c>
 8005c0e:	e082      	b.n	8005d16 <_dtoa_r+0x8a2>
 8005c10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c12:	2a01      	cmp	r2, #1
 8005c14:	dc66      	bgt.n	8005ce4 <_dtoa_r+0x870>
 8005c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d05f      	beq.n	8005cdc <_dtoa_r+0x868>
 8005c1c:	4aa3      	ldr	r2, [pc, #652]	; (8005eac <_dtoa_r+0xa38>)
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005c22:	9c08      	ldr	r4, [sp, #32]
 8005c24:	9a08      	ldr	r2, [sp, #32]
 8005c26:	2101      	movs	r1, #1
 8005c28:	18d2      	adds	r2, r2, r3
 8005c2a:	9208      	str	r2, [sp, #32]
 8005c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c2e:	0038      	movs	r0, r7
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	930d      	str	r3, [sp, #52]	; 0x34
 8005c34:	f000 fb52 	bl	80062dc <__i2b>
 8005c38:	0005      	movs	r5, r0
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	dd0e      	ble.n	8005c5c <_dtoa_r+0x7e8>
 8005c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dd0b      	ble.n	8005c5c <_dtoa_r+0x7e8>
 8005c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c46:	0023      	movs	r3, r4
 8005c48:	4294      	cmp	r4, r2
 8005c4a:	dd00      	ble.n	8005c4e <_dtoa_r+0x7da>
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	9a08      	ldr	r2, [sp, #32]
 8005c50:	1ae4      	subs	r4, r4, r3
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	9208      	str	r2, [sp, #32]
 8005c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01f      	beq.n	8005ca2 <_dtoa_r+0x82e>
 8005c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d05a      	beq.n	8005d1e <_dtoa_r+0x8aa>
 8005c68:	2e00      	cmp	r6, #0
 8005c6a:	dd11      	ble.n	8005c90 <_dtoa_r+0x81c>
 8005c6c:	0029      	movs	r1, r5
 8005c6e:	0032      	movs	r2, r6
 8005c70:	0038      	movs	r0, r7
 8005c72:	f000 fbf9 	bl	8006468 <__pow5mult>
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	0001      	movs	r1, r0
 8005c7a:	0005      	movs	r5, r0
 8005c7c:	0038      	movs	r0, r7
 8005c7e:	f000 fb43 	bl	8006308 <__multiply>
 8005c82:	9904      	ldr	r1, [sp, #16]
 8005c84:	9007      	str	r0, [sp, #28]
 8005c86:	0038      	movs	r0, r7
 8005c88:	f000 fa78 	bl	800617c <_Bfree>
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c92:	1b9a      	subs	r2, r3, r6
 8005c94:	42b3      	cmp	r3, r6
 8005c96:	d004      	beq.n	8005ca2 <_dtoa_r+0x82e>
 8005c98:	0038      	movs	r0, r7
 8005c9a:	9904      	ldr	r1, [sp, #16]
 8005c9c:	f000 fbe4 	bl	8006468 <__pow5mult>
 8005ca0:	9004      	str	r0, [sp, #16]
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	0038      	movs	r0, r7
 8005ca6:	f000 fb19 	bl	80062dc <__i2b>
 8005caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cac:	0006      	movs	r6, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd37      	ble.n	8005d22 <_dtoa_r+0x8ae>
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	0001      	movs	r1, r0
 8005cb6:	0038      	movs	r0, r7
 8005cb8:	f000 fbd6 	bl	8006468 <__pow5mult>
 8005cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cbe:	0006      	movs	r6, r0
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	dd33      	ble.n	8005d2c <_dtoa_r+0x8b8>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	6933      	ldr	r3, [r6, #16]
 8005cca:	3303      	adds	r3, #3
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	18f3      	adds	r3, r6, r3
 8005cd0:	6858      	ldr	r0, [r3, #4]
 8005cd2:	f000 fabb 	bl	800624c <__hi0bits>
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	1a18      	subs	r0, r3, r0
 8005cda:	e03f      	b.n	8005d5c <_dtoa_r+0x8e8>
 8005cdc:	2336      	movs	r3, #54	; 0x36
 8005cde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	e79d      	b.n	8005c20 <_dtoa_r+0x7ac>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	1e5e      	subs	r6, r3, #1
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cea:	42b3      	cmp	r3, r6
 8005cec:	db08      	blt.n	8005d00 <_dtoa_r+0x88c>
 8005cee:	1b9e      	subs	r6, r3, r6
 8005cf0:	9b06      	ldr	r3, [sp, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da0c      	bge.n	8005d10 <_dtoa_r+0x89c>
 8005cf6:	9b08      	ldr	r3, [sp, #32]
 8005cf8:	9a06      	ldr	r2, [sp, #24]
 8005cfa:	1a9c      	subs	r4, r3, r2
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e791      	b.n	8005c24 <_dtoa_r+0x7b0>
 8005d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d04:	1af3      	subs	r3, r6, r3
 8005d06:	18d3      	adds	r3, r2, r3
 8005d08:	960e      	str	r6, [sp, #56]	; 0x38
 8005d0a:	9314      	str	r3, [sp, #80]	; 0x50
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	e7ef      	b.n	8005cf0 <_dtoa_r+0x87c>
 8005d10:	9c08      	ldr	r4, [sp, #32]
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	e786      	b.n	8005c24 <_dtoa_r+0x7b0>
 8005d16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005d18:	9c08      	ldr	r4, [sp, #32]
 8005d1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005d1c:	e78d      	b.n	8005c3a <_dtoa_r+0x7c6>
 8005d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d20:	e7ba      	b.n	8005c98 <_dtoa_r+0x824>
 8005d22:	2300      	movs	r3, #0
 8005d24:	9307      	str	r3, [sp, #28]
 8005d26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	dc13      	bgt.n	8005d54 <_dtoa_r+0x8e0>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10e      	bne.n	8005d54 <_dtoa_r+0x8e0>
 8005d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	d10b      	bne.n	8005d54 <_dtoa_r+0x8e0>
 8005d3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d40:	4213      	tst	r3, r2
 8005d42:	d007      	beq.n	8005d54 <_dtoa_r+0x8e0>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	3301      	adds	r3, #1
 8005d48:	9308      	str	r3, [sp, #32]
 8005d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d50:	2301      	movs	r3, #1
 8005d52:	9307      	str	r3, [sp, #28]
 8005d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d56:	2001      	movs	r0, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1b5      	bne.n	8005cc8 <_dtoa_r+0x854>
 8005d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d5e:	221f      	movs	r2, #31
 8005d60:	1818      	adds	r0, r3, r0
 8005d62:	0003      	movs	r3, r0
 8005d64:	4013      	ands	r3, r2
 8005d66:	4210      	tst	r0, r2
 8005d68:	d046      	beq.n	8005df8 <_dtoa_r+0x984>
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	2a04      	cmp	r2, #4
 8005d70:	dd3f      	ble.n	8005df2 <_dtoa_r+0x97e>
 8005d72:	221c      	movs	r2, #28
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	9a08      	ldr	r2, [sp, #32]
 8005d78:	18e4      	adds	r4, r4, r3
 8005d7a:	18d2      	adds	r2, r2, r3
 8005d7c:	9208      	str	r2, [sp, #32]
 8005d7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d80:	18d3      	adds	r3, r2, r3
 8005d82:	930d      	str	r3, [sp, #52]	; 0x34
 8005d84:	9b08      	ldr	r3, [sp, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dd05      	ble.n	8005d96 <_dtoa_r+0x922>
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	0038      	movs	r0, r7
 8005d8e:	9904      	ldr	r1, [sp, #16]
 8005d90:	f000 fbc6 	bl	8006520 <__lshift>
 8005d94:	9004      	str	r0, [sp, #16]
 8005d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	dd05      	ble.n	8005da8 <_dtoa_r+0x934>
 8005d9c:	0031      	movs	r1, r6
 8005d9e:	001a      	movs	r2, r3
 8005da0:	0038      	movs	r0, r7
 8005da2:	f000 fbbd 	bl	8006520 <__lshift>
 8005da6:	0006      	movs	r6, r0
 8005da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d026      	beq.n	8005dfc <_dtoa_r+0x988>
 8005dae:	0031      	movs	r1, r6
 8005db0:	9804      	ldr	r0, [sp, #16]
 8005db2:	f000 fc25 	bl	8006600 <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	da20      	bge.n	8005dfc <_dtoa_r+0x988>
 8005dba:	9b02      	ldr	r3, [sp, #8]
 8005dbc:	220a      	movs	r2, #10
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	9302      	str	r3, [sp, #8]
 8005dc2:	0038      	movs	r0, r7
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9904      	ldr	r1, [sp, #16]
 8005dc8:	f000 f9fc 	bl	80061c4 <__multadd>
 8005dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dce:	9004      	str	r0, [sp, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d100      	bne.n	8005dd6 <_dtoa_r+0x962>
 8005dd4:	e160      	b.n	8006098 <_dtoa_r+0xc24>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	0029      	movs	r1, r5
 8005dda:	220a      	movs	r2, #10
 8005ddc:	0038      	movs	r0, r7
 8005dde:	f000 f9f1 	bl	80061c4 <__multadd>
 8005de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de4:	0005      	movs	r5, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	dc47      	bgt.n	8005e7a <_dtoa_r+0xa06>
 8005dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	dc0d      	bgt.n	8005e0c <_dtoa_r+0x998>
 8005df0:	e043      	b.n	8005e7a <_dtoa_r+0xa06>
 8005df2:	2a04      	cmp	r2, #4
 8005df4:	d0c6      	beq.n	8005d84 <_dtoa_r+0x910>
 8005df6:	0013      	movs	r3, r2
 8005df8:	331c      	adds	r3, #28
 8005dfa:	e7bc      	b.n	8005d76 <_dtoa_r+0x902>
 8005dfc:	9b06      	ldr	r3, [sp, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	dc35      	bgt.n	8005e6e <_dtoa_r+0x9fa>
 8005e02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	dd32      	ble.n	8005e6e <_dtoa_r+0x9fa>
 8005e08:	9b06      	ldr	r3, [sp, #24]
 8005e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10c      	bne.n	8005e2c <_dtoa_r+0x9b8>
 8005e12:	0031      	movs	r1, r6
 8005e14:	2205      	movs	r2, #5
 8005e16:	0038      	movs	r0, r7
 8005e18:	f000 f9d4 	bl	80061c4 <__multadd>
 8005e1c:	0006      	movs	r6, r0
 8005e1e:	0001      	movs	r1, r0
 8005e20:	9804      	ldr	r0, [sp, #16]
 8005e22:	f000 fbed 	bl	8006600 <__mcmp>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	dd00      	ble.n	8005e2c <_dtoa_r+0x9b8>
 8005e2a:	e59f      	b.n	800596c <_dtoa_r+0x4f8>
 8005e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	9302      	str	r3, [sp, #8]
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	9307      	str	r3, [sp, #28]
 8005e36:	2400      	movs	r4, #0
 8005e38:	0031      	movs	r1, r6
 8005e3a:	0038      	movs	r0, r7
 8005e3c:	f000 f99e 	bl	800617c <_Bfree>
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	d100      	bne.n	8005e46 <_dtoa_r+0x9d2>
 8005e44:	e6b0      	b.n	8005ba8 <_dtoa_r+0x734>
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	d005      	beq.n	8005e56 <_dtoa_r+0x9e2>
 8005e4a:	42ac      	cmp	r4, r5
 8005e4c:	d003      	beq.n	8005e56 <_dtoa_r+0x9e2>
 8005e4e:	0021      	movs	r1, r4
 8005e50:	0038      	movs	r0, r7
 8005e52:	f000 f993 	bl	800617c <_Bfree>
 8005e56:	0029      	movs	r1, r5
 8005e58:	0038      	movs	r0, r7
 8005e5a:	f000 f98f 	bl	800617c <_Bfree>
 8005e5e:	e6a3      	b.n	8005ba8 <_dtoa_r+0x734>
 8005e60:	2600      	movs	r6, #0
 8005e62:	0035      	movs	r5, r6
 8005e64:	e7e2      	b.n	8005e2c <_dtoa_r+0x9b8>
 8005e66:	9602      	str	r6, [sp, #8]
 8005e68:	9e07      	ldr	r6, [sp, #28]
 8005e6a:	0035      	movs	r5, r6
 8005e6c:	e57e      	b.n	800596c <_dtoa_r+0x4f8>
 8005e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d100      	bne.n	8005e76 <_dtoa_r+0xa02>
 8005e74:	e0c8      	b.n	8006008 <_dtoa_r+0xb94>
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	930c      	str	r3, [sp, #48]	; 0x30
 8005e7a:	2c00      	cmp	r4, #0
 8005e7c:	dd05      	ble.n	8005e8a <_dtoa_r+0xa16>
 8005e7e:	0029      	movs	r1, r5
 8005e80:	0022      	movs	r2, r4
 8005e82:	0038      	movs	r0, r7
 8005e84:	f000 fb4c 	bl	8006520 <__lshift>
 8005e88:	0005      	movs	r5, r0
 8005e8a:	9b07      	ldr	r3, [sp, #28]
 8005e8c:	0028      	movs	r0, r5
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01f      	beq.n	8005ed2 <_dtoa_r+0xa5e>
 8005e92:	0038      	movs	r0, r7
 8005e94:	6869      	ldr	r1, [r5, #4]
 8005e96:	f000 f92d 	bl	80060f4 <_Balloc>
 8005e9a:	1e04      	subs	r4, r0, #0
 8005e9c:	d10c      	bne.n	8005eb8 <_dtoa_r+0xa44>
 8005e9e:	0002      	movs	r2, r0
 8005ea0:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <_dtoa_r+0xa3c>)
 8005ea2:	4904      	ldr	r1, [pc, #16]	; (8005eb4 <_dtoa_r+0xa40>)
 8005ea4:	f7ff fafb 	bl	800549e <_dtoa_r+0x2a>
 8005ea8:	40240000 	.word	0x40240000
 8005eac:	00000433 	.word	0x00000433
 8005eb0:	08007a77 	.word	0x08007a77
 8005eb4:	000002ea 	.word	0x000002ea
 8005eb8:	0029      	movs	r1, r5
 8005eba:	692b      	ldr	r3, [r5, #16]
 8005ebc:	310c      	adds	r1, #12
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	0092      	lsls	r2, r2, #2
 8005ec2:	300c      	adds	r0, #12
 8005ec4:	f000 f90d 	bl	80060e2 <memcpy>
 8005ec8:	2201      	movs	r2, #1
 8005eca:	0021      	movs	r1, r4
 8005ecc:	0038      	movs	r0, r7
 8005ece:	f000 fb27 	bl	8006520 <__lshift>
 8005ed2:	002c      	movs	r4, r5
 8005ed4:	0005      	movs	r5, r0
 8005ed6:	9b05      	ldr	r3, [sp, #20]
 8005ed8:	9308      	str	r3, [sp, #32]
 8005eda:	0031      	movs	r1, r6
 8005edc:	9804      	ldr	r0, [sp, #16]
 8005ede:	f7ff fa3d 	bl	800535c <quorem>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	0021      	movs	r1, r4
 8005ee6:	3330      	adds	r3, #48	; 0x30
 8005ee8:	900e      	str	r0, [sp, #56]	; 0x38
 8005eea:	9804      	ldr	r0, [sp, #16]
 8005eec:	9306      	str	r3, [sp, #24]
 8005eee:	f000 fb87 	bl	8006600 <__mcmp>
 8005ef2:	002a      	movs	r2, r5
 8005ef4:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ef6:	0031      	movs	r1, r6
 8005ef8:	0038      	movs	r0, r7
 8005efa:	f000 fb9d 	bl	8006638 <__mdiff>
 8005efe:	68c3      	ldr	r3, [r0, #12]
 8005f00:	9007      	str	r0, [sp, #28]
 8005f02:	9310      	str	r3, [sp, #64]	; 0x40
 8005f04:	2301      	movs	r3, #1
 8005f06:	930d      	str	r3, [sp, #52]	; 0x34
 8005f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <_dtoa_r+0xaa4>
 8005f0e:	0001      	movs	r1, r0
 8005f10:	9804      	ldr	r0, [sp, #16]
 8005f12:	f000 fb75 	bl	8006600 <__mcmp>
 8005f16:	900d      	str	r0, [sp, #52]	; 0x34
 8005f18:	0038      	movs	r0, r7
 8005f1a:	9907      	ldr	r1, [sp, #28]
 8005f1c:	f000 f92e 	bl	800617c <_Bfree>
 8005f20:	2301      	movs	r3, #1
 8005f22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f26:	4018      	ands	r0, r3
 8005f28:	9b08      	ldr	r3, [sp, #32]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	9307      	str	r3, [sp, #28]
 8005f2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f30:	4313      	orrs	r3, r2
 8005f32:	4303      	orrs	r3, r0
 8005f34:	d10c      	bne.n	8005f50 <_dtoa_r+0xadc>
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	2b39      	cmp	r3, #57	; 0x39
 8005f3a:	d025      	beq.n	8005f88 <_dtoa_r+0xb14>
 8005f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dd02      	ble.n	8005f48 <_dtoa_r+0xad4>
 8005f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f44:	3331      	adds	r3, #49	; 0x31
 8005f46:	9306      	str	r3, [sp, #24]
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	9a06      	ldr	r2, [sp, #24]
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e773      	b.n	8005e38 <_dtoa_r+0x9c4>
 8005f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db03      	blt.n	8005f5e <_dtoa_r+0xaea>
 8005f56:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	4303      	orrs	r3, r0
 8005f5c:	d11f      	bne.n	8005f9e <_dtoa_r+0xb2a>
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	ddf1      	ble.n	8005f48 <_dtoa_r+0xad4>
 8005f64:	9904      	ldr	r1, [sp, #16]
 8005f66:	2201      	movs	r2, #1
 8005f68:	0038      	movs	r0, r7
 8005f6a:	f000 fad9 	bl	8006520 <__lshift>
 8005f6e:	0031      	movs	r1, r6
 8005f70:	9004      	str	r0, [sp, #16]
 8005f72:	f000 fb45 	bl	8006600 <__mcmp>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	dc03      	bgt.n	8005f82 <_dtoa_r+0xb0e>
 8005f7a:	d1e5      	bne.n	8005f48 <_dtoa_r+0xad4>
 8005f7c:	9b06      	ldr	r3, [sp, #24]
 8005f7e:	07db      	lsls	r3, r3, #31
 8005f80:	d5e2      	bpl.n	8005f48 <_dtoa_r+0xad4>
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b39      	cmp	r3, #57	; 0x39
 8005f86:	d1dc      	bne.n	8005f42 <_dtoa_r+0xace>
 8005f88:	2339      	movs	r3, #57	; 0x39
 8005f8a:	9a08      	ldr	r2, [sp, #32]
 8005f8c:	7013      	strb	r3, [r2, #0]
 8005f8e:	9b07      	ldr	r3, [sp, #28]
 8005f90:	9307      	str	r3, [sp, #28]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	2a39      	cmp	r2, #57	; 0x39
 8005f98:	d06c      	beq.n	8006074 <_dtoa_r+0xc00>
 8005f9a:	3201      	adds	r2, #1
 8005f9c:	e7d6      	b.n	8005f4c <_dtoa_r+0xad8>
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dd07      	ble.n	8005fb4 <_dtoa_r+0xb40>
 8005fa4:	9b06      	ldr	r3, [sp, #24]
 8005fa6:	2b39      	cmp	r3, #57	; 0x39
 8005fa8:	d0ee      	beq.n	8005f88 <_dtoa_r+0xb14>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	9a08      	ldr	r2, [sp, #32]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	7013      	strb	r3, [r2, #0]
 8005fb2:	e741      	b.n	8005e38 <_dtoa_r+0x9c4>
 8005fb4:	9b08      	ldr	r3, [sp, #32]
 8005fb6:	9a06      	ldr	r2, [sp, #24]
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	2301      	movs	r3, #1
 8005fbc:	9a05      	ldr	r2, [sp, #20]
 8005fbe:	1a9b      	subs	r3, r3, r2
 8005fc0:	9a08      	ldr	r2, [sp, #32]
 8005fc2:	189b      	adds	r3, r3, r2
 8005fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d03e      	beq.n	8006048 <_dtoa_r+0xbd4>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	220a      	movs	r2, #10
 8005fce:	9904      	ldr	r1, [sp, #16]
 8005fd0:	0038      	movs	r0, r7
 8005fd2:	f000 f8f7 	bl	80061c4 <__multadd>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9004      	str	r0, [sp, #16]
 8005fda:	220a      	movs	r2, #10
 8005fdc:	0021      	movs	r1, r4
 8005fde:	0038      	movs	r0, r7
 8005fe0:	42ac      	cmp	r4, r5
 8005fe2:	d106      	bne.n	8005ff2 <_dtoa_r+0xb7e>
 8005fe4:	f000 f8ee 	bl	80061c4 <__multadd>
 8005fe8:	0004      	movs	r4, r0
 8005fea:	0005      	movs	r5, r0
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	e773      	b.n	8005eda <_dtoa_r+0xa66>
 8005ff2:	f000 f8e7 	bl	80061c4 <__multadd>
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	0004      	movs	r4, r0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	0038      	movs	r0, r7
 8006000:	f000 f8e0 	bl	80061c4 <__multadd>
 8006004:	0005      	movs	r5, r0
 8006006:	e7f1      	b.n	8005fec <_dtoa_r+0xb78>
 8006008:	9b06      	ldr	r3, [sp, #24]
 800600a:	930c      	str	r3, [sp, #48]	; 0x30
 800600c:	2400      	movs	r4, #0
 800600e:	0031      	movs	r1, r6
 8006010:	9804      	ldr	r0, [sp, #16]
 8006012:	f7ff f9a3 	bl	800535c <quorem>
 8006016:	9b05      	ldr	r3, [sp, #20]
 8006018:	3030      	adds	r0, #48	; 0x30
 800601a:	5518      	strb	r0, [r3, r4]
 800601c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800601e:	3401      	adds	r4, #1
 8006020:	9006      	str	r0, [sp, #24]
 8006022:	42a3      	cmp	r3, r4
 8006024:	dd07      	ble.n	8006036 <_dtoa_r+0xbc2>
 8006026:	2300      	movs	r3, #0
 8006028:	220a      	movs	r2, #10
 800602a:	0038      	movs	r0, r7
 800602c:	9904      	ldr	r1, [sp, #16]
 800602e:	f000 f8c9 	bl	80061c4 <__multadd>
 8006032:	9004      	str	r0, [sp, #16]
 8006034:	e7eb      	b.n	800600e <_dtoa_r+0xb9a>
 8006036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006038:	2001      	movs	r0, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd00      	ble.n	8006040 <_dtoa_r+0xbcc>
 800603e:	0018      	movs	r0, r3
 8006040:	2400      	movs	r4, #0
 8006042:	9b05      	ldr	r3, [sp, #20]
 8006044:	181b      	adds	r3, r3, r0
 8006046:	9307      	str	r3, [sp, #28]
 8006048:	9904      	ldr	r1, [sp, #16]
 800604a:	2201      	movs	r2, #1
 800604c:	0038      	movs	r0, r7
 800604e:	f000 fa67 	bl	8006520 <__lshift>
 8006052:	0031      	movs	r1, r6
 8006054:	9004      	str	r0, [sp, #16]
 8006056:	f000 fad3 	bl	8006600 <__mcmp>
 800605a:	2800      	cmp	r0, #0
 800605c:	dc97      	bgt.n	8005f8e <_dtoa_r+0xb1a>
 800605e:	d102      	bne.n	8006066 <_dtoa_r+0xbf2>
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	07db      	lsls	r3, r3, #31
 8006064:	d493      	bmi.n	8005f8e <_dtoa_r+0xb1a>
 8006066:	9b07      	ldr	r3, [sp, #28]
 8006068:	9307      	str	r3, [sp, #28]
 800606a:	3b01      	subs	r3, #1
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	2a30      	cmp	r2, #48	; 0x30
 8006070:	d0fa      	beq.n	8006068 <_dtoa_r+0xbf4>
 8006072:	e6e1      	b.n	8005e38 <_dtoa_r+0x9c4>
 8006074:	9a05      	ldr	r2, [sp, #20]
 8006076:	429a      	cmp	r2, r3
 8006078:	d18a      	bne.n	8005f90 <_dtoa_r+0xb1c>
 800607a:	9b02      	ldr	r3, [sp, #8]
 800607c:	3301      	adds	r3, #1
 800607e:	9302      	str	r3, [sp, #8]
 8006080:	2331      	movs	r3, #49	; 0x31
 8006082:	e795      	b.n	8005fb0 <_dtoa_r+0xb3c>
 8006084:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <_dtoa_r+0xc34>)
 8006086:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006088:	9305      	str	r3, [sp, #20]
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <_dtoa_r+0xc38>)
 800608c:	2a00      	cmp	r2, #0
 800608e:	d001      	beq.n	8006094 <_dtoa_r+0xc20>
 8006090:	f7ff fa3b 	bl	800550a <_dtoa_r+0x96>
 8006094:	f7ff fa3b 	bl	800550e <_dtoa_r+0x9a>
 8006098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800609a:	2b00      	cmp	r3, #0
 800609c:	dcb6      	bgt.n	800600c <_dtoa_r+0xb98>
 800609e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	dd00      	ble.n	80060a6 <_dtoa_r+0xc32>
 80060a4:	e6b2      	b.n	8005e0c <_dtoa_r+0x998>
 80060a6:	e7b1      	b.n	800600c <_dtoa_r+0xb98>
 80060a8:	080079f4 	.word	0x080079f4
 80060ac:	080079fc 	.word	0x080079fc

080060b0 <_localeconv_r>:
 80060b0:	4800      	ldr	r0, [pc, #0]	; (80060b4 <_localeconv_r+0x4>)
 80060b2:	4770      	bx	lr
 80060b4:	20000164 	.word	0x20000164

080060b8 <malloc>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <malloc+0x10>)
 80060bc:	0001      	movs	r1, r0
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	f000 fc0e 	bl	80068e0 <_malloc_r>
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	20000010 	.word	0x20000010

080060cc <memchr>:
 80060cc:	b2c9      	uxtb	r1, r1
 80060ce:	1882      	adds	r2, r0, r2
 80060d0:	4290      	cmp	r0, r2
 80060d2:	d101      	bne.n	80060d8 <memchr+0xc>
 80060d4:	2000      	movs	r0, #0
 80060d6:	4770      	bx	lr
 80060d8:	7803      	ldrb	r3, [r0, #0]
 80060da:	428b      	cmp	r3, r1
 80060dc:	d0fb      	beq.n	80060d6 <memchr+0xa>
 80060de:	3001      	adds	r0, #1
 80060e0:	e7f6      	b.n	80060d0 <memchr+0x4>

080060e2 <memcpy>:
 80060e2:	2300      	movs	r3, #0
 80060e4:	b510      	push	{r4, lr}
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d100      	bne.n	80060ec <memcpy+0xa>
 80060ea:	bd10      	pop	{r4, pc}
 80060ec:	5ccc      	ldrb	r4, [r1, r3]
 80060ee:	54c4      	strb	r4, [r0, r3]
 80060f0:	3301      	adds	r3, #1
 80060f2:	e7f8      	b.n	80060e6 <memcpy+0x4>

080060f4 <_Balloc>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060f8:	0006      	movs	r6, r0
 80060fa:	000c      	movs	r4, r1
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	d10e      	bne.n	800611e <_Balloc+0x2a>
 8006100:	2010      	movs	r0, #16
 8006102:	f7ff ffd9 	bl	80060b8 <malloc>
 8006106:	1e02      	subs	r2, r0, #0
 8006108:	6270      	str	r0, [r6, #36]	; 0x24
 800610a:	d104      	bne.n	8006116 <_Balloc+0x22>
 800610c:	2166      	movs	r1, #102	; 0x66
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <_Balloc+0x80>)
 8006110:	4819      	ldr	r0, [pc, #100]	; (8006178 <_Balloc+0x84>)
 8006112:	f000 fdb7 	bl	8006c84 <__assert_func>
 8006116:	6045      	str	r5, [r0, #4]
 8006118:	6085      	str	r5, [r0, #8]
 800611a:	6005      	str	r5, [r0, #0]
 800611c:	60c5      	str	r5, [r0, #12]
 800611e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006120:	68eb      	ldr	r3, [r5, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d013      	beq.n	800614e <_Balloc+0x5a>
 8006126:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006128:	00a2      	lsls	r2, r4, #2
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	189b      	adds	r3, r3, r2
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	2800      	cmp	r0, #0
 8006132:	d118      	bne.n	8006166 <_Balloc+0x72>
 8006134:	2101      	movs	r1, #1
 8006136:	000d      	movs	r5, r1
 8006138:	40a5      	lsls	r5, r4
 800613a:	1d6a      	adds	r2, r5, #5
 800613c:	0030      	movs	r0, r6
 800613e:	0092      	lsls	r2, r2, #2
 8006140:	f000 fb76 	bl	8006830 <_calloc_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	d00c      	beq.n	8006162 <_Balloc+0x6e>
 8006148:	6044      	str	r4, [r0, #4]
 800614a:	6085      	str	r5, [r0, #8]
 800614c:	e00d      	b.n	800616a <_Balloc+0x76>
 800614e:	2221      	movs	r2, #33	; 0x21
 8006150:	2104      	movs	r1, #4
 8006152:	0030      	movs	r0, r6
 8006154:	f000 fb6c 	bl	8006830 <_calloc_r>
 8006158:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800615a:	60e8      	str	r0, [r5, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e1      	bne.n	8006126 <_Balloc+0x32>
 8006162:	2000      	movs	r0, #0
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	6802      	ldr	r2, [r0, #0]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	2300      	movs	r3, #0
 800616c:	6103      	str	r3, [r0, #16]
 800616e:	60c3      	str	r3, [r0, #12]
 8006170:	e7f8      	b.n	8006164 <_Balloc+0x70>
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	08007a01 	.word	0x08007a01
 8006178:	08007a88 	.word	0x08007a88

0800617c <_Bfree>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006180:	0005      	movs	r5, r0
 8006182:	000c      	movs	r4, r1
 8006184:	2e00      	cmp	r6, #0
 8006186:	d10e      	bne.n	80061a6 <_Bfree+0x2a>
 8006188:	2010      	movs	r0, #16
 800618a:	f7ff ff95 	bl	80060b8 <malloc>
 800618e:	1e02      	subs	r2, r0, #0
 8006190:	6268      	str	r0, [r5, #36]	; 0x24
 8006192:	d104      	bne.n	800619e <_Bfree+0x22>
 8006194:	218a      	movs	r1, #138	; 0x8a
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <_Bfree+0x40>)
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <_Bfree+0x44>)
 800619a:	f000 fd73 	bl	8006c84 <__assert_func>
 800619e:	6046      	str	r6, [r0, #4]
 80061a0:	6086      	str	r6, [r0, #8]
 80061a2:	6006      	str	r6, [r0, #0]
 80061a4:	60c6      	str	r6, [r0, #12]
 80061a6:	2c00      	cmp	r4, #0
 80061a8:	d007      	beq.n	80061ba <_Bfree+0x3e>
 80061aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061ac:	6862      	ldr	r2, [r4, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	601c      	str	r4, [r3, #0]
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	08007a01 	.word	0x08007a01
 80061c0:	08007a88 	.word	0x08007a88

080061c4 <__multadd>:
 80061c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c6:	000e      	movs	r6, r1
 80061c8:	9001      	str	r0, [sp, #4]
 80061ca:	000c      	movs	r4, r1
 80061cc:	001d      	movs	r5, r3
 80061ce:	2000      	movs	r0, #0
 80061d0:	690f      	ldr	r7, [r1, #16]
 80061d2:	3614      	adds	r6, #20
 80061d4:	6833      	ldr	r3, [r6, #0]
 80061d6:	3001      	adds	r0, #1
 80061d8:	b299      	uxth	r1, r3
 80061da:	4351      	muls	r1, r2
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	4353      	muls	r3, r2
 80061e0:	1949      	adds	r1, r1, r5
 80061e2:	0c0d      	lsrs	r5, r1, #16
 80061e4:	195b      	adds	r3, r3, r5
 80061e6:	0c1d      	lsrs	r5, r3, #16
 80061e8:	b289      	uxth	r1, r1
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	185b      	adds	r3, r3, r1
 80061ee:	c608      	stmia	r6!, {r3}
 80061f0:	4287      	cmp	r7, r0
 80061f2:	dcef      	bgt.n	80061d4 <__multadd+0x10>
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	d022      	beq.n	800623e <__multadd+0x7a>
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	42bb      	cmp	r3, r7
 80061fc:	dc19      	bgt.n	8006232 <__multadd+0x6e>
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	9801      	ldr	r0, [sp, #4]
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	f7ff ff76 	bl	80060f4 <_Balloc>
 8006208:	1e06      	subs	r6, r0, #0
 800620a:	d105      	bne.n	8006218 <__multadd+0x54>
 800620c:	0002      	movs	r2, r0
 800620e:	21b5      	movs	r1, #181	; 0xb5
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <__multadd+0x80>)
 8006212:	480d      	ldr	r0, [pc, #52]	; (8006248 <__multadd+0x84>)
 8006214:	f000 fd36 	bl	8006c84 <__assert_func>
 8006218:	0021      	movs	r1, r4
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	310c      	adds	r1, #12
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	0092      	lsls	r2, r2, #2
 8006222:	300c      	adds	r0, #12
 8006224:	f7ff ff5d 	bl	80060e2 <memcpy>
 8006228:	0021      	movs	r1, r4
 800622a:	9801      	ldr	r0, [sp, #4]
 800622c:	f7ff ffa6 	bl	800617c <_Bfree>
 8006230:	0034      	movs	r4, r6
 8006232:	1d3b      	adds	r3, r7, #4
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	18e3      	adds	r3, r4, r3
 8006238:	605d      	str	r5, [r3, #4]
 800623a:	1c7b      	adds	r3, r7, #1
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	0020      	movs	r0, r4
 8006240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	08007a77 	.word	0x08007a77
 8006248:	08007a88 	.word	0x08007a88

0800624c <__hi0bits>:
 800624c:	0003      	movs	r3, r0
 800624e:	0c02      	lsrs	r2, r0, #16
 8006250:	2000      	movs	r0, #0
 8006252:	4282      	cmp	r2, r0
 8006254:	d101      	bne.n	800625a <__hi0bits+0xe>
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	3010      	adds	r0, #16
 800625a:	0e1a      	lsrs	r2, r3, #24
 800625c:	d101      	bne.n	8006262 <__hi0bits+0x16>
 800625e:	3008      	adds	r0, #8
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	0f1a      	lsrs	r2, r3, #28
 8006264:	d101      	bne.n	800626a <__hi0bits+0x1e>
 8006266:	3004      	adds	r0, #4
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	0f9a      	lsrs	r2, r3, #30
 800626c:	d101      	bne.n	8006272 <__hi0bits+0x26>
 800626e:	3002      	adds	r0, #2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	db03      	blt.n	800627e <__hi0bits+0x32>
 8006276:	3001      	adds	r0, #1
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	d400      	bmi.n	800627e <__hi0bits+0x32>
 800627c:	2020      	movs	r0, #32
 800627e:	4770      	bx	lr

08006280 <__lo0bits>:
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	0002      	movs	r2, r0
 8006284:	2107      	movs	r1, #7
 8006286:	0018      	movs	r0, r3
 8006288:	4008      	ands	r0, r1
 800628a:	420b      	tst	r3, r1
 800628c:	d00d      	beq.n	80062aa <__lo0bits+0x2a>
 800628e:	3906      	subs	r1, #6
 8006290:	2000      	movs	r0, #0
 8006292:	420b      	tst	r3, r1
 8006294:	d105      	bne.n	80062a2 <__lo0bits+0x22>
 8006296:	3002      	adds	r0, #2
 8006298:	4203      	tst	r3, r0
 800629a:	d003      	beq.n	80062a4 <__lo0bits+0x24>
 800629c:	40cb      	lsrs	r3, r1
 800629e:	0008      	movs	r0, r1
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	4770      	bx	lr
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e7fb      	b.n	80062a2 <__lo0bits+0x22>
 80062aa:	b299      	uxth	r1, r3
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d101      	bne.n	80062b4 <__lo0bits+0x34>
 80062b0:	2010      	movs	r0, #16
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	b2d9      	uxtb	r1, r3
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d101      	bne.n	80062be <__lo0bits+0x3e>
 80062ba:	3008      	adds	r0, #8
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	0719      	lsls	r1, r3, #28
 80062c0:	d101      	bne.n	80062c6 <__lo0bits+0x46>
 80062c2:	3004      	adds	r0, #4
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	0799      	lsls	r1, r3, #30
 80062c8:	d101      	bne.n	80062ce <__lo0bits+0x4e>
 80062ca:	3002      	adds	r0, #2
 80062cc:	089b      	lsrs	r3, r3, #2
 80062ce:	07d9      	lsls	r1, r3, #31
 80062d0:	d4e9      	bmi.n	80062a6 <__lo0bits+0x26>
 80062d2:	3001      	adds	r0, #1
 80062d4:	085b      	lsrs	r3, r3, #1
 80062d6:	d1e6      	bne.n	80062a6 <__lo0bits+0x26>
 80062d8:	2020      	movs	r0, #32
 80062da:	e7e2      	b.n	80062a2 <__lo0bits+0x22>

080062dc <__i2b>:
 80062dc:	b510      	push	{r4, lr}
 80062de:	000c      	movs	r4, r1
 80062e0:	2101      	movs	r1, #1
 80062e2:	f7ff ff07 	bl	80060f4 <_Balloc>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d106      	bne.n	80062f8 <__i2b+0x1c>
 80062ea:	21a0      	movs	r1, #160	; 0xa0
 80062ec:	0002      	movs	r2, r0
 80062ee:	4b04      	ldr	r3, [pc, #16]	; (8006300 <__i2b+0x24>)
 80062f0:	4804      	ldr	r0, [pc, #16]	; (8006304 <__i2b+0x28>)
 80062f2:	0049      	lsls	r1, r1, #1
 80062f4:	f000 fcc6 	bl	8006c84 <__assert_func>
 80062f8:	2301      	movs	r3, #1
 80062fa:	6144      	str	r4, [r0, #20]
 80062fc:	6103      	str	r3, [r0, #16]
 80062fe:	bd10      	pop	{r4, pc}
 8006300:	08007a77 	.word	0x08007a77
 8006304:	08007a88 	.word	0x08007a88

08006308 <__multiply>:
 8006308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630a:	690b      	ldr	r3, [r1, #16]
 800630c:	0014      	movs	r4, r2
 800630e:	6912      	ldr	r2, [r2, #16]
 8006310:	000d      	movs	r5, r1
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	4293      	cmp	r3, r2
 8006316:	da01      	bge.n	800631c <__multiply+0x14>
 8006318:	0025      	movs	r5, r4
 800631a:	000c      	movs	r4, r1
 800631c:	692f      	ldr	r7, [r5, #16]
 800631e:	6926      	ldr	r6, [r4, #16]
 8006320:	6869      	ldr	r1, [r5, #4]
 8006322:	19bb      	adds	r3, r7, r6
 8006324:	9302      	str	r3, [sp, #8]
 8006326:	68ab      	ldr	r3, [r5, #8]
 8006328:	19ba      	adds	r2, r7, r6
 800632a:	4293      	cmp	r3, r2
 800632c:	da00      	bge.n	8006330 <__multiply+0x28>
 800632e:	3101      	adds	r1, #1
 8006330:	f7ff fee0 	bl	80060f4 <_Balloc>
 8006334:	9001      	str	r0, [sp, #4]
 8006336:	2800      	cmp	r0, #0
 8006338:	d106      	bne.n	8006348 <__multiply+0x40>
 800633a:	215e      	movs	r1, #94	; 0x5e
 800633c:	0002      	movs	r2, r0
 800633e:	4b48      	ldr	r3, [pc, #288]	; (8006460 <__multiply+0x158>)
 8006340:	4848      	ldr	r0, [pc, #288]	; (8006464 <__multiply+0x15c>)
 8006342:	31ff      	adds	r1, #255	; 0xff
 8006344:	f000 fc9e 	bl	8006c84 <__assert_func>
 8006348:	9b01      	ldr	r3, [sp, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	3314      	adds	r3, #20
 800634e:	469c      	mov	ip, r3
 8006350:	19bb      	adds	r3, r7, r6
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4463      	add	r3, ip
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	4663      	mov	r3, ip
 800635a:	9903      	ldr	r1, [sp, #12]
 800635c:	428b      	cmp	r3, r1
 800635e:	d32c      	bcc.n	80063ba <__multiply+0xb2>
 8006360:	002b      	movs	r3, r5
 8006362:	0022      	movs	r2, r4
 8006364:	3314      	adds	r3, #20
 8006366:	00bf      	lsls	r7, r7, #2
 8006368:	3214      	adds	r2, #20
 800636a:	9306      	str	r3, [sp, #24]
 800636c:	00b6      	lsls	r6, r6, #2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	9304      	str	r3, [sp, #16]
 8006372:	1993      	adds	r3, r2, r6
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	2304      	movs	r3, #4
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	002b      	movs	r3, r5
 800637c:	9904      	ldr	r1, [sp, #16]
 800637e:	3315      	adds	r3, #21
 8006380:	9200      	str	r2, [sp, #0]
 8006382:	4299      	cmp	r1, r3
 8006384:	d305      	bcc.n	8006392 <__multiply+0x8a>
 8006386:	1b4b      	subs	r3, r1, r5
 8006388:	3b15      	subs	r3, #21
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	3301      	adds	r3, #1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	9b07      	ldr	r3, [sp, #28]
 8006394:	9a00      	ldr	r2, [sp, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d311      	bcc.n	80063be <__multiply+0xb6>
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd06      	ble.n	80063ae <__multiply+0xa6>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	3b04      	subs	r3, #4
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d054      	beq.n	8006458 <__multiply+0x150>
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	9a02      	ldr	r2, [sp, #8]
 80063b2:	0018      	movs	r0, r3
 80063b4:	611a      	str	r2, [r3, #16]
 80063b6:	b009      	add	sp, #36	; 0x24
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	c304      	stmia	r3!, {r2}
 80063bc:	e7cd      	b.n	800635a <__multiply+0x52>
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	b298      	uxth	r0, r3
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d01c      	beq.n	8006402 <__multiply+0xfa>
 80063c8:	4667      	mov	r7, ip
 80063ca:	2400      	movs	r4, #0
 80063cc:	9e06      	ldr	r6, [sp, #24]
 80063ce:	ce02      	ldmia	r6!, {r1}
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	b28b      	uxth	r3, r1
 80063d4:	4343      	muls	r3, r0
 80063d6:	0c09      	lsrs	r1, r1, #16
 80063d8:	4341      	muls	r1, r0
 80063da:	b292      	uxth	r2, r2
 80063dc:	189b      	adds	r3, r3, r2
 80063de:	191b      	adds	r3, r3, r4
 80063e0:	000c      	movs	r4, r1
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	0c11      	lsrs	r1, r2, #16
 80063e6:	1861      	adds	r1, r4, r1
 80063e8:	0c1c      	lsrs	r4, r3, #16
 80063ea:	1909      	adds	r1, r1, r4
 80063ec:	0c0c      	lsrs	r4, r1, #16
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	0409      	lsls	r1, r1, #16
 80063f2:	430b      	orrs	r3, r1
 80063f4:	c708      	stmia	r7!, {r3}
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	42b3      	cmp	r3, r6
 80063fa:	d8e8      	bhi.n	80063ce <__multiply+0xc6>
 80063fc:	4663      	mov	r3, ip
 80063fe:	9a05      	ldr	r2, [sp, #20]
 8006400:	509c      	str	r4, [r3, r2]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	0c1e      	lsrs	r6, r3, #16
 8006408:	d020      	beq.n	800644c <__multiply+0x144>
 800640a:	4663      	mov	r3, ip
 800640c:	002c      	movs	r4, r5
 800640e:	4660      	mov	r0, ip
 8006410:	2700      	movs	r7, #0
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3414      	adds	r4, #20
 8006416:	6822      	ldr	r2, [r4, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	b291      	uxth	r1, r2
 800641c:	4371      	muls	r1, r6
 800641e:	6802      	ldr	r2, [r0, #0]
 8006420:	0c12      	lsrs	r2, r2, #16
 8006422:	1889      	adds	r1, r1, r2
 8006424:	19cf      	adds	r7, r1, r7
 8006426:	0439      	lsls	r1, r7, #16
 8006428:	430b      	orrs	r3, r1
 800642a:	6003      	str	r3, [r0, #0]
 800642c:	cc02      	ldmia	r4!, {r1}
 800642e:	6843      	ldr	r3, [r0, #4]
 8006430:	0c09      	lsrs	r1, r1, #16
 8006432:	4371      	muls	r1, r6
 8006434:	b29b      	uxth	r3, r3
 8006436:	0c3f      	lsrs	r7, r7, #16
 8006438:	18cb      	adds	r3, r1, r3
 800643a:	9a04      	ldr	r2, [sp, #16]
 800643c:	19db      	adds	r3, r3, r7
 800643e:	0c1f      	lsrs	r7, r3, #16
 8006440:	3004      	adds	r0, #4
 8006442:	42a2      	cmp	r2, r4
 8006444:	d8e7      	bhi.n	8006416 <__multiply+0x10e>
 8006446:	4662      	mov	r2, ip
 8006448:	9905      	ldr	r1, [sp, #20]
 800644a:	5053      	str	r3, [r2, r1]
 800644c:	9b00      	ldr	r3, [sp, #0]
 800644e:	3304      	adds	r3, #4
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2304      	movs	r3, #4
 8006454:	449c      	add	ip, r3
 8006456:	e79c      	b.n	8006392 <__multiply+0x8a>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	9302      	str	r3, [sp, #8]
 800645e:	e79c      	b.n	800639a <__multiply+0x92>
 8006460:	08007a77 	.word	0x08007a77
 8006464:	08007a88 	.word	0x08007a88

08006468 <__pow5mult>:
 8006468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800646a:	2303      	movs	r3, #3
 800646c:	0015      	movs	r5, r2
 800646e:	0007      	movs	r7, r0
 8006470:	000e      	movs	r6, r1
 8006472:	401a      	ands	r2, r3
 8006474:	421d      	tst	r5, r3
 8006476:	d008      	beq.n	800648a <__pow5mult+0x22>
 8006478:	4925      	ldr	r1, [pc, #148]	; (8006510 <__pow5mult+0xa8>)
 800647a:	3a01      	subs	r2, #1
 800647c:	0092      	lsls	r2, r2, #2
 800647e:	5852      	ldr	r2, [r2, r1]
 8006480:	2300      	movs	r3, #0
 8006482:	0031      	movs	r1, r6
 8006484:	f7ff fe9e 	bl	80061c4 <__multadd>
 8006488:	0006      	movs	r6, r0
 800648a:	10ad      	asrs	r5, r5, #2
 800648c:	d03d      	beq.n	800650a <__pow5mult+0xa2>
 800648e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006490:	2c00      	cmp	r4, #0
 8006492:	d10f      	bne.n	80064b4 <__pow5mult+0x4c>
 8006494:	2010      	movs	r0, #16
 8006496:	f7ff fe0f 	bl	80060b8 <malloc>
 800649a:	1e02      	subs	r2, r0, #0
 800649c:	6278      	str	r0, [r7, #36]	; 0x24
 800649e:	d105      	bne.n	80064ac <__pow5mult+0x44>
 80064a0:	21d7      	movs	r1, #215	; 0xd7
 80064a2:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <__pow5mult+0xac>)
 80064a4:	481c      	ldr	r0, [pc, #112]	; (8006518 <__pow5mult+0xb0>)
 80064a6:	0049      	lsls	r1, r1, #1
 80064a8:	f000 fbec 	bl	8006c84 <__assert_func>
 80064ac:	6044      	str	r4, [r0, #4]
 80064ae:	6084      	str	r4, [r0, #8]
 80064b0:	6004      	str	r4, [r0, #0]
 80064b2:	60c4      	str	r4, [r0, #12]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	689c      	ldr	r4, [r3, #8]
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2c00      	cmp	r4, #0
 80064bc:	d108      	bne.n	80064d0 <__pow5mult+0x68>
 80064be:	0038      	movs	r0, r7
 80064c0:	4916      	ldr	r1, [pc, #88]	; (800651c <__pow5mult+0xb4>)
 80064c2:	f7ff ff0b 	bl	80062dc <__i2b>
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	0004      	movs	r4, r0
 80064ca:	6098      	str	r0, [r3, #8]
 80064cc:	2300      	movs	r3, #0
 80064ce:	6003      	str	r3, [r0, #0]
 80064d0:	2301      	movs	r3, #1
 80064d2:	421d      	tst	r5, r3
 80064d4:	d00a      	beq.n	80064ec <__pow5mult+0x84>
 80064d6:	0031      	movs	r1, r6
 80064d8:	0022      	movs	r2, r4
 80064da:	0038      	movs	r0, r7
 80064dc:	f7ff ff14 	bl	8006308 <__multiply>
 80064e0:	0031      	movs	r1, r6
 80064e2:	9001      	str	r0, [sp, #4]
 80064e4:	0038      	movs	r0, r7
 80064e6:	f7ff fe49 	bl	800617c <_Bfree>
 80064ea:	9e01      	ldr	r6, [sp, #4]
 80064ec:	106d      	asrs	r5, r5, #1
 80064ee:	d00c      	beq.n	800650a <__pow5mult+0xa2>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d107      	bne.n	8006506 <__pow5mult+0x9e>
 80064f6:	0022      	movs	r2, r4
 80064f8:	0021      	movs	r1, r4
 80064fa:	0038      	movs	r0, r7
 80064fc:	f7ff ff04 	bl	8006308 <__multiply>
 8006500:	2300      	movs	r3, #0
 8006502:	6020      	str	r0, [r4, #0]
 8006504:	6003      	str	r3, [r0, #0]
 8006506:	0004      	movs	r4, r0
 8006508:	e7e2      	b.n	80064d0 <__pow5mult+0x68>
 800650a:	0030      	movs	r0, r6
 800650c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	08007bd8 	.word	0x08007bd8
 8006514:	08007a01 	.word	0x08007a01
 8006518:	08007a88 	.word	0x08007a88
 800651c:	00000271 	.word	0x00000271

08006520 <__lshift>:
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	000c      	movs	r4, r1
 8006524:	0017      	movs	r7, r2
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	1155      	asrs	r5, r2, #5
 800652a:	b087      	sub	sp, #28
 800652c:	18eb      	adds	r3, r5, r3
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	3301      	adds	r3, #1
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	6849      	ldr	r1, [r1, #4]
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	9004      	str	r0, [sp, #16]
 800653a:	9a01      	ldr	r2, [sp, #4]
 800653c:	4293      	cmp	r3, r2
 800653e:	db11      	blt.n	8006564 <__lshift+0x44>
 8006540:	9804      	ldr	r0, [sp, #16]
 8006542:	f7ff fdd7 	bl	80060f4 <_Balloc>
 8006546:	0002      	movs	r2, r0
 8006548:	2300      	movs	r3, #0
 800654a:	3214      	adds	r2, #20
 800654c:	0006      	movs	r6, r0
 800654e:	0011      	movs	r1, r2
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	4298      	cmp	r0, r3
 8006554:	d10d      	bne.n	8006572 <__lshift+0x52>
 8006556:	21da      	movs	r1, #218	; 0xda
 8006558:	0002      	movs	r2, r0
 800655a:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <__lshift+0xd8>)
 800655c:	4827      	ldr	r0, [pc, #156]	; (80065fc <__lshift+0xdc>)
 800655e:	31ff      	adds	r1, #255	; 0xff
 8006560:	f000 fb90 	bl	8006c84 <__assert_func>
 8006564:	3101      	adds	r1, #1
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	e7e7      	b.n	800653a <__lshift+0x1a>
 800656a:	2200      	movs	r2, #0
 800656c:	0098      	lsls	r0, r3, #2
 800656e:	500a      	str	r2, [r1, r0]
 8006570:	3301      	adds	r3, #1
 8006572:	42ab      	cmp	r3, r5
 8006574:	dbf9      	blt.n	800656a <__lshift+0x4a>
 8006576:	43eb      	mvns	r3, r5
 8006578:	17db      	asrs	r3, r3, #31
 800657a:	401d      	ands	r5, r3
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	00ad      	lsls	r5, r5, #2
 8006580:	211f      	movs	r1, #31
 8006582:	0038      	movs	r0, r7
 8006584:	195d      	adds	r5, r3, r5
 8006586:	0023      	movs	r3, r4
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	3314      	adds	r3, #20
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	4008      	ands	r0, r1
 8006590:	4684      	mov	ip, r0
 8006592:	189a      	adds	r2, r3, r2
 8006594:	420f      	tst	r7, r1
 8006596:	d02a      	beq.n	80065ee <__lshift+0xce>
 8006598:	3101      	adds	r1, #1
 800659a:	1a09      	subs	r1, r1, r0
 800659c:	9105      	str	r1, [sp, #20]
 800659e:	2100      	movs	r1, #0
 80065a0:	9503      	str	r5, [sp, #12]
 80065a2:	4667      	mov	r7, ip
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	40b8      	lsls	r0, r7
 80065a8:	4301      	orrs	r1, r0
 80065aa:	9803      	ldr	r0, [sp, #12]
 80065ac:	c002      	stmia	r0!, {r1}
 80065ae:	cb02      	ldmia	r3!, {r1}
 80065b0:	9003      	str	r0, [sp, #12]
 80065b2:	9805      	ldr	r0, [sp, #20]
 80065b4:	40c1      	lsrs	r1, r0
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d8f3      	bhi.n	80065a2 <__lshift+0x82>
 80065ba:	0020      	movs	r0, r4
 80065bc:	3015      	adds	r0, #21
 80065be:	2304      	movs	r3, #4
 80065c0:	4282      	cmp	r2, r0
 80065c2:	d304      	bcc.n	80065ce <__lshift+0xae>
 80065c4:	1b13      	subs	r3, r2, r4
 80065c6:	3b15      	subs	r3, #21
 80065c8:	089b      	lsrs	r3, r3, #2
 80065ca:	3301      	adds	r3, #1
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	50e9      	str	r1, [r5, r3]
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d002      	beq.n	80065da <__lshift+0xba>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	3302      	adds	r3, #2
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	9b01      	ldr	r3, [sp, #4]
 80065dc:	9804      	ldr	r0, [sp, #16]
 80065de:	3b01      	subs	r3, #1
 80065e0:	0021      	movs	r1, r4
 80065e2:	6133      	str	r3, [r6, #16]
 80065e4:	f7ff fdca 	bl	800617c <_Bfree>
 80065e8:	0030      	movs	r0, r6
 80065ea:	b007      	add	sp, #28
 80065ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ee:	cb02      	ldmia	r3!, {r1}
 80065f0:	c502      	stmia	r5!, {r1}
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d8fb      	bhi.n	80065ee <__lshift+0xce>
 80065f6:	e7f0      	b.n	80065da <__lshift+0xba>
 80065f8:	08007a77 	.word	0x08007a77
 80065fc:	08007a88 	.word	0x08007a88

08006600 <__mcmp>:
 8006600:	6902      	ldr	r2, [r0, #16]
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	b530      	push	{r4, r5, lr}
 8006606:	0004      	movs	r4, r0
 8006608:	1ad0      	subs	r0, r2, r3
 800660a:	429a      	cmp	r2, r3
 800660c:	d10d      	bne.n	800662a <__mcmp+0x2a>
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	3414      	adds	r4, #20
 8006612:	3114      	adds	r1, #20
 8006614:	18e2      	adds	r2, r4, r3
 8006616:	18c9      	adds	r1, r1, r3
 8006618:	3a04      	subs	r2, #4
 800661a:	3904      	subs	r1, #4
 800661c:	6815      	ldr	r5, [r2, #0]
 800661e:	680b      	ldr	r3, [r1, #0]
 8006620:	429d      	cmp	r5, r3
 8006622:	d003      	beq.n	800662c <__mcmp+0x2c>
 8006624:	2001      	movs	r0, #1
 8006626:	429d      	cmp	r5, r3
 8006628:	d303      	bcc.n	8006632 <__mcmp+0x32>
 800662a:	bd30      	pop	{r4, r5, pc}
 800662c:	4294      	cmp	r4, r2
 800662e:	d3f3      	bcc.n	8006618 <__mcmp+0x18>
 8006630:	e7fb      	b.n	800662a <__mcmp+0x2a>
 8006632:	4240      	negs	r0, r0
 8006634:	e7f9      	b.n	800662a <__mcmp+0x2a>
	...

08006638 <__mdiff>:
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663a:	000e      	movs	r6, r1
 800663c:	0007      	movs	r7, r0
 800663e:	0011      	movs	r1, r2
 8006640:	0030      	movs	r0, r6
 8006642:	b087      	sub	sp, #28
 8006644:	0014      	movs	r4, r2
 8006646:	f7ff ffdb 	bl	8006600 <__mcmp>
 800664a:	1e05      	subs	r5, r0, #0
 800664c:	d110      	bne.n	8006670 <__mdiff+0x38>
 800664e:	0001      	movs	r1, r0
 8006650:	0038      	movs	r0, r7
 8006652:	f7ff fd4f 	bl	80060f4 <_Balloc>
 8006656:	1e02      	subs	r2, r0, #0
 8006658:	d104      	bne.n	8006664 <__mdiff+0x2c>
 800665a:	4b40      	ldr	r3, [pc, #256]	; (800675c <__mdiff+0x124>)
 800665c:	4940      	ldr	r1, [pc, #256]	; (8006760 <__mdiff+0x128>)
 800665e:	4841      	ldr	r0, [pc, #260]	; (8006764 <__mdiff+0x12c>)
 8006660:	f000 fb10 	bl	8006c84 <__assert_func>
 8006664:	2301      	movs	r3, #1
 8006666:	6145      	str	r5, [r0, #20]
 8006668:	6103      	str	r3, [r0, #16]
 800666a:	0010      	movs	r0, r2
 800666c:	b007      	add	sp, #28
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	2301      	movs	r3, #1
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	2800      	cmp	r0, #0
 8006676:	db04      	blt.n	8006682 <__mdiff+0x4a>
 8006678:	0023      	movs	r3, r4
 800667a:	0034      	movs	r4, r6
 800667c:	001e      	movs	r6, r3
 800667e:	2300      	movs	r3, #0
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	0038      	movs	r0, r7
 8006684:	6861      	ldr	r1, [r4, #4]
 8006686:	f7ff fd35 	bl	80060f4 <_Balloc>
 800668a:	1e02      	subs	r2, r0, #0
 800668c:	d103      	bne.n	8006696 <__mdiff+0x5e>
 800668e:	2190      	movs	r1, #144	; 0x90
 8006690:	4b32      	ldr	r3, [pc, #200]	; (800675c <__mdiff+0x124>)
 8006692:	0089      	lsls	r1, r1, #2
 8006694:	e7e3      	b.n	800665e <__mdiff+0x26>
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	2700      	movs	r7, #0
 800669a:	60c3      	str	r3, [r0, #12]
 800669c:	6920      	ldr	r0, [r4, #16]
 800669e:	3414      	adds	r4, #20
 80066a0:	9401      	str	r4, [sp, #4]
 80066a2:	9b01      	ldr	r3, [sp, #4]
 80066a4:	0084      	lsls	r4, r0, #2
 80066a6:	191b      	adds	r3, r3, r4
 80066a8:	0034      	movs	r4, r6
 80066aa:	9302      	str	r3, [sp, #8]
 80066ac:	6933      	ldr	r3, [r6, #16]
 80066ae:	3414      	adds	r4, #20
 80066b0:	0099      	lsls	r1, r3, #2
 80066b2:	1863      	adds	r3, r4, r1
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	0013      	movs	r3, r2
 80066b8:	3314      	adds	r3, #20
 80066ba:	469c      	mov	ip, r3
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	cc02      	ldmia	r4!, {r1}
 80066c6:	cb20      	ldmia	r3!, {r5}
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	b2ab      	uxth	r3, r5
 80066cc:	19df      	adds	r7, r3, r7
 80066ce:	b28b      	uxth	r3, r1
 80066d0:	1afb      	subs	r3, r7, r3
 80066d2:	0c2d      	lsrs	r5, r5, #16
 80066d4:	0c09      	lsrs	r1, r1, #16
 80066d6:	1a69      	subs	r1, r5, r1
 80066d8:	141d      	asrs	r5, r3, #16
 80066da:	1949      	adds	r1, r1, r5
 80066dc:	140f      	asrs	r7, r1, #16
 80066de:	b29b      	uxth	r3, r3
 80066e0:	0409      	lsls	r1, r1, #16
 80066e2:	430b      	orrs	r3, r1
 80066e4:	4661      	mov	r1, ip
 80066e6:	c108      	stmia	r1!, {r3}
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	468c      	mov	ip, r1
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d8e8      	bhi.n	80066c2 <__mdiff+0x8a>
 80066f0:	0031      	movs	r1, r6
 80066f2:	9c03      	ldr	r4, [sp, #12]
 80066f4:	3115      	adds	r1, #21
 80066f6:	2304      	movs	r3, #4
 80066f8:	428c      	cmp	r4, r1
 80066fa:	d304      	bcc.n	8006706 <__mdiff+0xce>
 80066fc:	1ba3      	subs	r3, r4, r6
 80066fe:	3b15      	subs	r3, #21
 8006700:	089b      	lsrs	r3, r3, #2
 8006702:	3301      	adds	r3, #1
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	9901      	ldr	r1, [sp, #4]
 8006708:	18cc      	adds	r4, r1, r3
 800670a:	9905      	ldr	r1, [sp, #20]
 800670c:	0026      	movs	r6, r4
 800670e:	18cb      	adds	r3, r1, r3
 8006710:	469c      	mov	ip, r3
 8006712:	9902      	ldr	r1, [sp, #8]
 8006714:	428e      	cmp	r6, r1
 8006716:	d310      	bcc.n	800673a <__mdiff+0x102>
 8006718:	9e02      	ldr	r6, [sp, #8]
 800671a:	1ee5      	subs	r5, r4, #3
 800671c:	2100      	movs	r1, #0
 800671e:	42ae      	cmp	r6, r5
 8006720:	d304      	bcc.n	800672c <__mdiff+0xf4>
 8006722:	0031      	movs	r1, r6
 8006724:	3103      	adds	r1, #3
 8006726:	1b09      	subs	r1, r1, r4
 8006728:	0889      	lsrs	r1, r1, #2
 800672a:	0089      	lsls	r1, r1, #2
 800672c:	185b      	adds	r3, r3, r1
 800672e:	3b04      	subs	r3, #4
 8006730:	6819      	ldr	r1, [r3, #0]
 8006732:	2900      	cmp	r1, #0
 8006734:	d00f      	beq.n	8006756 <__mdiff+0x11e>
 8006736:	6110      	str	r0, [r2, #16]
 8006738:	e797      	b.n	800666a <__mdiff+0x32>
 800673a:	ce02      	ldmia	r6!, {r1}
 800673c:	b28d      	uxth	r5, r1
 800673e:	19ed      	adds	r5, r5, r7
 8006740:	0c0f      	lsrs	r7, r1, #16
 8006742:	1429      	asrs	r1, r5, #16
 8006744:	1879      	adds	r1, r7, r1
 8006746:	140f      	asrs	r7, r1, #16
 8006748:	b2ad      	uxth	r5, r5
 800674a:	0409      	lsls	r1, r1, #16
 800674c:	430d      	orrs	r5, r1
 800674e:	4661      	mov	r1, ip
 8006750:	c120      	stmia	r1!, {r5}
 8006752:	468c      	mov	ip, r1
 8006754:	e7dd      	b.n	8006712 <__mdiff+0xda>
 8006756:	3801      	subs	r0, #1
 8006758:	e7e9      	b.n	800672e <__mdiff+0xf6>
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	08007a77 	.word	0x08007a77
 8006760:	00000232 	.word	0x00000232
 8006764:	08007a88 	.word	0x08007a88

08006768 <__d2b>:
 8006768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676a:	2101      	movs	r1, #1
 800676c:	0014      	movs	r4, r2
 800676e:	001e      	movs	r6, r3
 8006770:	9f08      	ldr	r7, [sp, #32]
 8006772:	f7ff fcbf 	bl	80060f4 <_Balloc>
 8006776:	1e05      	subs	r5, r0, #0
 8006778:	d105      	bne.n	8006786 <__d2b+0x1e>
 800677a:	0002      	movs	r2, r0
 800677c:	4b26      	ldr	r3, [pc, #152]	; (8006818 <__d2b+0xb0>)
 800677e:	4927      	ldr	r1, [pc, #156]	; (800681c <__d2b+0xb4>)
 8006780:	4827      	ldr	r0, [pc, #156]	; (8006820 <__d2b+0xb8>)
 8006782:	f000 fa7f 	bl	8006c84 <__assert_func>
 8006786:	0333      	lsls	r3, r6, #12
 8006788:	0076      	lsls	r6, r6, #1
 800678a:	0b1b      	lsrs	r3, r3, #12
 800678c:	0d76      	lsrs	r6, r6, #21
 800678e:	d124      	bne.n	80067da <__d2b+0x72>
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	2c00      	cmp	r4, #0
 8006794:	d027      	beq.n	80067e6 <__d2b+0x7e>
 8006796:	4668      	mov	r0, sp
 8006798:	9400      	str	r4, [sp, #0]
 800679a:	f7ff fd71 	bl	8006280 <__lo0bits>
 800679e:	9c00      	ldr	r4, [sp, #0]
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d01e      	beq.n	80067e2 <__d2b+0x7a>
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	2120      	movs	r1, #32
 80067a8:	001a      	movs	r2, r3
 80067aa:	1a09      	subs	r1, r1, r0
 80067ac:	408a      	lsls	r2, r1
 80067ae:	40c3      	lsrs	r3, r0
 80067b0:	4322      	orrs	r2, r4
 80067b2:	616a      	str	r2, [r5, #20]
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	9c01      	ldr	r4, [sp, #4]
 80067b8:	61ac      	str	r4, [r5, #24]
 80067ba:	1e63      	subs	r3, r4, #1
 80067bc:	419c      	sbcs	r4, r3
 80067be:	3401      	adds	r4, #1
 80067c0:	612c      	str	r4, [r5, #16]
 80067c2:	2e00      	cmp	r6, #0
 80067c4:	d018      	beq.n	80067f8 <__d2b+0x90>
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <__d2b+0xbc>)
 80067c8:	18f6      	adds	r6, r6, r3
 80067ca:	2335      	movs	r3, #53	; 0x35
 80067cc:	1836      	adds	r6, r6, r0
 80067ce:	1a18      	subs	r0, r3, r0
 80067d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d2:	603e      	str	r6, [r7, #0]
 80067d4:	6018      	str	r0, [r3, #0]
 80067d6:	0028      	movs	r0, r5
 80067d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067da:	2280      	movs	r2, #128	; 0x80
 80067dc:	0352      	lsls	r2, r2, #13
 80067de:	4313      	orrs	r3, r2
 80067e0:	e7d6      	b.n	8006790 <__d2b+0x28>
 80067e2:	616c      	str	r4, [r5, #20]
 80067e4:	e7e7      	b.n	80067b6 <__d2b+0x4e>
 80067e6:	a801      	add	r0, sp, #4
 80067e8:	f7ff fd4a 	bl	8006280 <__lo0bits>
 80067ec:	2401      	movs	r4, #1
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	612c      	str	r4, [r5, #16]
 80067f2:	616b      	str	r3, [r5, #20]
 80067f4:	3020      	adds	r0, #32
 80067f6:	e7e4      	b.n	80067c2 <__d2b+0x5a>
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <__d2b+0xc0>)
 80067fa:	18c0      	adds	r0, r0, r3
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <__d2b+0xc4>)
 80067fe:	6038      	str	r0, [r7, #0]
 8006800:	18e3      	adds	r3, r4, r3
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	18eb      	adds	r3, r5, r3
 8006806:	6958      	ldr	r0, [r3, #20]
 8006808:	f7ff fd20 	bl	800624c <__hi0bits>
 800680c:	0164      	lsls	r4, r4, #5
 800680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006810:	1a24      	subs	r4, r4, r0
 8006812:	601c      	str	r4, [r3, #0]
 8006814:	e7df      	b.n	80067d6 <__d2b+0x6e>
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	08007a77 	.word	0x08007a77
 800681c:	0000030a 	.word	0x0000030a
 8006820:	08007a88 	.word	0x08007a88
 8006824:	fffffbcd 	.word	0xfffffbcd
 8006828:	fffffbce 	.word	0xfffffbce
 800682c:	3fffffff 	.word	0x3fffffff

08006830 <_calloc_r>:
 8006830:	434a      	muls	r2, r1
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	0011      	movs	r1, r2
 8006836:	0015      	movs	r5, r2
 8006838:	f000 f852 	bl	80068e0 <_malloc_r>
 800683c:	1e04      	subs	r4, r0, #0
 800683e:	d003      	beq.n	8006848 <_calloc_r+0x18>
 8006840:	002a      	movs	r2, r5
 8006842:	2100      	movs	r1, #0
 8006844:	f7fe f8e8 	bl	8004a18 <memset>
 8006848:	0020      	movs	r0, r4
 800684a:	bd70      	pop	{r4, r5, r6, pc}

0800684c <_free_r>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	0005      	movs	r5, r0
 8006850:	2900      	cmp	r1, #0
 8006852:	d010      	beq.n	8006876 <_free_r+0x2a>
 8006854:	1f0c      	subs	r4, r1, #4
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	da00      	bge.n	800685e <_free_r+0x12>
 800685c:	18e4      	adds	r4, r4, r3
 800685e:	0028      	movs	r0, r5
 8006860:	f000 fa64 	bl	8006d2c <__malloc_lock>
 8006864:	4a1d      	ldr	r2, [pc, #116]	; (80068dc <_free_r+0x90>)
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <_free_r+0x2c>
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	6014      	str	r4, [r2, #0]
 8006870:	0028      	movs	r0, r5
 8006872:	f000 fa63 	bl	8006d3c <__malloc_unlock>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	42a3      	cmp	r3, r4
 800687a:	d908      	bls.n	800688e <_free_r+0x42>
 800687c:	6821      	ldr	r1, [r4, #0]
 800687e:	1860      	adds	r0, r4, r1
 8006880:	4283      	cmp	r3, r0
 8006882:	d1f3      	bne.n	800686c <_free_r+0x20>
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	1841      	adds	r1, r0, r1
 800688a:	6021      	str	r1, [r4, #0]
 800688c:	e7ee      	b.n	800686c <_free_r+0x20>
 800688e:	001a      	movs	r2, r3
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <_free_r+0x4e>
 8006896:	42a3      	cmp	r3, r4
 8006898:	d9f9      	bls.n	800688e <_free_r+0x42>
 800689a:	6811      	ldr	r1, [r2, #0]
 800689c:	1850      	adds	r0, r2, r1
 800689e:	42a0      	cmp	r0, r4
 80068a0:	d10b      	bne.n	80068ba <_free_r+0x6e>
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	1809      	adds	r1, r1, r0
 80068a6:	1850      	adds	r0, r2, r1
 80068a8:	6011      	str	r1, [r2, #0]
 80068aa:	4283      	cmp	r3, r0
 80068ac:	d1e0      	bne.n	8006870 <_free_r+0x24>
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	1841      	adds	r1, r0, r1
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	6053      	str	r3, [r2, #4]
 80068b8:	e7da      	b.n	8006870 <_free_r+0x24>
 80068ba:	42a0      	cmp	r0, r4
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x78>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d5      	b.n	8006870 <_free_r+0x24>
 80068c4:	6821      	ldr	r1, [r4, #0]
 80068c6:	1860      	adds	r0, r4, r1
 80068c8:	4283      	cmp	r3, r0
 80068ca:	d103      	bne.n	80068d4 <_free_r+0x88>
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1841      	adds	r1, r0, r1
 80068d2:	6021      	str	r1, [r4, #0]
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	6054      	str	r4, [r2, #4]
 80068d8:	e7ca      	b.n	8006870 <_free_r+0x24>
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	20000208 	.word	0x20000208

080068e0 <_malloc_r>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	2303      	movs	r3, #3
 80068e4:	1ccd      	adds	r5, r1, #3
 80068e6:	439d      	bics	r5, r3
 80068e8:	3508      	adds	r5, #8
 80068ea:	0006      	movs	r6, r0
 80068ec:	2d0c      	cmp	r5, #12
 80068ee:	d21f      	bcs.n	8006930 <_malloc_r+0x50>
 80068f0:	250c      	movs	r5, #12
 80068f2:	42a9      	cmp	r1, r5
 80068f4:	d81e      	bhi.n	8006934 <_malloc_r+0x54>
 80068f6:	0030      	movs	r0, r6
 80068f8:	f000 fa18 	bl	8006d2c <__malloc_lock>
 80068fc:	4925      	ldr	r1, [pc, #148]	; (8006994 <_malloc_r+0xb4>)
 80068fe:	680a      	ldr	r2, [r1, #0]
 8006900:	0014      	movs	r4, r2
 8006902:	2c00      	cmp	r4, #0
 8006904:	d11a      	bne.n	800693c <_malloc_r+0x5c>
 8006906:	4f24      	ldr	r7, [pc, #144]	; (8006998 <_malloc_r+0xb8>)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <_malloc_r+0x38>
 800690e:	0021      	movs	r1, r4
 8006910:	0030      	movs	r0, r6
 8006912:	f000 f9a5 	bl	8006c60 <_sbrk_r>
 8006916:	6038      	str	r0, [r7, #0]
 8006918:	0029      	movs	r1, r5
 800691a:	0030      	movs	r0, r6
 800691c:	f000 f9a0 	bl	8006c60 <_sbrk_r>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d12b      	bne.n	800697c <_malloc_r+0x9c>
 8006924:	230c      	movs	r3, #12
 8006926:	0030      	movs	r0, r6
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	f000 fa07 	bl	8006d3c <__malloc_unlock>
 800692e:	e003      	b.n	8006938 <_malloc_r+0x58>
 8006930:	2d00      	cmp	r5, #0
 8006932:	dade      	bge.n	80068f2 <_malloc_r+0x12>
 8006934:	230c      	movs	r3, #12
 8006936:	6033      	str	r3, [r6, #0]
 8006938:	2000      	movs	r0, #0
 800693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	1b5b      	subs	r3, r3, r5
 8006940:	d419      	bmi.n	8006976 <_malloc_r+0x96>
 8006942:	2b0b      	cmp	r3, #11
 8006944:	d903      	bls.n	800694e <_malloc_r+0x6e>
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	18e4      	adds	r4, r4, r3
 800694a:	6025      	str	r5, [r4, #0]
 800694c:	e003      	b.n	8006956 <_malloc_r+0x76>
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	42a2      	cmp	r2, r4
 8006952:	d10e      	bne.n	8006972 <_malloc_r+0x92>
 8006954:	600b      	str	r3, [r1, #0]
 8006956:	0030      	movs	r0, r6
 8006958:	f000 f9f0 	bl	8006d3c <__malloc_unlock>
 800695c:	0020      	movs	r0, r4
 800695e:	2207      	movs	r2, #7
 8006960:	300b      	adds	r0, #11
 8006962:	1d23      	adds	r3, r4, #4
 8006964:	4390      	bics	r0, r2
 8006966:	1ac2      	subs	r2, r0, r3
 8006968:	4298      	cmp	r0, r3
 800696a:	d0e6      	beq.n	800693a <_malloc_r+0x5a>
 800696c:	1a1b      	subs	r3, r3, r0
 800696e:	50a3      	str	r3, [r4, r2]
 8006970:	e7e3      	b.n	800693a <_malloc_r+0x5a>
 8006972:	6053      	str	r3, [r2, #4]
 8006974:	e7ef      	b.n	8006956 <_malloc_r+0x76>
 8006976:	0022      	movs	r2, r4
 8006978:	6864      	ldr	r4, [r4, #4]
 800697a:	e7c2      	b.n	8006902 <_malloc_r+0x22>
 800697c:	2303      	movs	r3, #3
 800697e:	1cc4      	adds	r4, r0, #3
 8006980:	439c      	bics	r4, r3
 8006982:	42a0      	cmp	r0, r4
 8006984:	d0e1      	beq.n	800694a <_malloc_r+0x6a>
 8006986:	1a21      	subs	r1, r4, r0
 8006988:	0030      	movs	r0, r6
 800698a:	f000 f969 	bl	8006c60 <_sbrk_r>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	d1db      	bne.n	800694a <_malloc_r+0x6a>
 8006992:	e7c7      	b.n	8006924 <_malloc_r+0x44>
 8006994:	20000208 	.word	0x20000208
 8006998:	2000020c 	.word	0x2000020c

0800699c <__ssputs_r>:
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699e:	688e      	ldr	r6, [r1, #8]
 80069a0:	b085      	sub	sp, #20
 80069a2:	0007      	movs	r7, r0
 80069a4:	000c      	movs	r4, r1
 80069a6:	9203      	str	r2, [sp, #12]
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	429e      	cmp	r6, r3
 80069ac:	d83c      	bhi.n	8006a28 <__ssputs_r+0x8c>
 80069ae:	2390      	movs	r3, #144	; 0x90
 80069b0:	898a      	ldrh	r2, [r1, #12]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	421a      	tst	r2, r3
 80069b6:	d034      	beq.n	8006a22 <__ssputs_r+0x86>
 80069b8:	2503      	movs	r5, #3
 80069ba:	6909      	ldr	r1, [r1, #16]
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	1a5b      	subs	r3, r3, r1
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	6963      	ldr	r3, [r4, #20]
 80069c4:	9802      	ldr	r0, [sp, #8]
 80069c6:	435d      	muls	r5, r3
 80069c8:	0feb      	lsrs	r3, r5, #31
 80069ca:	195d      	adds	r5, r3, r5
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	106d      	asrs	r5, r5, #1
 80069d0:	3301      	adds	r3, #1
 80069d2:	181b      	adds	r3, r3, r0
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	d900      	bls.n	80069da <__ssputs_r+0x3e>
 80069d8:	001d      	movs	r5, r3
 80069da:	0553      	lsls	r3, r2, #21
 80069dc:	d532      	bpl.n	8006a44 <__ssputs_r+0xa8>
 80069de:	0029      	movs	r1, r5
 80069e0:	0038      	movs	r0, r7
 80069e2:	f7ff ff7d 	bl	80068e0 <_malloc_r>
 80069e6:	1e06      	subs	r6, r0, #0
 80069e8:	d109      	bne.n	80069fe <__ssputs_r+0x62>
 80069ea:	230c      	movs	r3, #12
 80069ec:	603b      	str	r3, [r7, #0]
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	2001      	movs	r0, #1
 80069f2:	89a2      	ldrh	r2, [r4, #12]
 80069f4:	4240      	negs	r0, r0
 80069f6:	4313      	orrs	r3, r2
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	b005      	add	sp, #20
 80069fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fe:	9a02      	ldr	r2, [sp, #8]
 8006a00:	6921      	ldr	r1, [r4, #16]
 8006a02:	f7ff fb6e 	bl	80060e2 <memcpy>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	4a14      	ldr	r2, [pc, #80]	; (8006a5c <__ssputs_r+0xc0>)
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	2380      	movs	r3, #128	; 0x80
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	9b02      	ldr	r3, [sp, #8]
 8006a14:	6126      	str	r6, [r4, #16]
 8006a16:	18f6      	adds	r6, r6, r3
 8006a18:	6026      	str	r6, [r4, #0]
 8006a1a:	6165      	str	r5, [r4, #20]
 8006a1c:	9e01      	ldr	r6, [sp, #4]
 8006a1e:	1aed      	subs	r5, r5, r3
 8006a20:	60a5      	str	r5, [r4, #8]
 8006a22:	9b01      	ldr	r3, [sp, #4]
 8006a24:	429e      	cmp	r6, r3
 8006a26:	d900      	bls.n	8006a2a <__ssputs_r+0x8e>
 8006a28:	9e01      	ldr	r6, [sp, #4]
 8006a2a:	0032      	movs	r2, r6
 8006a2c:	9903      	ldr	r1, [sp, #12]
 8006a2e:	6820      	ldr	r0, [r4, #0]
 8006a30:	f000 f968 	bl	8006d04 <memmove>
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	2000      	movs	r0, #0
 8006a38:	1b9b      	subs	r3, r3, r6
 8006a3a:	60a3      	str	r3, [r4, #8]
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	199e      	adds	r6, r3, r6
 8006a40:	6026      	str	r6, [r4, #0]
 8006a42:	e7da      	b.n	80069fa <__ssputs_r+0x5e>
 8006a44:	002a      	movs	r2, r5
 8006a46:	0038      	movs	r0, r7
 8006a48:	f000 f980 	bl	8006d4c <_realloc_r>
 8006a4c:	1e06      	subs	r6, r0, #0
 8006a4e:	d1e0      	bne.n	8006a12 <__ssputs_r+0x76>
 8006a50:	0038      	movs	r0, r7
 8006a52:	6921      	ldr	r1, [r4, #16]
 8006a54:	f7ff fefa 	bl	800684c <_free_r>
 8006a58:	e7c7      	b.n	80069ea <__ssputs_r+0x4e>
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	fffffb7f 	.word	0xfffffb7f

08006a60 <_svfiprintf_r>:
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	b0a1      	sub	sp, #132	; 0x84
 8006a64:	9003      	str	r0, [sp, #12]
 8006a66:	001d      	movs	r5, r3
 8006a68:	898b      	ldrh	r3, [r1, #12]
 8006a6a:	000f      	movs	r7, r1
 8006a6c:	0016      	movs	r6, r2
 8006a6e:	061b      	lsls	r3, r3, #24
 8006a70:	d511      	bpl.n	8006a96 <_svfiprintf_r+0x36>
 8006a72:	690b      	ldr	r3, [r1, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10e      	bne.n	8006a96 <_svfiprintf_r+0x36>
 8006a78:	2140      	movs	r1, #64	; 0x40
 8006a7a:	f7ff ff31 	bl	80068e0 <_malloc_r>
 8006a7e:	6038      	str	r0, [r7, #0]
 8006a80:	6138      	str	r0, [r7, #16]
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d105      	bne.n	8006a92 <_svfiprintf_r+0x32>
 8006a86:	230c      	movs	r3, #12
 8006a88:	9a03      	ldr	r2, [sp, #12]
 8006a8a:	3801      	subs	r0, #1
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	b021      	add	sp, #132	; 0x84
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	2300      	movs	r3, #0
 8006a98:	ac08      	add	r4, sp, #32
 8006a9a:	6163      	str	r3, [r4, #20]
 8006a9c:	3320      	adds	r3, #32
 8006a9e:	7663      	strb	r3, [r4, #25]
 8006aa0:	3310      	adds	r3, #16
 8006aa2:	76a3      	strb	r3, [r4, #26]
 8006aa4:	9507      	str	r5, [sp, #28]
 8006aa6:	0035      	movs	r5, r6
 8006aa8:	782b      	ldrb	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <_svfiprintf_r+0x52>
 8006aae:	2b25      	cmp	r3, #37	; 0x25
 8006ab0:	d147      	bne.n	8006b42 <_svfiprintf_r+0xe2>
 8006ab2:	1bab      	subs	r3, r5, r6
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	42b5      	cmp	r5, r6
 8006ab8:	d00c      	beq.n	8006ad4 <_svfiprintf_r+0x74>
 8006aba:	0032      	movs	r2, r6
 8006abc:	0039      	movs	r1, r7
 8006abe:	9803      	ldr	r0, [sp, #12]
 8006ac0:	f7ff ff6c 	bl	800699c <__ssputs_r>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d100      	bne.n	8006aca <_svfiprintf_r+0x6a>
 8006ac8:	e0ae      	b.n	8006c28 <_svfiprintf_r+0x1c8>
 8006aca:	6962      	ldr	r2, [r4, #20]
 8006acc:	9b05      	ldr	r3, [sp, #20]
 8006ace:	4694      	mov	ip, r2
 8006ad0:	4463      	add	r3, ip
 8006ad2:	6163      	str	r3, [r4, #20]
 8006ad4:	782b      	ldrb	r3, [r5, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d100      	bne.n	8006adc <_svfiprintf_r+0x7c>
 8006ada:	e0a5      	b.n	8006c28 <_svfiprintf_r+0x1c8>
 8006adc:	2201      	movs	r2, #1
 8006ade:	2300      	movs	r3, #0
 8006ae0:	4252      	negs	r2, r2
 8006ae2:	6062      	str	r2, [r4, #4]
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	3254      	adds	r2, #84	; 0x54
 8006ae8:	1852      	adds	r2, r2, r1
 8006aea:	1c6e      	adds	r6, r5, #1
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	60e3      	str	r3, [r4, #12]
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	7013      	strb	r3, [r2, #0]
 8006af4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006af6:	2205      	movs	r2, #5
 8006af8:	7831      	ldrb	r1, [r6, #0]
 8006afa:	4854      	ldr	r0, [pc, #336]	; (8006c4c <_svfiprintf_r+0x1ec>)
 8006afc:	f7ff fae6 	bl	80060cc <memchr>
 8006b00:	1c75      	adds	r5, r6, #1
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d11f      	bne.n	8006b46 <_svfiprintf_r+0xe6>
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	06d3      	lsls	r3, r2, #27
 8006b0a:	d504      	bpl.n	8006b16 <_svfiprintf_r+0xb6>
 8006b0c:	2353      	movs	r3, #83	; 0x53
 8006b0e:	a904      	add	r1, sp, #16
 8006b10:	185b      	adds	r3, r3, r1
 8006b12:	2120      	movs	r1, #32
 8006b14:	7019      	strb	r1, [r3, #0]
 8006b16:	0713      	lsls	r3, r2, #28
 8006b18:	d504      	bpl.n	8006b24 <_svfiprintf_r+0xc4>
 8006b1a:	2353      	movs	r3, #83	; 0x53
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	185b      	adds	r3, r3, r1
 8006b20:	212b      	movs	r1, #43	; 0x2b
 8006b22:	7019      	strb	r1, [r3, #0]
 8006b24:	7833      	ldrb	r3, [r6, #0]
 8006b26:	2b2a      	cmp	r3, #42	; 0x2a
 8006b28:	d016      	beq.n	8006b58 <_svfiprintf_r+0xf8>
 8006b2a:	0035      	movs	r5, r6
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	200a      	movs	r0, #10
 8006b30:	68e3      	ldr	r3, [r4, #12]
 8006b32:	782a      	ldrb	r2, [r5, #0]
 8006b34:	1c6e      	adds	r6, r5, #1
 8006b36:	3a30      	subs	r2, #48	; 0x30
 8006b38:	2a09      	cmp	r2, #9
 8006b3a:	d94e      	bls.n	8006bda <_svfiprintf_r+0x17a>
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d111      	bne.n	8006b64 <_svfiprintf_r+0x104>
 8006b40:	e017      	b.n	8006b72 <_svfiprintf_r+0x112>
 8006b42:	3501      	adds	r5, #1
 8006b44:	e7b0      	b.n	8006aa8 <_svfiprintf_r+0x48>
 8006b46:	4b41      	ldr	r3, [pc, #260]	; (8006c4c <_svfiprintf_r+0x1ec>)
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	1ac0      	subs	r0, r0, r3
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4083      	lsls	r3, r0
 8006b50:	4313      	orrs	r3, r2
 8006b52:	002e      	movs	r6, r5
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	e7ce      	b.n	8006af6 <_svfiprintf_r+0x96>
 8006b58:	9b07      	ldr	r3, [sp, #28]
 8006b5a:	1d19      	adds	r1, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	9107      	str	r1, [sp, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	db01      	blt.n	8006b68 <_svfiprintf_r+0x108>
 8006b64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b66:	e004      	b.n	8006b72 <_svfiprintf_r+0x112>
 8006b68:	425b      	negs	r3, r3
 8006b6a:	60e3      	str	r3, [r4, #12]
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	782b      	ldrb	r3, [r5, #0]
 8006b74:	2b2e      	cmp	r3, #46	; 0x2e
 8006b76:	d10a      	bne.n	8006b8e <_svfiprintf_r+0x12e>
 8006b78:	786b      	ldrb	r3, [r5, #1]
 8006b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7c:	d135      	bne.n	8006bea <_svfiprintf_r+0x18a>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	3502      	adds	r5, #2
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	9207      	str	r2, [sp, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db2b      	blt.n	8006be4 <_svfiprintf_r+0x184>
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	4e30      	ldr	r6, [pc, #192]	; (8006c50 <_svfiprintf_r+0x1f0>)
 8006b90:	2203      	movs	r2, #3
 8006b92:	0030      	movs	r0, r6
 8006b94:	7829      	ldrb	r1, [r5, #0]
 8006b96:	f7ff fa99 	bl	80060cc <memchr>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d006      	beq.n	8006bac <_svfiprintf_r+0x14c>
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	1b80      	subs	r0, r0, r6
 8006ba2:	4083      	lsls	r3, r0
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	3501      	adds	r5, #1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	7829      	ldrb	r1, [r5, #0]
 8006bae:	2206      	movs	r2, #6
 8006bb0:	4828      	ldr	r0, [pc, #160]	; (8006c54 <_svfiprintf_r+0x1f4>)
 8006bb2:	1c6e      	adds	r6, r5, #1
 8006bb4:	7621      	strb	r1, [r4, #24]
 8006bb6:	f7ff fa89 	bl	80060cc <memchr>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d03c      	beq.n	8006c38 <_svfiprintf_r+0x1d8>
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <_svfiprintf_r+0x1f8>)
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d125      	bne.n	8006c10 <_svfiprintf_r+0x1b0>
 8006bc4:	2207      	movs	r2, #7
 8006bc6:	9b07      	ldr	r3, [sp, #28]
 8006bc8:	3307      	adds	r3, #7
 8006bca:	4393      	bics	r3, r2
 8006bcc:	3308      	adds	r3, #8
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	6963      	ldr	r3, [r4, #20]
 8006bd2:	9a04      	ldr	r2, [sp, #16]
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	6163      	str	r3, [r4, #20]
 8006bd8:	e765      	b.n	8006aa6 <_svfiprintf_r+0x46>
 8006bda:	4343      	muls	r3, r0
 8006bdc:	0035      	movs	r5, r6
 8006bde:	2101      	movs	r1, #1
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	e7a6      	b.n	8006b32 <_svfiprintf_r+0xd2>
 8006be4:	2301      	movs	r3, #1
 8006be6:	425b      	negs	r3, r3
 8006be8:	e7d0      	b.n	8006b8c <_svfiprintf_r+0x12c>
 8006bea:	2300      	movs	r3, #0
 8006bec:	200a      	movs	r0, #10
 8006bee:	001a      	movs	r2, r3
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	7829      	ldrb	r1, [r5, #0]
 8006bf6:	1c6e      	adds	r6, r5, #1
 8006bf8:	3930      	subs	r1, #48	; 0x30
 8006bfa:	2909      	cmp	r1, #9
 8006bfc:	d903      	bls.n	8006c06 <_svfiprintf_r+0x1a6>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0c5      	beq.n	8006b8e <_svfiprintf_r+0x12e>
 8006c02:	9209      	str	r2, [sp, #36]	; 0x24
 8006c04:	e7c3      	b.n	8006b8e <_svfiprintf_r+0x12e>
 8006c06:	4342      	muls	r2, r0
 8006c08:	0035      	movs	r5, r6
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	1852      	adds	r2, r2, r1
 8006c0e:	e7f1      	b.n	8006bf4 <_svfiprintf_r+0x194>
 8006c10:	ab07      	add	r3, sp, #28
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	003a      	movs	r2, r7
 8006c16:	0021      	movs	r1, r4
 8006c18:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <_svfiprintf_r+0x1fc>)
 8006c1a:	9803      	ldr	r0, [sp, #12]
 8006c1c:	f7fd ffae 	bl	8004b7c <_printf_float>
 8006c20:	9004      	str	r0, [sp, #16]
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	3301      	adds	r3, #1
 8006c26:	d1d3      	bne.n	8006bd0 <_svfiprintf_r+0x170>
 8006c28:	89bb      	ldrh	r3, [r7, #12]
 8006c2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c2c:	065b      	lsls	r3, r3, #25
 8006c2e:	d400      	bmi.n	8006c32 <_svfiprintf_r+0x1d2>
 8006c30:	e72d      	b.n	8006a8e <_svfiprintf_r+0x2e>
 8006c32:	2001      	movs	r0, #1
 8006c34:	4240      	negs	r0, r0
 8006c36:	e72a      	b.n	8006a8e <_svfiprintf_r+0x2e>
 8006c38:	ab07      	add	r3, sp, #28
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	003a      	movs	r2, r7
 8006c3e:	0021      	movs	r1, r4
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <_svfiprintf_r+0x1fc>)
 8006c42:	9803      	ldr	r0, [sp, #12]
 8006c44:	f7fe fa58 	bl	80050f8 <_printf_i>
 8006c48:	e7ea      	b.n	8006c20 <_svfiprintf_r+0x1c0>
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	08007be4 	.word	0x08007be4
 8006c50:	08007bea 	.word	0x08007bea
 8006c54:	08007bee 	.word	0x08007bee
 8006c58:	08004b7d 	.word	0x08004b7d
 8006c5c:	0800699d 	.word	0x0800699d

08006c60 <_sbrk_r>:
 8006c60:	2300      	movs	r3, #0
 8006c62:	b570      	push	{r4, r5, r6, lr}
 8006c64:	4d06      	ldr	r5, [pc, #24]	; (8006c80 <_sbrk_r+0x20>)
 8006c66:	0004      	movs	r4, r0
 8006c68:	0008      	movs	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fc f890 	bl	8002d90 <_sbrk>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d103      	bne.n	8006c7c <_sbrk_r+0x1c>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d000      	beq.n	8006c7c <_sbrk_r+0x1c>
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	2000030c 	.word	0x2000030c

08006c84 <__assert_func>:
 8006c84:	b530      	push	{r4, r5, lr}
 8006c86:	0014      	movs	r4, r2
 8006c88:	001a      	movs	r2, r3
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <__assert_func+0x2c>)
 8006c8c:	0005      	movs	r5, r0
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	b085      	sub	sp, #20
 8006c92:	68d8      	ldr	r0, [r3, #12]
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <__assert_func+0x30>)
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d101      	bne.n	8006c9e <__assert_func+0x1a>
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <__assert_func+0x34>)
 8006c9c:	001c      	movs	r4, r3
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	9100      	str	r1, [sp, #0]
 8006ca2:	002b      	movs	r3, r5
 8006ca4:	4905      	ldr	r1, [pc, #20]	; (8006cbc <__assert_func+0x38>)
 8006ca6:	9402      	str	r4, [sp, #8]
 8006ca8:	f000 f80a 	bl	8006cc0 <fiprintf>
 8006cac:	f000 fab2 	bl	8007214 <abort>
 8006cb0:	20000010 	.word	0x20000010
 8006cb4:	08007bf5 	.word	0x08007bf5
 8006cb8:	08007c30 	.word	0x08007c30
 8006cbc:	08007c02 	.word	0x08007c02

08006cc0 <fiprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	b503      	push	{r0, r1, lr}
 8006cc4:	0001      	movs	r1, r0
 8006cc6:	ab03      	add	r3, sp, #12
 8006cc8:	4804      	ldr	r0, [pc, #16]	; (8006cdc <fiprintf+0x1c>)
 8006cca:	cb04      	ldmia	r3!, {r2}
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f000 f88a 	bl	8006de8 <_vfiprintf_r>
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	b003      	add	sp, #12
 8006cda:	4718      	bx	r3
 8006cdc:	20000010 	.word	0x20000010

08006ce0 <__ascii_mbtowc>:
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	2900      	cmp	r1, #0
 8006ce4:	d100      	bne.n	8006ce8 <__ascii_mbtowc+0x8>
 8006ce6:	a901      	add	r1, sp, #4
 8006ce8:	1e10      	subs	r0, r2, #0
 8006cea:	d006      	beq.n	8006cfa <__ascii_mbtowc+0x1a>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d006      	beq.n	8006cfe <__ascii_mbtowc+0x1e>
 8006cf0:	7813      	ldrb	r3, [r2, #0]
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	7810      	ldrb	r0, [r2, #0]
 8006cf6:	1e43      	subs	r3, r0, #1
 8006cf8:	4198      	sbcs	r0, r3
 8006cfa:	b002      	add	sp, #8
 8006cfc:	4770      	bx	lr
 8006cfe:	2002      	movs	r0, #2
 8006d00:	4240      	negs	r0, r0
 8006d02:	e7fa      	b.n	8006cfa <__ascii_mbtowc+0x1a>

08006d04 <memmove>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4288      	cmp	r0, r1
 8006d08:	d902      	bls.n	8006d10 <memmove+0xc>
 8006d0a:	188b      	adds	r3, r1, r2
 8006d0c:	4298      	cmp	r0, r3
 8006d0e:	d303      	bcc.n	8006d18 <memmove+0x14>
 8006d10:	2300      	movs	r3, #0
 8006d12:	e007      	b.n	8006d24 <memmove+0x20>
 8006d14:	5c8b      	ldrb	r3, [r1, r2]
 8006d16:	5483      	strb	r3, [r0, r2]
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	d2fb      	bcs.n	8006d14 <memmove+0x10>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	5ccc      	ldrb	r4, [r1, r3]
 8006d20:	54c4      	strb	r4, [r0, r3]
 8006d22:	3301      	adds	r3, #1
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1fa      	bne.n	8006d1e <memmove+0x1a>
 8006d28:	e7f8      	b.n	8006d1c <memmove+0x18>
	...

08006d2c <__malloc_lock>:
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	4802      	ldr	r0, [pc, #8]	; (8006d38 <__malloc_lock+0xc>)
 8006d30:	f000 fc47 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8006d34:	bd10      	pop	{r4, pc}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	20000314 	.word	0x20000314

08006d3c <__malloc_unlock>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4802      	ldr	r0, [pc, #8]	; (8006d48 <__malloc_unlock+0xc>)
 8006d40:	f000 fc40 	bl	80075c4 <__retarget_lock_release_recursive>
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	20000314 	.word	0x20000314

08006d4c <_realloc_r>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	0007      	movs	r7, r0
 8006d50:	000d      	movs	r5, r1
 8006d52:	0016      	movs	r6, r2
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d105      	bne.n	8006d64 <_realloc_r+0x18>
 8006d58:	0011      	movs	r1, r2
 8006d5a:	f7ff fdc1 	bl	80068e0 <_malloc_r>
 8006d5e:	0004      	movs	r4, r0
 8006d60:	0020      	movs	r0, r4
 8006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	d103      	bne.n	8006d70 <_realloc_r+0x24>
 8006d68:	f7ff fd70 	bl	800684c <_free_r>
 8006d6c:	0034      	movs	r4, r6
 8006d6e:	e7f7      	b.n	8006d60 <_realloc_r+0x14>
 8006d70:	f000 fc96 	bl	80076a0 <_malloc_usable_size_r>
 8006d74:	002c      	movs	r4, r5
 8006d76:	42b0      	cmp	r0, r6
 8006d78:	d2f2      	bcs.n	8006d60 <_realloc_r+0x14>
 8006d7a:	0031      	movs	r1, r6
 8006d7c:	0038      	movs	r0, r7
 8006d7e:	f7ff fdaf 	bl	80068e0 <_malloc_r>
 8006d82:	1e04      	subs	r4, r0, #0
 8006d84:	d0ec      	beq.n	8006d60 <_realloc_r+0x14>
 8006d86:	0029      	movs	r1, r5
 8006d88:	0032      	movs	r2, r6
 8006d8a:	f7ff f9aa 	bl	80060e2 <memcpy>
 8006d8e:	0029      	movs	r1, r5
 8006d90:	0038      	movs	r0, r7
 8006d92:	f7ff fd5b 	bl	800684c <_free_r>
 8006d96:	e7e3      	b.n	8006d60 <_realloc_r+0x14>

08006d98 <__sfputc_r>:
 8006d98:	6893      	ldr	r3, [r2, #8]
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	6093      	str	r3, [r2, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da04      	bge.n	8006dae <__sfputc_r+0x16>
 8006da4:	6994      	ldr	r4, [r2, #24]
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	db07      	blt.n	8006dba <__sfputc_r+0x22>
 8006daa:	290a      	cmp	r1, #10
 8006dac:	d005      	beq.n	8006dba <__sfputc_r+0x22>
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	1c58      	adds	r0, r3, #1
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	7019      	strb	r1, [r3, #0]
 8006db6:	0008      	movs	r0, r1
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	f000 f94f 	bl	800705c <__swbuf_r>
 8006dbe:	0001      	movs	r1, r0
 8006dc0:	e7f9      	b.n	8006db6 <__sfputc_r+0x1e>

08006dc2 <__sfputs_r>:
 8006dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc4:	0006      	movs	r6, r0
 8006dc6:	000f      	movs	r7, r1
 8006dc8:	0014      	movs	r4, r2
 8006dca:	18d5      	adds	r5, r2, r3
 8006dcc:	42ac      	cmp	r4, r5
 8006dce:	d101      	bne.n	8006dd4 <__sfputs_r+0x12>
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	e007      	b.n	8006de4 <__sfputs_r+0x22>
 8006dd4:	7821      	ldrb	r1, [r4, #0]
 8006dd6:	003a      	movs	r2, r7
 8006dd8:	0030      	movs	r0, r6
 8006dda:	f7ff ffdd 	bl	8006d98 <__sfputc_r>
 8006dde:	3401      	adds	r4, #1
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d1f3      	bne.n	8006dcc <__sfputs_r+0xa>
 8006de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006de8 <_vfiprintf_r>:
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b0a1      	sub	sp, #132	; 0x84
 8006dec:	0006      	movs	r6, r0
 8006dee:	000c      	movs	r4, r1
 8006df0:	001f      	movs	r7, r3
 8006df2:	9203      	str	r2, [sp, #12]
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d004      	beq.n	8006e02 <_vfiprintf_r+0x1a>
 8006df8:	6983      	ldr	r3, [r0, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <_vfiprintf_r+0x1a>
 8006dfe:	f000 fb3f 	bl	8007480 <__sinit>
 8006e02:	4b8e      	ldr	r3, [pc, #568]	; (800703c <_vfiprintf_r+0x254>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	d11c      	bne.n	8006e42 <_vfiprintf_r+0x5a>
 8006e08:	6874      	ldr	r4, [r6, #4]
 8006e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e0c:	07db      	lsls	r3, r3, #31
 8006e0e:	d405      	bmi.n	8006e1c <_vfiprintf_r+0x34>
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	059b      	lsls	r3, r3, #22
 8006e14:	d402      	bmi.n	8006e1c <_vfiprintf_r+0x34>
 8006e16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e18:	f000 fbd3 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	071b      	lsls	r3, r3, #28
 8006e20:	d502      	bpl.n	8006e28 <_vfiprintf_r+0x40>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11d      	bne.n	8006e64 <_vfiprintf_r+0x7c>
 8006e28:	0021      	movs	r1, r4
 8006e2a:	0030      	movs	r0, r6
 8006e2c:	f000 f97a 	bl	8007124 <__swsetup_r>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d017      	beq.n	8006e64 <_vfiprintf_r+0x7c>
 8006e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e36:	07db      	lsls	r3, r3, #31
 8006e38:	d50d      	bpl.n	8006e56 <_vfiprintf_r+0x6e>
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	4240      	negs	r0, r0
 8006e3e:	b021      	add	sp, #132	; 0x84
 8006e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e42:	4b7f      	ldr	r3, [pc, #508]	; (8007040 <_vfiprintf_r+0x258>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d101      	bne.n	8006e4c <_vfiprintf_r+0x64>
 8006e48:	68b4      	ldr	r4, [r6, #8]
 8006e4a:	e7de      	b.n	8006e0a <_vfiprintf_r+0x22>
 8006e4c:	4b7d      	ldr	r3, [pc, #500]	; (8007044 <_vfiprintf_r+0x25c>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d1db      	bne.n	8006e0a <_vfiprintf_r+0x22>
 8006e52:	68f4      	ldr	r4, [r6, #12]
 8006e54:	e7d9      	b.n	8006e0a <_vfiprintf_r+0x22>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	059b      	lsls	r3, r3, #22
 8006e5a:	d4ee      	bmi.n	8006e3a <_vfiprintf_r+0x52>
 8006e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5e:	f000 fbb1 	bl	80075c4 <__retarget_lock_release_recursive>
 8006e62:	e7ea      	b.n	8006e3a <_vfiprintf_r+0x52>
 8006e64:	2300      	movs	r3, #0
 8006e66:	ad08      	add	r5, sp, #32
 8006e68:	616b      	str	r3, [r5, #20]
 8006e6a:	3320      	adds	r3, #32
 8006e6c:	766b      	strb	r3, [r5, #25]
 8006e6e:	3310      	adds	r3, #16
 8006e70:	76ab      	strb	r3, [r5, #26]
 8006e72:	9707      	str	r7, [sp, #28]
 8006e74:	9f03      	ldr	r7, [sp, #12]
 8006e76:	783b      	ldrb	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <_vfiprintf_r+0x98>
 8006e7c:	2b25      	cmp	r3, #37	; 0x25
 8006e7e:	d14e      	bne.n	8006f1e <_vfiprintf_r+0x136>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	1afb      	subs	r3, r7, r3
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	429f      	cmp	r7, r3
 8006e8a:	d00d      	beq.n	8006ea8 <_vfiprintf_r+0xc0>
 8006e8c:	9b05      	ldr	r3, [sp, #20]
 8006e8e:	0021      	movs	r1, r4
 8006e90:	0030      	movs	r0, r6
 8006e92:	9a03      	ldr	r2, [sp, #12]
 8006e94:	f7ff ff95 	bl	8006dc2 <__sfputs_r>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d100      	bne.n	8006e9e <_vfiprintf_r+0xb6>
 8006e9c:	e0b5      	b.n	800700a <_vfiprintf_r+0x222>
 8006e9e:	696a      	ldr	r2, [r5, #20]
 8006ea0:	9b05      	ldr	r3, [sp, #20]
 8006ea2:	4694      	mov	ip, r2
 8006ea4:	4463      	add	r3, ip
 8006ea6:	616b      	str	r3, [r5, #20]
 8006ea8:	783b      	ldrb	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d100      	bne.n	8006eb0 <_vfiprintf_r+0xc8>
 8006eae:	e0ac      	b.n	800700a <_vfiprintf_r+0x222>
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	1c7b      	adds	r3, r7, #1
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4252      	negs	r2, r2
 8006eba:	606a      	str	r2, [r5, #4]
 8006ebc:	a904      	add	r1, sp, #16
 8006ebe:	3254      	adds	r2, #84	; 0x54
 8006ec0:	1852      	adds	r2, r2, r1
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	60eb      	str	r3, [r5, #12]
 8006ec6:	60ab      	str	r3, [r5, #8]
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	65ab      	str	r3, [r5, #88]	; 0x58
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	2205      	movs	r2, #5
 8006ed0:	7819      	ldrb	r1, [r3, #0]
 8006ed2:	485d      	ldr	r0, [pc, #372]	; (8007048 <_vfiprintf_r+0x260>)
 8006ed4:	f7ff f8fa 	bl	80060cc <memchr>
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	1c5f      	adds	r7, r3, #1
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d120      	bne.n	8006f22 <_vfiprintf_r+0x13a>
 8006ee0:	682a      	ldr	r2, [r5, #0]
 8006ee2:	06d3      	lsls	r3, r2, #27
 8006ee4:	d504      	bpl.n	8006ef0 <_vfiprintf_r+0x108>
 8006ee6:	2353      	movs	r3, #83	; 0x53
 8006ee8:	a904      	add	r1, sp, #16
 8006eea:	185b      	adds	r3, r3, r1
 8006eec:	2120      	movs	r1, #32
 8006eee:	7019      	strb	r1, [r3, #0]
 8006ef0:	0713      	lsls	r3, r2, #28
 8006ef2:	d504      	bpl.n	8006efe <_vfiprintf_r+0x116>
 8006ef4:	2353      	movs	r3, #83	; 0x53
 8006ef6:	a904      	add	r1, sp, #16
 8006ef8:	185b      	adds	r3, r3, r1
 8006efa:	212b      	movs	r1, #43	; 0x2b
 8006efc:	7019      	strb	r1, [r3, #0]
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b2a      	cmp	r3, #42	; 0x2a
 8006f04:	d016      	beq.n	8006f34 <_vfiprintf_r+0x14c>
 8006f06:	2100      	movs	r1, #0
 8006f08:	68eb      	ldr	r3, [r5, #12]
 8006f0a:	9f03      	ldr	r7, [sp, #12]
 8006f0c:	783a      	ldrb	r2, [r7, #0]
 8006f0e:	1c78      	adds	r0, r7, #1
 8006f10:	3a30      	subs	r2, #48	; 0x30
 8006f12:	4684      	mov	ip, r0
 8006f14:	2a09      	cmp	r2, #9
 8006f16:	d94f      	bls.n	8006fb8 <_vfiprintf_r+0x1d0>
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d111      	bne.n	8006f40 <_vfiprintf_r+0x158>
 8006f1c:	e017      	b.n	8006f4e <_vfiprintf_r+0x166>
 8006f1e:	3701      	adds	r7, #1
 8006f20:	e7a9      	b.n	8006e76 <_vfiprintf_r+0x8e>
 8006f22:	4b49      	ldr	r3, [pc, #292]	; (8007048 <_vfiprintf_r+0x260>)
 8006f24:	682a      	ldr	r2, [r5, #0]
 8006f26:	1ac0      	subs	r0, r0, r3
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4083      	lsls	r3, r0
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	9703      	str	r7, [sp, #12]
 8006f32:	e7cb      	b.n	8006ecc <_vfiprintf_r+0xe4>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	1d19      	adds	r1, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db01      	blt.n	8006f44 <_vfiprintf_r+0x15c>
 8006f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f42:	e004      	b.n	8006f4e <_vfiprintf_r+0x166>
 8006f44:	425b      	negs	r3, r3
 8006f46:	60eb      	str	r3, [r5, #12]
 8006f48:	2302      	movs	r3, #2
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	783b      	ldrb	r3, [r7, #0]
 8006f50:	2b2e      	cmp	r3, #46	; 0x2e
 8006f52:	d10a      	bne.n	8006f6a <_vfiprintf_r+0x182>
 8006f54:	787b      	ldrb	r3, [r7, #1]
 8006f56:	2b2a      	cmp	r3, #42	; 0x2a
 8006f58:	d137      	bne.n	8006fca <_vfiprintf_r+0x1e2>
 8006f5a:	9b07      	ldr	r3, [sp, #28]
 8006f5c:	3702      	adds	r7, #2
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	9207      	str	r2, [sp, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	db2d      	blt.n	8006fc4 <_vfiprintf_r+0x1dc>
 8006f68:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	7839      	ldrb	r1, [r7, #0]
 8006f6e:	4837      	ldr	r0, [pc, #220]	; (800704c <_vfiprintf_r+0x264>)
 8006f70:	f7ff f8ac 	bl	80060cc <memchr>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d007      	beq.n	8006f88 <_vfiprintf_r+0x1a0>
 8006f78:	4b34      	ldr	r3, [pc, #208]	; (800704c <_vfiprintf_r+0x264>)
 8006f7a:	682a      	ldr	r2, [r5, #0]
 8006f7c:	1ac0      	subs	r0, r0, r3
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	4083      	lsls	r3, r0
 8006f82:	4313      	orrs	r3, r2
 8006f84:	3701      	adds	r7, #1
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	7839      	ldrb	r1, [r7, #0]
 8006f8a:	1c7b      	adds	r3, r7, #1
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	4830      	ldr	r0, [pc, #192]	; (8007050 <_vfiprintf_r+0x268>)
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	7629      	strb	r1, [r5, #24]
 8006f94:	f7ff f89a 	bl	80060cc <memchr>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d045      	beq.n	8007028 <_vfiprintf_r+0x240>
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <_vfiprintf_r+0x26c>)
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d127      	bne.n	8006ff2 <_vfiprintf_r+0x20a>
 8006fa2:	2207      	movs	r2, #7
 8006fa4:	9b07      	ldr	r3, [sp, #28]
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	4393      	bics	r3, r2
 8006faa:	3308      	adds	r3, #8
 8006fac:	9307      	str	r3, [sp, #28]
 8006fae:	696b      	ldr	r3, [r5, #20]
 8006fb0:	9a04      	ldr	r2, [sp, #16]
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	616b      	str	r3, [r5, #20]
 8006fb6:	e75d      	b.n	8006e74 <_vfiprintf_r+0x8c>
 8006fb8:	210a      	movs	r1, #10
 8006fba:	434b      	muls	r3, r1
 8006fbc:	4667      	mov	r7, ip
 8006fbe:	189b      	adds	r3, r3, r2
 8006fc0:	3909      	subs	r1, #9
 8006fc2:	e7a3      	b.n	8006f0c <_vfiprintf_r+0x124>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	425b      	negs	r3, r3
 8006fc8:	e7ce      	b.n	8006f68 <_vfiprintf_r+0x180>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	001a      	movs	r2, r3
 8006fce:	3701      	adds	r7, #1
 8006fd0:	606b      	str	r3, [r5, #4]
 8006fd2:	7839      	ldrb	r1, [r7, #0]
 8006fd4:	1c78      	adds	r0, r7, #1
 8006fd6:	3930      	subs	r1, #48	; 0x30
 8006fd8:	4684      	mov	ip, r0
 8006fda:	2909      	cmp	r1, #9
 8006fdc:	d903      	bls.n	8006fe6 <_vfiprintf_r+0x1fe>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c3      	beq.n	8006f6a <_vfiprintf_r+0x182>
 8006fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe4:	e7c1      	b.n	8006f6a <_vfiprintf_r+0x182>
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	435a      	muls	r2, r3
 8006fea:	4667      	mov	r7, ip
 8006fec:	1852      	adds	r2, r2, r1
 8006fee:	3b09      	subs	r3, #9
 8006ff0:	e7ef      	b.n	8006fd2 <_vfiprintf_r+0x1ea>
 8006ff2:	ab07      	add	r3, sp, #28
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	0022      	movs	r2, r4
 8006ff8:	0029      	movs	r1, r5
 8006ffa:	0030      	movs	r0, r6
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <_vfiprintf_r+0x270>)
 8006ffe:	f7fd fdbd 	bl	8004b7c <_printf_float>
 8007002:	9004      	str	r0, [sp, #16]
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	3301      	adds	r3, #1
 8007008:	d1d1      	bne.n	8006fae <_vfiprintf_r+0x1c6>
 800700a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800700c:	07db      	lsls	r3, r3, #31
 800700e:	d405      	bmi.n	800701c <_vfiprintf_r+0x234>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	059b      	lsls	r3, r3, #22
 8007014:	d402      	bmi.n	800701c <_vfiprintf_r+0x234>
 8007016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007018:	f000 fad4 	bl	80075c4 <__retarget_lock_release_recursive>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	d500      	bpl.n	8007024 <_vfiprintf_r+0x23c>
 8007022:	e70a      	b.n	8006e3a <_vfiprintf_r+0x52>
 8007024:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007026:	e70a      	b.n	8006e3e <_vfiprintf_r+0x56>
 8007028:	ab07      	add	r3, sp, #28
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	0022      	movs	r2, r4
 800702e:	0029      	movs	r1, r5
 8007030:	0030      	movs	r0, r6
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <_vfiprintf_r+0x270>)
 8007034:	f7fe f860 	bl	80050f8 <_printf_i>
 8007038:	e7e3      	b.n	8007002 <_vfiprintf_r+0x21a>
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	08007d5c 	.word	0x08007d5c
 8007040:	08007d7c 	.word	0x08007d7c
 8007044:	08007d3c 	.word	0x08007d3c
 8007048:	08007be4 	.word	0x08007be4
 800704c:	08007bea 	.word	0x08007bea
 8007050:	08007bee 	.word	0x08007bee
 8007054:	08004b7d 	.word	0x08004b7d
 8007058:	08006dc3 	.word	0x08006dc3

0800705c <__swbuf_r>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	0005      	movs	r5, r0
 8007060:	000e      	movs	r6, r1
 8007062:	0014      	movs	r4, r2
 8007064:	2800      	cmp	r0, #0
 8007066:	d004      	beq.n	8007072 <__swbuf_r+0x16>
 8007068:	6983      	ldr	r3, [r0, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <__swbuf_r+0x16>
 800706e:	f000 fa07 	bl	8007480 <__sinit>
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <__swbuf_r+0xa0>)
 8007074:	429c      	cmp	r4, r3
 8007076:	d12e      	bne.n	80070d6 <__swbuf_r+0x7a>
 8007078:	686c      	ldr	r4, [r5, #4]
 800707a:	69a3      	ldr	r3, [r4, #24]
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	071b      	lsls	r3, r3, #28
 8007082:	d532      	bpl.n	80070ea <__swbuf_r+0x8e>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02f      	beq.n	80070ea <__swbuf_r+0x8e>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6922      	ldr	r2, [r4, #16]
 800708e:	b2f7      	uxtb	r7, r6
 8007090:	1a98      	subs	r0, r3, r2
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	b2f6      	uxtb	r6, r6
 8007096:	4283      	cmp	r3, r0
 8007098:	dc05      	bgt.n	80070a6 <__swbuf_r+0x4a>
 800709a:	0021      	movs	r1, r4
 800709c:	0028      	movs	r0, r5
 800709e:	f000 f94d 	bl	800733c <_fflush_r>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d127      	bne.n	80070f6 <__swbuf_r+0x9a>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	3001      	adds	r0, #1
 80070aa:	3b01      	subs	r3, #1
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	6022      	str	r2, [r4, #0]
 80070b4:	701f      	strb	r7, [r3, #0]
 80070b6:	6963      	ldr	r3, [r4, #20]
 80070b8:	4283      	cmp	r3, r0
 80070ba:	d004      	beq.n	80070c6 <__swbuf_r+0x6a>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d507      	bpl.n	80070d2 <__swbuf_r+0x76>
 80070c2:	2e0a      	cmp	r6, #10
 80070c4:	d105      	bne.n	80070d2 <__swbuf_r+0x76>
 80070c6:	0021      	movs	r1, r4
 80070c8:	0028      	movs	r0, r5
 80070ca:	f000 f937 	bl	800733c <_fflush_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d111      	bne.n	80070f6 <__swbuf_r+0x9a>
 80070d2:	0030      	movs	r0, r6
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <__swbuf_r+0xa4>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d101      	bne.n	80070e0 <__swbuf_r+0x84>
 80070dc:	68ac      	ldr	r4, [r5, #8]
 80070de:	e7cc      	b.n	800707a <__swbuf_r+0x1e>
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <__swbuf_r+0xa8>)
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d1c9      	bne.n	800707a <__swbuf_r+0x1e>
 80070e6:	68ec      	ldr	r4, [r5, #12]
 80070e8:	e7c7      	b.n	800707a <__swbuf_r+0x1e>
 80070ea:	0021      	movs	r1, r4
 80070ec:	0028      	movs	r0, r5
 80070ee:	f000 f819 	bl	8007124 <__swsetup_r>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0c9      	beq.n	800708a <__swbuf_r+0x2e>
 80070f6:	2601      	movs	r6, #1
 80070f8:	4276      	negs	r6, r6
 80070fa:	e7ea      	b.n	80070d2 <__swbuf_r+0x76>
 80070fc:	08007d5c 	.word	0x08007d5c
 8007100:	08007d7c 	.word	0x08007d7c
 8007104:	08007d3c 	.word	0x08007d3c

08007108 <__ascii_wctomb>:
 8007108:	0003      	movs	r3, r0
 800710a:	1e08      	subs	r0, r1, #0
 800710c:	d005      	beq.n	800711a <__ascii_wctomb+0x12>
 800710e:	2aff      	cmp	r2, #255	; 0xff
 8007110:	d904      	bls.n	800711c <__ascii_wctomb+0x14>
 8007112:	228a      	movs	r2, #138	; 0x8a
 8007114:	2001      	movs	r0, #1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	4240      	negs	r0, r0
 800711a:	4770      	bx	lr
 800711c:	2001      	movs	r0, #1
 800711e:	700a      	strb	r2, [r1, #0]
 8007120:	e7fb      	b.n	800711a <__ascii_wctomb+0x12>
	...

08007124 <__swsetup_r>:
 8007124:	4b37      	ldr	r3, [pc, #220]	; (8007204 <__swsetup_r+0xe0>)
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	0006      	movs	r6, r0
 800712c:	000c      	movs	r4, r1
 800712e:	2d00      	cmp	r5, #0
 8007130:	d005      	beq.n	800713e <__swsetup_r+0x1a>
 8007132:	69ab      	ldr	r3, [r5, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <__swsetup_r+0x1a>
 8007138:	0028      	movs	r0, r5
 800713a:	f000 f9a1 	bl	8007480 <__sinit>
 800713e:	4b32      	ldr	r3, [pc, #200]	; (8007208 <__swsetup_r+0xe4>)
 8007140:	429c      	cmp	r4, r3
 8007142:	d10f      	bne.n	8007164 <__swsetup_r+0x40>
 8007144:	686c      	ldr	r4, [r5, #4]
 8007146:	230c      	movs	r3, #12
 8007148:	5ee2      	ldrsh	r2, [r4, r3]
 800714a:	b293      	uxth	r3, r2
 800714c:	0711      	lsls	r1, r2, #28
 800714e:	d42d      	bmi.n	80071ac <__swsetup_r+0x88>
 8007150:	06d9      	lsls	r1, r3, #27
 8007152:	d411      	bmi.n	8007178 <__swsetup_r+0x54>
 8007154:	2309      	movs	r3, #9
 8007156:	2001      	movs	r0, #1
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	3337      	adds	r3, #55	; 0x37
 800715c:	4313      	orrs	r3, r2
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	4240      	negs	r0, r0
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	4b29      	ldr	r3, [pc, #164]	; (800720c <__swsetup_r+0xe8>)
 8007166:	429c      	cmp	r4, r3
 8007168:	d101      	bne.n	800716e <__swsetup_r+0x4a>
 800716a:	68ac      	ldr	r4, [r5, #8]
 800716c:	e7eb      	b.n	8007146 <__swsetup_r+0x22>
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <__swsetup_r+0xec>)
 8007170:	429c      	cmp	r4, r3
 8007172:	d1e8      	bne.n	8007146 <__swsetup_r+0x22>
 8007174:	68ec      	ldr	r4, [r5, #12]
 8007176:	e7e6      	b.n	8007146 <__swsetup_r+0x22>
 8007178:	075b      	lsls	r3, r3, #29
 800717a:	d513      	bpl.n	80071a4 <__swsetup_r+0x80>
 800717c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717e:	2900      	cmp	r1, #0
 8007180:	d008      	beq.n	8007194 <__swsetup_r+0x70>
 8007182:	0023      	movs	r3, r4
 8007184:	3344      	adds	r3, #68	; 0x44
 8007186:	4299      	cmp	r1, r3
 8007188:	d002      	beq.n	8007190 <__swsetup_r+0x6c>
 800718a:	0030      	movs	r0, r6
 800718c:	f7ff fb5e 	bl	800684c <_free_r>
 8007190:	2300      	movs	r3, #0
 8007192:	6363      	str	r3, [r4, #52]	; 0x34
 8007194:	2224      	movs	r2, #36	; 0x24
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	4393      	bics	r3, r2
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	2300      	movs	r3, #0
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	2308      	movs	r3, #8
 80071a6:	89a2      	ldrh	r2, [r4, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <__swsetup_r+0xa6>
 80071b2:	21a0      	movs	r1, #160	; 0xa0
 80071b4:	2280      	movs	r2, #128	; 0x80
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	0089      	lsls	r1, r1, #2
 80071ba:	0092      	lsls	r2, r2, #2
 80071bc:	400b      	ands	r3, r1
 80071be:	4293      	cmp	r3, r2
 80071c0:	d003      	beq.n	80071ca <__swsetup_r+0xa6>
 80071c2:	0021      	movs	r1, r4
 80071c4:	0030      	movs	r0, r6
 80071c6:	f000 fa27 	bl	8007618 <__smakebuf_r>
 80071ca:	220c      	movs	r2, #12
 80071cc:	5ea3      	ldrsh	r3, [r4, r2]
 80071ce:	2001      	movs	r0, #1
 80071d0:	001a      	movs	r2, r3
 80071d2:	b299      	uxth	r1, r3
 80071d4:	4002      	ands	r2, r0
 80071d6:	4203      	tst	r3, r0
 80071d8:	d00f      	beq.n	80071fa <__swsetup_r+0xd6>
 80071da:	2200      	movs	r2, #0
 80071dc:	60a2      	str	r2, [r4, #8]
 80071de:	6962      	ldr	r2, [r4, #20]
 80071e0:	4252      	negs	r2, r2
 80071e2:	61a2      	str	r2, [r4, #24]
 80071e4:	2000      	movs	r0, #0
 80071e6:	6922      	ldr	r2, [r4, #16]
 80071e8:	4282      	cmp	r2, r0
 80071ea:	d1ba      	bne.n	8007162 <__swsetup_r+0x3e>
 80071ec:	060a      	lsls	r2, r1, #24
 80071ee:	d5b8      	bpl.n	8007162 <__swsetup_r+0x3e>
 80071f0:	2240      	movs	r2, #64	; 0x40
 80071f2:	4313      	orrs	r3, r2
 80071f4:	81a3      	strh	r3, [r4, #12]
 80071f6:	3801      	subs	r0, #1
 80071f8:	e7b3      	b.n	8007162 <__swsetup_r+0x3e>
 80071fa:	0788      	lsls	r0, r1, #30
 80071fc:	d400      	bmi.n	8007200 <__swsetup_r+0xdc>
 80071fe:	6962      	ldr	r2, [r4, #20]
 8007200:	60a2      	str	r2, [r4, #8]
 8007202:	e7ef      	b.n	80071e4 <__swsetup_r+0xc0>
 8007204:	20000010 	.word	0x20000010
 8007208:	08007d5c 	.word	0x08007d5c
 800720c:	08007d7c 	.word	0x08007d7c
 8007210:	08007d3c 	.word	0x08007d3c

08007214 <abort>:
 8007214:	2006      	movs	r0, #6
 8007216:	b510      	push	{r4, lr}
 8007218:	f000 fa74 	bl	8007704 <raise>
 800721c:	2001      	movs	r0, #1
 800721e:	f7fb fd45 	bl	8002cac <_exit>
	...

08007224 <__sflush_r>:
 8007224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007226:	898b      	ldrh	r3, [r1, #12]
 8007228:	0005      	movs	r5, r0
 800722a:	000c      	movs	r4, r1
 800722c:	071a      	lsls	r2, r3, #28
 800722e:	d45f      	bmi.n	80072f0 <__sflush_r+0xcc>
 8007230:	684a      	ldr	r2, [r1, #4]
 8007232:	2a00      	cmp	r2, #0
 8007234:	dc04      	bgt.n	8007240 <__sflush_r+0x1c>
 8007236:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007238:	2a00      	cmp	r2, #0
 800723a:	dc01      	bgt.n	8007240 <__sflush_r+0x1c>
 800723c:	2000      	movs	r0, #0
 800723e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007240:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007242:	2f00      	cmp	r7, #0
 8007244:	d0fa      	beq.n	800723c <__sflush_r+0x18>
 8007246:	2200      	movs	r2, #0
 8007248:	2180      	movs	r1, #128	; 0x80
 800724a:	682e      	ldr	r6, [r5, #0]
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	001a      	movs	r2, r3
 8007250:	0149      	lsls	r1, r1, #5
 8007252:	400a      	ands	r2, r1
 8007254:	420b      	tst	r3, r1
 8007256:	d034      	beq.n	80072c2 <__sflush_r+0x9e>
 8007258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	075b      	lsls	r3, r3, #29
 800725e:	d506      	bpl.n	800726e <__sflush_r+0x4a>
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	1ac0      	subs	r0, r0, r3
 8007264:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <__sflush_r+0x4a>
 800726a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800726c:	1ac0      	subs	r0, r0, r3
 800726e:	0002      	movs	r2, r0
 8007270:	6a21      	ldr	r1, [r4, #32]
 8007272:	2300      	movs	r3, #0
 8007274:	0028      	movs	r0, r5
 8007276:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007278:	47b8      	blx	r7
 800727a:	89a1      	ldrh	r1, [r4, #12]
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d106      	bne.n	800728e <__sflush_r+0x6a>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	2b1d      	cmp	r3, #29
 8007284:	d831      	bhi.n	80072ea <__sflush_r+0xc6>
 8007286:	4a2c      	ldr	r2, [pc, #176]	; (8007338 <__sflush_r+0x114>)
 8007288:	40da      	lsrs	r2, r3
 800728a:	07d3      	lsls	r3, r2, #31
 800728c:	d52d      	bpl.n	80072ea <__sflush_r+0xc6>
 800728e:	2300      	movs	r3, #0
 8007290:	6063      	str	r3, [r4, #4]
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	04cb      	lsls	r3, r1, #19
 8007298:	d505      	bpl.n	80072a6 <__sflush_r+0x82>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d102      	bne.n	80072a4 <__sflush_r+0x80>
 800729e:	682b      	ldr	r3, [r5, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d100      	bne.n	80072a6 <__sflush_r+0x82>
 80072a4:	6560      	str	r0, [r4, #84]	; 0x54
 80072a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072a8:	602e      	str	r6, [r5, #0]
 80072aa:	2900      	cmp	r1, #0
 80072ac:	d0c6      	beq.n	800723c <__sflush_r+0x18>
 80072ae:	0023      	movs	r3, r4
 80072b0:	3344      	adds	r3, #68	; 0x44
 80072b2:	4299      	cmp	r1, r3
 80072b4:	d002      	beq.n	80072bc <__sflush_r+0x98>
 80072b6:	0028      	movs	r0, r5
 80072b8:	f7ff fac8 	bl	800684c <_free_r>
 80072bc:	2000      	movs	r0, #0
 80072be:	6360      	str	r0, [r4, #52]	; 0x34
 80072c0:	e7bd      	b.n	800723e <__sflush_r+0x1a>
 80072c2:	2301      	movs	r3, #1
 80072c4:	0028      	movs	r0, r5
 80072c6:	6a21      	ldr	r1, [r4, #32]
 80072c8:	47b8      	blx	r7
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d1c5      	bne.n	800725a <__sflush_r+0x36>
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0c2      	beq.n	800725a <__sflush_r+0x36>
 80072d4:	2b1d      	cmp	r3, #29
 80072d6:	d001      	beq.n	80072dc <__sflush_r+0xb8>
 80072d8:	2b16      	cmp	r3, #22
 80072da:	d101      	bne.n	80072e0 <__sflush_r+0xbc>
 80072dc:	602e      	str	r6, [r5, #0]
 80072de:	e7ad      	b.n	800723c <__sflush_r+0x18>
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	89a2      	ldrh	r2, [r4, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	81a3      	strh	r3, [r4, #12]
 80072e8:	e7a9      	b.n	800723e <__sflush_r+0x1a>
 80072ea:	2340      	movs	r3, #64	; 0x40
 80072ec:	430b      	orrs	r3, r1
 80072ee:	e7fa      	b.n	80072e6 <__sflush_r+0xc2>
 80072f0:	690f      	ldr	r7, [r1, #16]
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d0a2      	beq.n	800723c <__sflush_r+0x18>
 80072f6:	680a      	ldr	r2, [r1, #0]
 80072f8:	600f      	str	r7, [r1, #0]
 80072fa:	1bd2      	subs	r2, r2, r7
 80072fc:	9201      	str	r2, [sp, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	079b      	lsls	r3, r3, #30
 8007302:	d100      	bne.n	8007306 <__sflush_r+0xe2>
 8007304:	694a      	ldr	r2, [r1, #20]
 8007306:	60a2      	str	r2, [r4, #8]
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc00      	bgt.n	8007310 <__sflush_r+0xec>
 800730e:	e795      	b.n	800723c <__sflush_r+0x18>
 8007310:	003a      	movs	r2, r7
 8007312:	0028      	movs	r0, r5
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	6a21      	ldr	r1, [r4, #32]
 8007318:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800731a:	47b0      	blx	r6
 800731c:	2800      	cmp	r0, #0
 800731e:	dc06      	bgt.n	800732e <__sflush_r+0x10a>
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	2001      	movs	r0, #1
 8007324:	89a2      	ldrh	r2, [r4, #12]
 8007326:	4240      	negs	r0, r0
 8007328:	4313      	orrs	r3, r2
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	e787      	b.n	800723e <__sflush_r+0x1a>
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	183f      	adds	r7, r7, r0
 8007332:	1a1b      	subs	r3, r3, r0
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	e7e7      	b.n	8007308 <__sflush_r+0xe4>
 8007338:	20400001 	.word	0x20400001

0800733c <_fflush_r>:
 800733c:	690b      	ldr	r3, [r1, #16]
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	0005      	movs	r5, r0
 8007342:	000c      	movs	r4, r1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <_fflush_r+0x12>
 8007348:	2500      	movs	r5, #0
 800734a:	0028      	movs	r0, r5
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	2800      	cmp	r0, #0
 8007350:	d004      	beq.n	800735c <_fflush_r+0x20>
 8007352:	6983      	ldr	r3, [r0, #24]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <_fflush_r+0x20>
 8007358:	f000 f892 	bl	8007480 <__sinit>
 800735c:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <_fflush_r+0x74>)
 800735e:	429c      	cmp	r4, r3
 8007360:	d11b      	bne.n	800739a <_fflush_r+0x5e>
 8007362:	686c      	ldr	r4, [r5, #4]
 8007364:	220c      	movs	r2, #12
 8007366:	5ea3      	ldrsh	r3, [r4, r2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ed      	beq.n	8007348 <_fflush_r+0xc>
 800736c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800736e:	07d2      	lsls	r2, r2, #31
 8007370:	d404      	bmi.n	800737c <_fflush_r+0x40>
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	d402      	bmi.n	800737c <_fflush_r+0x40>
 8007376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007378:	f000 f923 	bl	80075c2 <__retarget_lock_acquire_recursive>
 800737c:	0028      	movs	r0, r5
 800737e:	0021      	movs	r1, r4
 8007380:	f7ff ff50 	bl	8007224 <__sflush_r>
 8007384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007386:	0005      	movs	r5, r0
 8007388:	07db      	lsls	r3, r3, #31
 800738a:	d4de      	bmi.n	800734a <_fflush_r+0xe>
 800738c:	89a3      	ldrh	r3, [r4, #12]
 800738e:	059b      	lsls	r3, r3, #22
 8007390:	d4db      	bmi.n	800734a <_fflush_r+0xe>
 8007392:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007394:	f000 f916 	bl	80075c4 <__retarget_lock_release_recursive>
 8007398:	e7d7      	b.n	800734a <_fflush_r+0xe>
 800739a:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <_fflush_r+0x78>)
 800739c:	429c      	cmp	r4, r3
 800739e:	d101      	bne.n	80073a4 <_fflush_r+0x68>
 80073a0:	68ac      	ldr	r4, [r5, #8]
 80073a2:	e7df      	b.n	8007364 <_fflush_r+0x28>
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <_fflush_r+0x7c>)
 80073a6:	429c      	cmp	r4, r3
 80073a8:	d1dc      	bne.n	8007364 <_fflush_r+0x28>
 80073aa:	68ec      	ldr	r4, [r5, #12]
 80073ac:	e7da      	b.n	8007364 <_fflush_r+0x28>
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	08007d5c 	.word	0x08007d5c
 80073b4:	08007d7c 	.word	0x08007d7c
 80073b8:	08007d3c 	.word	0x08007d3c

080073bc <std>:
 80073bc:	2300      	movs	r3, #0
 80073be:	b510      	push	{r4, lr}
 80073c0:	0004      	movs	r4, r0
 80073c2:	6003      	str	r3, [r0, #0]
 80073c4:	6043      	str	r3, [r0, #4]
 80073c6:	6083      	str	r3, [r0, #8]
 80073c8:	8181      	strh	r1, [r0, #12]
 80073ca:	6643      	str	r3, [r0, #100]	; 0x64
 80073cc:	0019      	movs	r1, r3
 80073ce:	81c2      	strh	r2, [r0, #14]
 80073d0:	6103      	str	r3, [r0, #16]
 80073d2:	6143      	str	r3, [r0, #20]
 80073d4:	6183      	str	r3, [r0, #24]
 80073d6:	2208      	movs	r2, #8
 80073d8:	305c      	adds	r0, #92	; 0x5c
 80073da:	f7fd fb1d 	bl	8004a18 <memset>
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <std+0x38>)
 80073e0:	6263      	str	r3, [r4, #36]	; 0x24
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <std+0x3c>)
 80073e4:	6224      	str	r4, [r4, #32]
 80073e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <std+0x40>)
 80073ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <std+0x44>)
 80073ee:	6323      	str	r3, [r4, #48]	; 0x30
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	08007745 	.word	0x08007745
 80073f8:	0800776d 	.word	0x0800776d
 80073fc:	080077a5 	.word	0x080077a5
 8007400:	080077d1 	.word	0x080077d1

08007404 <_cleanup_r>:
 8007404:	b510      	push	{r4, lr}
 8007406:	4902      	ldr	r1, [pc, #8]	; (8007410 <_cleanup_r+0xc>)
 8007408:	f000 f8ba 	bl	8007580 <_fwalk_reent>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	0800733d 	.word	0x0800733d

08007414 <__sfmoreglue>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	2568      	movs	r5, #104	; 0x68
 8007418:	1e4a      	subs	r2, r1, #1
 800741a:	4355      	muls	r5, r2
 800741c:	000e      	movs	r6, r1
 800741e:	0029      	movs	r1, r5
 8007420:	3174      	adds	r1, #116	; 0x74
 8007422:	f7ff fa5d 	bl	80068e0 <_malloc_r>
 8007426:	1e04      	subs	r4, r0, #0
 8007428:	d008      	beq.n	800743c <__sfmoreglue+0x28>
 800742a:	2100      	movs	r1, #0
 800742c:	002a      	movs	r2, r5
 800742e:	6001      	str	r1, [r0, #0]
 8007430:	6046      	str	r6, [r0, #4]
 8007432:	300c      	adds	r0, #12
 8007434:	60a0      	str	r0, [r4, #8]
 8007436:	3268      	adds	r2, #104	; 0x68
 8007438:	f7fd faee 	bl	8004a18 <memset>
 800743c:	0020      	movs	r0, r4
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <__sfp_lock_acquire>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4802      	ldr	r0, [pc, #8]	; (800744c <__sfp_lock_acquire+0xc>)
 8007444:	f000 f8bd 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8007448:	bd10      	pop	{r4, pc}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	20000318 	.word	0x20000318

08007450 <__sfp_lock_release>:
 8007450:	b510      	push	{r4, lr}
 8007452:	4802      	ldr	r0, [pc, #8]	; (800745c <__sfp_lock_release+0xc>)
 8007454:	f000 f8b6 	bl	80075c4 <__retarget_lock_release_recursive>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	20000318 	.word	0x20000318

08007460 <__sinit_lock_acquire>:
 8007460:	b510      	push	{r4, lr}
 8007462:	4802      	ldr	r0, [pc, #8]	; (800746c <__sinit_lock_acquire+0xc>)
 8007464:	f000 f8ad 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8007468:	bd10      	pop	{r4, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	20000313 	.word	0x20000313

08007470 <__sinit_lock_release>:
 8007470:	b510      	push	{r4, lr}
 8007472:	4802      	ldr	r0, [pc, #8]	; (800747c <__sinit_lock_release+0xc>)
 8007474:	f000 f8a6 	bl	80075c4 <__retarget_lock_release_recursive>
 8007478:	bd10      	pop	{r4, pc}
 800747a:	46c0      	nop			; (mov r8, r8)
 800747c:	20000313 	.word	0x20000313

08007480 <__sinit>:
 8007480:	b513      	push	{r0, r1, r4, lr}
 8007482:	0004      	movs	r4, r0
 8007484:	f7ff ffec 	bl	8007460 <__sinit_lock_acquire>
 8007488:	69a3      	ldr	r3, [r4, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <__sinit+0x14>
 800748e:	f7ff ffef 	bl	8007470 <__sinit_lock_release>
 8007492:	bd13      	pop	{r0, r1, r4, pc}
 8007494:	64a3      	str	r3, [r4, #72]	; 0x48
 8007496:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007498:	6523      	str	r3, [r4, #80]	; 0x50
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <__sinit+0x68>)
 800749c:	4a13      	ldr	r2, [pc, #76]	; (80074ec <__sinit+0x6c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d101      	bne.n	80074ac <__sinit+0x2c>
 80074a8:	2301      	movs	r3, #1
 80074aa:	61a3      	str	r3, [r4, #24]
 80074ac:	0020      	movs	r0, r4
 80074ae:	f000 f81f 	bl	80074f0 <__sfp>
 80074b2:	6060      	str	r0, [r4, #4]
 80074b4:	0020      	movs	r0, r4
 80074b6:	f000 f81b 	bl	80074f0 <__sfp>
 80074ba:	60a0      	str	r0, [r4, #8]
 80074bc:	0020      	movs	r0, r4
 80074be:	f000 f817 	bl	80074f0 <__sfp>
 80074c2:	2200      	movs	r2, #0
 80074c4:	2104      	movs	r1, #4
 80074c6:	60e0      	str	r0, [r4, #12]
 80074c8:	6860      	ldr	r0, [r4, #4]
 80074ca:	f7ff ff77 	bl	80073bc <std>
 80074ce:	2201      	movs	r2, #1
 80074d0:	2109      	movs	r1, #9
 80074d2:	68a0      	ldr	r0, [r4, #8]
 80074d4:	f7ff ff72 	bl	80073bc <std>
 80074d8:	2202      	movs	r2, #2
 80074da:	2112      	movs	r1, #18
 80074dc:	68e0      	ldr	r0, [r4, #12]
 80074de:	f7ff ff6d 	bl	80073bc <std>
 80074e2:	2301      	movs	r3, #1
 80074e4:	61a3      	str	r3, [r4, #24]
 80074e6:	e7d2      	b.n	800748e <__sinit+0xe>
 80074e8:	080079bc 	.word	0x080079bc
 80074ec:	08007405 	.word	0x08007405

080074f0 <__sfp>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	0007      	movs	r7, r0
 80074f4:	f7ff ffa4 	bl	8007440 <__sfp_lock_acquire>
 80074f8:	4b1f      	ldr	r3, [pc, #124]	; (8007578 <__sfp+0x88>)
 80074fa:	681e      	ldr	r6, [r3, #0]
 80074fc:	69b3      	ldr	r3, [r6, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <__sfp+0x18>
 8007502:	0030      	movs	r0, r6
 8007504:	f7ff ffbc 	bl	8007480 <__sinit>
 8007508:	3648      	adds	r6, #72	; 0x48
 800750a:	68b4      	ldr	r4, [r6, #8]
 800750c:	6873      	ldr	r3, [r6, #4]
 800750e:	3b01      	subs	r3, #1
 8007510:	d504      	bpl.n	800751c <__sfp+0x2c>
 8007512:	6833      	ldr	r3, [r6, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d022      	beq.n	800755e <__sfp+0x6e>
 8007518:	6836      	ldr	r6, [r6, #0]
 800751a:	e7f6      	b.n	800750a <__sfp+0x1a>
 800751c:	220c      	movs	r2, #12
 800751e:	5ea5      	ldrsh	r5, [r4, r2]
 8007520:	2d00      	cmp	r5, #0
 8007522:	d11a      	bne.n	800755a <__sfp+0x6a>
 8007524:	0020      	movs	r0, r4
 8007526:	4b15      	ldr	r3, [pc, #84]	; (800757c <__sfp+0x8c>)
 8007528:	3058      	adds	r0, #88	; 0x58
 800752a:	60e3      	str	r3, [r4, #12]
 800752c:	6665      	str	r5, [r4, #100]	; 0x64
 800752e:	f000 f847 	bl	80075c0 <__retarget_lock_init_recursive>
 8007532:	f7ff ff8d 	bl	8007450 <__sfp_lock_release>
 8007536:	0020      	movs	r0, r4
 8007538:	2208      	movs	r2, #8
 800753a:	0029      	movs	r1, r5
 800753c:	6025      	str	r5, [r4, #0]
 800753e:	60a5      	str	r5, [r4, #8]
 8007540:	6065      	str	r5, [r4, #4]
 8007542:	6125      	str	r5, [r4, #16]
 8007544:	6165      	str	r5, [r4, #20]
 8007546:	61a5      	str	r5, [r4, #24]
 8007548:	305c      	adds	r0, #92	; 0x5c
 800754a:	f7fd fa65 	bl	8004a18 <memset>
 800754e:	6365      	str	r5, [r4, #52]	; 0x34
 8007550:	63a5      	str	r5, [r4, #56]	; 0x38
 8007552:	64a5      	str	r5, [r4, #72]	; 0x48
 8007554:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007556:	0020      	movs	r0, r4
 8007558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800755a:	3468      	adds	r4, #104	; 0x68
 800755c:	e7d7      	b.n	800750e <__sfp+0x1e>
 800755e:	2104      	movs	r1, #4
 8007560:	0038      	movs	r0, r7
 8007562:	f7ff ff57 	bl	8007414 <__sfmoreglue>
 8007566:	1e04      	subs	r4, r0, #0
 8007568:	6030      	str	r0, [r6, #0]
 800756a:	d1d5      	bne.n	8007518 <__sfp+0x28>
 800756c:	f7ff ff70 	bl	8007450 <__sfp_lock_release>
 8007570:	230c      	movs	r3, #12
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	e7ef      	b.n	8007556 <__sfp+0x66>
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	080079bc 	.word	0x080079bc
 800757c:	ffff0001 	.word	0xffff0001

08007580 <_fwalk_reent>:
 8007580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007582:	0004      	movs	r4, r0
 8007584:	0006      	movs	r6, r0
 8007586:	2700      	movs	r7, #0
 8007588:	9101      	str	r1, [sp, #4]
 800758a:	3448      	adds	r4, #72	; 0x48
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	68a5      	ldr	r5, [r4, #8]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	9b00      	ldr	r3, [sp, #0]
 8007594:	3b01      	subs	r3, #1
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	d504      	bpl.n	80075a4 <_fwalk_reent+0x24>
 800759a:	6824      	ldr	r4, [r4, #0]
 800759c:	2c00      	cmp	r4, #0
 800759e:	d1f5      	bne.n	800758c <_fwalk_reent+0xc>
 80075a0:	0038      	movs	r0, r7
 80075a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075a4:	89ab      	ldrh	r3, [r5, #12]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d908      	bls.n	80075bc <_fwalk_reent+0x3c>
 80075aa:	220e      	movs	r2, #14
 80075ac:	5eab      	ldrsh	r3, [r5, r2]
 80075ae:	3301      	adds	r3, #1
 80075b0:	d004      	beq.n	80075bc <_fwalk_reent+0x3c>
 80075b2:	0029      	movs	r1, r5
 80075b4:	0030      	movs	r0, r6
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	4798      	blx	r3
 80075ba:	4307      	orrs	r7, r0
 80075bc:	3568      	adds	r5, #104	; 0x68
 80075be:	e7e8      	b.n	8007592 <_fwalk_reent+0x12>

080075c0 <__retarget_lock_init_recursive>:
 80075c0:	4770      	bx	lr

080075c2 <__retarget_lock_acquire_recursive>:
 80075c2:	4770      	bx	lr

080075c4 <__retarget_lock_release_recursive>:
 80075c4:	4770      	bx	lr
	...

080075c8 <__swhatbuf_r>:
 80075c8:	b570      	push	{r4, r5, r6, lr}
 80075ca:	000e      	movs	r6, r1
 80075cc:	001d      	movs	r5, r3
 80075ce:	230e      	movs	r3, #14
 80075d0:	5ec9      	ldrsh	r1, [r1, r3]
 80075d2:	0014      	movs	r4, r2
 80075d4:	b096      	sub	sp, #88	; 0x58
 80075d6:	2900      	cmp	r1, #0
 80075d8:	da07      	bge.n	80075ea <__swhatbuf_r+0x22>
 80075da:	2300      	movs	r3, #0
 80075dc:	602b      	str	r3, [r5, #0]
 80075de:	89b3      	ldrh	r3, [r6, #12]
 80075e0:	061b      	lsls	r3, r3, #24
 80075e2:	d411      	bmi.n	8007608 <__swhatbuf_r+0x40>
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	e00f      	b.n	800760a <__swhatbuf_r+0x42>
 80075ea:	466a      	mov	r2, sp
 80075ec:	f000 f91c 	bl	8007828 <_fstat_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	dbf2      	blt.n	80075da <__swhatbuf_r+0x12>
 80075f4:	23f0      	movs	r3, #240	; 0xf0
 80075f6:	9901      	ldr	r1, [sp, #4]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	4019      	ands	r1, r3
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <__swhatbuf_r+0x4c>)
 80075fe:	18c9      	adds	r1, r1, r3
 8007600:	424b      	negs	r3, r1
 8007602:	4159      	adcs	r1, r3
 8007604:	6029      	str	r1, [r5, #0]
 8007606:	e7ed      	b.n	80075e4 <__swhatbuf_r+0x1c>
 8007608:	2340      	movs	r3, #64	; 0x40
 800760a:	2000      	movs	r0, #0
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	b016      	add	sp, #88	; 0x58
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	ffffe000 	.word	0xffffe000

08007618 <__smakebuf_r>:
 8007618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800761a:	2602      	movs	r6, #2
 800761c:	898b      	ldrh	r3, [r1, #12]
 800761e:	0005      	movs	r5, r0
 8007620:	000c      	movs	r4, r1
 8007622:	4233      	tst	r3, r6
 8007624:	d006      	beq.n	8007634 <__smakebuf_r+0x1c>
 8007626:	0023      	movs	r3, r4
 8007628:	3347      	adds	r3, #71	; 0x47
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	2301      	movs	r3, #1
 8007630:	6163      	str	r3, [r4, #20]
 8007632:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007634:	466a      	mov	r2, sp
 8007636:	ab01      	add	r3, sp, #4
 8007638:	f7ff ffc6 	bl	80075c8 <__swhatbuf_r>
 800763c:	9900      	ldr	r1, [sp, #0]
 800763e:	0007      	movs	r7, r0
 8007640:	0028      	movs	r0, r5
 8007642:	f7ff f94d 	bl	80068e0 <_malloc_r>
 8007646:	2800      	cmp	r0, #0
 8007648:	d108      	bne.n	800765c <__smakebuf_r+0x44>
 800764a:	220c      	movs	r2, #12
 800764c:	5ea3      	ldrsh	r3, [r4, r2]
 800764e:	059a      	lsls	r2, r3, #22
 8007650:	d4ef      	bmi.n	8007632 <__smakebuf_r+0x1a>
 8007652:	2203      	movs	r2, #3
 8007654:	4393      	bics	r3, r2
 8007656:	431e      	orrs	r6, r3
 8007658:	81a6      	strh	r6, [r4, #12]
 800765a:	e7e4      	b.n	8007626 <__smakebuf_r+0xe>
 800765c:	4b0f      	ldr	r3, [pc, #60]	; (800769c <__smakebuf_r+0x84>)
 800765e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007660:	2380      	movs	r3, #128	; 0x80
 8007662:	89a2      	ldrh	r2, [r4, #12]
 8007664:	6020      	str	r0, [r4, #0]
 8007666:	4313      	orrs	r3, r2
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	9b00      	ldr	r3, [sp, #0]
 800766c:	6120      	str	r0, [r4, #16]
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00d      	beq.n	8007692 <__smakebuf_r+0x7a>
 8007676:	0028      	movs	r0, r5
 8007678:	230e      	movs	r3, #14
 800767a:	5ee1      	ldrsh	r1, [r4, r3]
 800767c:	f000 f8e6 	bl	800784c <_isatty_r>
 8007680:	2800      	cmp	r0, #0
 8007682:	d006      	beq.n	8007692 <__smakebuf_r+0x7a>
 8007684:	2203      	movs	r2, #3
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	4393      	bics	r3, r2
 800768a:	001a      	movs	r2, r3
 800768c:	2301      	movs	r3, #1
 800768e:	4313      	orrs	r3, r2
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	89a0      	ldrh	r0, [r4, #12]
 8007694:	4307      	orrs	r7, r0
 8007696:	81a7      	strh	r7, [r4, #12]
 8007698:	e7cb      	b.n	8007632 <__smakebuf_r+0x1a>
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	08007405 	.word	0x08007405

080076a0 <_malloc_usable_size_r>:
 80076a0:	1f0b      	subs	r3, r1, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	1f18      	subs	r0, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da01      	bge.n	80076ae <_malloc_usable_size_r+0xe>
 80076aa:	580b      	ldr	r3, [r1, r0]
 80076ac:	18c0      	adds	r0, r0, r3
 80076ae:	4770      	bx	lr

080076b0 <_raise_r>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	0004      	movs	r4, r0
 80076b4:	000d      	movs	r5, r1
 80076b6:	291f      	cmp	r1, #31
 80076b8:	d904      	bls.n	80076c4 <_raise_r+0x14>
 80076ba:	2316      	movs	r3, #22
 80076bc:	6003      	str	r3, [r0, #0]
 80076be:	2001      	movs	r0, #1
 80076c0:	4240      	negs	r0, r0
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <_raise_r+0x24>
 80076ca:	008a      	lsls	r2, r1, #2
 80076cc:	189b      	adds	r3, r3, r2
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	d108      	bne.n	80076e6 <_raise_r+0x36>
 80076d4:	0020      	movs	r0, r4
 80076d6:	f000 f831 	bl	800773c <_getpid_r>
 80076da:	002a      	movs	r2, r5
 80076dc:	0001      	movs	r1, r0
 80076de:	0020      	movs	r0, r4
 80076e0:	f000 f81a 	bl	8007718 <_kill_r>
 80076e4:	e7ed      	b.n	80076c2 <_raise_r+0x12>
 80076e6:	2000      	movs	r0, #0
 80076e8:	2a01      	cmp	r2, #1
 80076ea:	d0ea      	beq.n	80076c2 <_raise_r+0x12>
 80076ec:	1c51      	adds	r1, r2, #1
 80076ee:	d103      	bne.n	80076f8 <_raise_r+0x48>
 80076f0:	2316      	movs	r3, #22
 80076f2:	3001      	adds	r0, #1
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	e7e4      	b.n	80076c2 <_raise_r+0x12>
 80076f8:	2400      	movs	r4, #0
 80076fa:	0028      	movs	r0, r5
 80076fc:	601c      	str	r4, [r3, #0]
 80076fe:	4790      	blx	r2
 8007700:	0020      	movs	r0, r4
 8007702:	e7de      	b.n	80076c2 <_raise_r+0x12>

08007704 <raise>:
 8007704:	b510      	push	{r4, lr}
 8007706:	4b03      	ldr	r3, [pc, #12]	; (8007714 <raise+0x10>)
 8007708:	0001      	movs	r1, r0
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	f7ff ffd0 	bl	80076b0 <_raise_r>
 8007710:	bd10      	pop	{r4, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	20000010 	.word	0x20000010

08007718 <_kill_r>:
 8007718:	2300      	movs	r3, #0
 800771a:	b570      	push	{r4, r5, r6, lr}
 800771c:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_kill_r+0x20>)
 800771e:	0004      	movs	r4, r0
 8007720:	0008      	movs	r0, r1
 8007722:	0011      	movs	r1, r2
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	f7fb fab1 	bl	8002c8c <_kill>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d103      	bne.n	8007736 <_kill_r+0x1e>
 800772e:	682b      	ldr	r3, [r5, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d000      	beq.n	8007736 <_kill_r+0x1e>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	2000030c 	.word	0x2000030c

0800773c <_getpid_r>:
 800773c:	b510      	push	{r4, lr}
 800773e:	f7fb fa9f 	bl	8002c80 <_getpid>
 8007742:	bd10      	pop	{r4, pc}

08007744 <__sread>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	000c      	movs	r4, r1
 8007748:	250e      	movs	r5, #14
 800774a:	5f49      	ldrsh	r1, [r1, r5]
 800774c:	f000 f8a4 	bl	8007898 <_read_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	db03      	blt.n	800775c <__sread+0x18>
 8007754:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007756:	181b      	adds	r3, r3, r0
 8007758:	6563      	str	r3, [r4, #84]	; 0x54
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	4a02      	ldr	r2, [pc, #8]	; (8007768 <__sread+0x24>)
 8007760:	4013      	ands	r3, r2
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	e7f9      	b.n	800775a <__sread+0x16>
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	ffffefff 	.word	0xffffefff

0800776c <__swrite>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	001f      	movs	r7, r3
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	0005      	movs	r5, r0
 8007774:	000c      	movs	r4, r1
 8007776:	0016      	movs	r6, r2
 8007778:	05db      	lsls	r3, r3, #23
 800777a:	d505      	bpl.n	8007788 <__swrite+0x1c>
 800777c:	230e      	movs	r3, #14
 800777e:	5ec9      	ldrsh	r1, [r1, r3]
 8007780:	2200      	movs	r2, #0
 8007782:	2302      	movs	r3, #2
 8007784:	f000 f874 	bl	8007870 <_lseek_r>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <__swrite+0x34>)
 800778c:	0028      	movs	r0, r5
 800778e:	4013      	ands	r3, r2
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	0032      	movs	r2, r6
 8007794:	230e      	movs	r3, #14
 8007796:	5ee1      	ldrsh	r1, [r4, r3]
 8007798:	003b      	movs	r3, r7
 800779a:	f000 f81f 	bl	80077dc <_write_r>
 800779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a0:	ffffefff 	.word	0xffffefff

080077a4 <__sseek>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	000c      	movs	r4, r1
 80077a8:	250e      	movs	r5, #14
 80077aa:	5f49      	ldrsh	r1, [r1, r5]
 80077ac:	f000 f860 	bl	8007870 <_lseek_r>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	1c42      	adds	r2, r0, #1
 80077b4:	d103      	bne.n	80077be <__sseek+0x1a>
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <__sseek+0x28>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	2280      	movs	r2, #128	; 0x80
 80077c0:	0152      	lsls	r2, r2, #5
 80077c2:	4313      	orrs	r3, r2
 80077c4:	81a3      	strh	r3, [r4, #12]
 80077c6:	6560      	str	r0, [r4, #84]	; 0x54
 80077c8:	e7f8      	b.n	80077bc <__sseek+0x18>
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	ffffefff 	.word	0xffffefff

080077d0 <__sclose>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	230e      	movs	r3, #14
 80077d4:	5ec9      	ldrsh	r1, [r1, r3]
 80077d6:	f000 f815 	bl	8007804 <_close_r>
 80077da:	bd10      	pop	{r4, pc}

080077dc <_write_r>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	0004      	movs	r4, r0
 80077e0:	0008      	movs	r0, r1
 80077e2:	0011      	movs	r1, r2
 80077e4:	001a      	movs	r2, r3
 80077e6:	2300      	movs	r3, #0
 80077e8:	4d05      	ldr	r5, [pc, #20]	; (8007800 <_write_r+0x24>)
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fb fa87 	bl	8002cfe <_write>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d103      	bne.n	80077fc <_write_r+0x20>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d000      	beq.n	80077fc <_write_r+0x20>
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	2000030c 	.word	0x2000030c

08007804 <_close_r>:
 8007804:	2300      	movs	r3, #0
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	4d06      	ldr	r5, [pc, #24]	; (8007824 <_close_r+0x20>)
 800780a:	0004      	movs	r4, r0
 800780c:	0008      	movs	r0, r1
 800780e:	602b      	str	r3, [r5, #0]
 8007810:	f7fb fa91 	bl	8002d36 <_close>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d103      	bne.n	8007820 <_close_r+0x1c>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d000      	beq.n	8007820 <_close_r+0x1c>
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	bd70      	pop	{r4, r5, r6, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	2000030c 	.word	0x2000030c

08007828 <_fstat_r>:
 8007828:	2300      	movs	r3, #0
 800782a:	b570      	push	{r4, r5, r6, lr}
 800782c:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_fstat_r+0x20>)
 800782e:	0004      	movs	r4, r0
 8007830:	0008      	movs	r0, r1
 8007832:	0011      	movs	r1, r2
 8007834:	602b      	str	r3, [r5, #0]
 8007836:	f7fb fa88 	bl	8002d4a <_fstat>
 800783a:	1c43      	adds	r3, r0, #1
 800783c:	d103      	bne.n	8007846 <_fstat_r+0x1e>
 800783e:	682b      	ldr	r3, [r5, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d000      	beq.n	8007846 <_fstat_r+0x1e>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	2000030c 	.word	0x2000030c

0800784c <_isatty_r>:
 800784c:	2300      	movs	r3, #0
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	4d06      	ldr	r5, [pc, #24]	; (800786c <_isatty_r+0x20>)
 8007852:	0004      	movs	r4, r0
 8007854:	0008      	movs	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7fb fa85 	bl	8002d66 <_isatty>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d103      	bne.n	8007868 <_isatty_r+0x1c>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d000      	beq.n	8007868 <_isatty_r+0x1c>
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	2000030c 	.word	0x2000030c

08007870 <_lseek_r>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	0004      	movs	r4, r0
 8007874:	0008      	movs	r0, r1
 8007876:	0011      	movs	r1, r2
 8007878:	001a      	movs	r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	4d05      	ldr	r5, [pc, #20]	; (8007894 <_lseek_r+0x24>)
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	f7fb fa7a 	bl	8002d78 <_lseek>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d103      	bne.n	8007890 <_lseek_r+0x20>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d000      	beq.n	8007890 <_lseek_r+0x20>
 800788e:	6023      	str	r3, [r4, #0]
 8007890:	bd70      	pop	{r4, r5, r6, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	2000030c 	.word	0x2000030c

08007898 <_read_r>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	0004      	movs	r4, r0
 800789c:	0008      	movs	r0, r1
 800789e:	0011      	movs	r1, r2
 80078a0:	001a      	movs	r2, r3
 80078a2:	2300      	movs	r3, #0
 80078a4:	4d05      	ldr	r5, [pc, #20]	; (80078bc <_read_r+0x24>)
 80078a6:	602b      	str	r3, [r5, #0]
 80078a8:	f7fb fa0c 	bl	8002cc4 <_read>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d103      	bne.n	80078b8 <_read_r+0x20>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d000      	beq.n	80078b8 <_read_r+0x20>
 80078b6:	6023      	str	r3, [r4, #0]
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	2000030c 	.word	0x2000030c

080078c0 <_init>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr

080078cc <_fini>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d2:	bc08      	pop	{r3}
 80078d4:	469e      	mov	lr, r3
 80078d6:	4770      	bx	lr
